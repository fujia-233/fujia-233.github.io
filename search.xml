<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx</title>
      <link href="/2024/12/04/Nginx/"/>
      <url>/2024/12/04/Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a><strong>Nginx</strong></h1><p>别名：engine x</p><p>百科：<em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p><p>主要功能：<strong>反向代理</strong>，<strong>负载均衡</strong>，<strong>动静分离</strong></p><p>1.项目刚刚上线的时候，并发量小，用户使用的少，所以在低并发的情况下，一个jar包启动应用就够了，然后内部tomcat返回内容给用户。</p><p>2.但是慢慢的，使用我们平台的用户越来越多了，并发量慢慢增大了，这时候一台服务器满足不了我们的需求了。</p><p>3.于是我们横向扩展，又增加了服务器。这个时候几个项目启动在不同的服务器上，用户要访问，就需要增加一个代理服务器了，通过代理服务器来帮我们转发和处理请求。</p><p>4.我们希望这个代理服务器可以帮助我们接收用户的请求，然后将用户的请求按照规则帮我们转发到不同的服务器节点之上。这个过程用户是无感知的，用户并不知道是哪个服务器返回的结果，我们还希望他可以按照服务器的性能提供不同的权重选择。保证最佳体验！所以我们使用了Nginx。</p><h2 id="一、正向代理和反向代理"><a href="#一、正向代理和反向代理" class="headerlink" title="一、正向代理和反向代理"></a>一、正向代理和反向代理</h2><p><strong>正向代理</strong>代理的对象是客户端，<strong>反向代理</strong>代理的对象是服务端</p><p><strong>正向代理：</strong></p><p>用户知道目标服务器地址，但由于网络限制等原因，无法直接访问。这时候需要先连接代理服务器，然后再由代理服务器访问目标服务器。</p><p>例如：由于防火墙的原因，我们并不能直接访问谷歌，那么我们可以借助VPN来实现。正向代理“代理”的是客户端，而且客户端是知道目标的，而目标是不知道客户端是通过VPN访问的。</p><p><img src="/../images/postsImg/Nginx/v2-c8ac111c267ae0745f984e326ef0c47f_720w.jpg" alt="img"></p><p><strong>反向代理：</strong></p><p>当我们在外网访问百度的时候，其实会进行一个转发，代理到内网去，这就是所谓的反向代理，即反向代理“代理”的是服务器端，而且这一个过程对于客户端而言是透明的。</p><p><img src="/../images/postsImg/Nginx/v2-4787a512240b238ebf928cd0651e1d99_720w.jpg" alt="img"></p><h2 id="二、负载均衡"><a href="#二、负载均衡" class="headerlink" title="二、负载均衡"></a>二、负载均衡</h2><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。</p><p>轮询<br><img src="/../images/postsImg/Nginx/kuangstudy4d33dfac-1949-4b2d-abb8-fe0b6e65b8dc.png" alt="img"><br>加权轮询<br><img src="/../images/postsImg/Nginx/kuangstudyb1e3e440-4159-4259-a174-528b56cb04b2.png" alt="img"><br>iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。<br><img src="/../images/postsImg/Nginx/kuangstudy64acb9a3-cd1a-4c0e-a1fa-9b220046a95a.png" alt="img"></p><h2 id="三、动静分离"><a href="#三、动静分离" class="headerlink" title="三、动静分离"></a>三、动静分离</h2><p>动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p><p><img src="/../images/postsImg/Nginx/kuangstudyedb1bbd6-e530-4aba-8fde-68658a10e73f.png" alt="img"></p><h2 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>官网下载<a href="http://nginx.org/en/download.html%EF%BC%9A">http://nginx.org/en/download.html：</a></p><p><img src="/../images/postsImg/Nginx/image-20220109174326668.png" alt="img"></p><p>下载解压后目录：</p><p><img src="/../images/postsImg/Nginx/image-20220109174115257.png" alt="image-20220109174115257"></p><h3 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h3><p>有很多种方法启动nginx</p><p>(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过</p><p>(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 <code>nginx.exe</code> ，回车即可</p><h3 id="3-检查nginx是否启动成功"><a href="#3-检查nginx是否启动成功" class="headerlink" title="3.检查nginx是否启动成功"></a>3.检查nginx是否启动成功</h3><p>直接在浏览器地址栏输入网址 <a href="http://localhost/">http://localhost:80</a> 回车，出现以下页面说明启动成功！</p><p><img src="/../images/postsImg/Nginx/kuangstudya21688c8-159e-4caa-8e65-3dc056b6b78e.png" alt="img"></p><h3 id="4-配置监听"><a href="#4-配置监听" class="headerlink" title="4.配置监听"></a>4.配置监听</h3><p>nginx的配置文件是conf目录下的nginx.conf，默认配置的nginx监听的端口为80，如果80端口被占用可以修改为未被占用的端口即可。</p><p><img src="/../images/postsImg/Nginx/kuangstudyf23105c4-b0b2-4e22-a1bf-b8098f40c144.png" alt="img"></p><p>当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，只需要执行命令 <strong>nginx -s reload</strong> 即可让改动生效</p><h3 id="5-简单使用"><a href="#5-简单使用" class="headerlink" title="5.简单使用"></a>5.简单使用</h3><p>在conf目录下的nginx.conf文件里配置Nginx</p><p>主要配置：</p><p><img src="/../images/postsImg/Nginx/image-20220109182109337.png" alt="image-20220109182109337"></p><p>反向代理和负载均衡配置</p><p><img src="/../images/postsImg/Nginx/image-20220109182933006.png" alt="image-20220109182933006"></p><p>配置完后执行命令 <strong>nginx -s reload</strong> 即可让改动生效</p><h3 id="6-关闭nginx"><a href="#6-关闭nginx" class="headerlink" title="6.关闭nginx"></a>6.关闭nginx</h3><p>如果使用cmd命令窗口启动nginx， 关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx</p><p>(1)输入nginx命令 <code>nginx -s stop</code>(快速停止nginx) 或 <code>nginx -s quit</code>(完整有序的停止nginx)</p><p>(2)使用taskkill <code>taskkill /f /t /im nginx.exe</code></p><ol><li><code>taskkill是用来终止进程的，</code></li><li><code>/f是强制终止 .</code></li><li><code>/t终止指定的进程和任何由此启动的子进程。</code></li><li><code>/im示指定的进程名称 .</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nginx </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X-Music音乐平台</title>
      <link href="/2024/06/29/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/"/>
      <url>/2024/06/29/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="X-Music音乐平台"><a href="#X-Music音乐平台" class="headerlink" title="X-Music音乐平台"></a><strong>X-Music音乐平台</strong></h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-项目背景"><a href="#1-1-项目背景" class="headerlink" title="1.1 项目背景"></a>1.1 项目背景</h3><p>​现如今，互联网技术在迅速发展的过程中体现了其快速准确便捷的特点，人们对在线音乐网站的需求也在日益增加。为了更好的提高对音乐信息管理的高效性，为了更好的跟随时代信息的高效性，一个在线音乐网站的建立是必要的。在网站上可以实现对音乐相关信息的管理，建立数据库后将一系列信息存储到数据库中，实现用户对相应音乐的搜索和实现管理员对音乐相关信息的管理，对于管理员和用户来讲都是具有极大的帮助的，在线音乐就是在这个基础上设计的。</p><p>​根据上面的分析，在图书馆和网站上搜集有关的资料，也可以通过线下发传单或以电子形式进行调查问表的填写，依据这些信息了解到现实实际中用户对在线音乐网站有哪些需求，希望网站上都有什么功能，如此在系统实现后能够被广大的用户所接受和推广[2]。</p><h3 id="1-2-系统名称"><a href="#1-2-系统名称" class="headerlink" title="1.2 系统名称"></a>1.2 系统名称</h3><p>​本次数据库设计大作业开发的系统名称为：X-Music音乐平台。</p><h3 id="1-3-开发环境"><a href="#1-3-开发环境" class="headerlink" title="1.3 开发环境"></a>1.3 开发环境</h3><p>本次数据库设计的环境为：</p><p>JDK： Java8</p><p>mysql：MySQL8.0</p><p>node：v14.17.3</p><p>redis：5.0.8</p><p>IDE：IntelliJ IDEA2020 &#x2F; VSCode</p><h2 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h2><p>​从用户方面：用户可以创建账户并登录系统。可以对个人信息进行管理，用户可以修改个人资料，包括昵称、头像、性别、年龄、地区等。用户可以浏览公共歌单，创建并且编辑和删除自己的歌单。用户可以在线播放和下载音乐。收藏管理：可以收藏音乐和歌单，并管理自己的收藏列表。评论互动：用户可以在音乐或歌单下发表评论，并对评论进行点赞、转发和回复。个性化推荐：系统根据用户行为和偏好提供个性化的音乐和歌单推荐[3]。</p><p>​从管理员方面：管理员可以查看、审核用户信息，处理用户问题。歌单管理：管理员可以审核歌单内容，管理违规歌单。音乐库管理：管理员可以上传、更新、删除音乐库中的音乐。评论监管：管理员可以监控、审核用户评论，处理不当言论。管理员可以配置系统设置，如权限分配、功能开关等。可以生成系统使用情况的统计报告。管理员可以设置安全策略，管理用户权限。</p><p>​从系统设计方面应考虑：系统反应度：多个人同时在线的时候对一个事件的反应时间要足够短。界面效果：系统界面一目了然、功能划分明确，能够快速找到需要的功能并操作。储存性能高：在线音乐网站需要存储大量的歌曲信息和相对应的歌手的信息，以及用户注册信息来满足用户的需求，所以要求数据库要有较高的存储量。简单操作：因为音乐没有年龄之分，所以该系统的受用群体可以是所有的用户，所以为了方便用户操作和提高系统的使用度，要求系统功能一目了然，方便用户进行音乐的搜索播放等操作。</p><h2 id="三、系统的基础数据流图"><a href="#三、系统的基础数据流图" class="headerlink" title="三、系统的基础数据流图"></a>三、系统的基础数据流图</h2><p>(1)用户管理：用户可以注册、登录、修改个人信息、注销账号等；</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212191854822.png" alt="image-20241212191854822"></p><p>(2)歌单管理：用户可以创建、编辑、删除自己的歌单，可以将音乐添加到歌单中，可以查看、收藏其他用户的歌单，可以分享自己的歌单到社交媒体等；</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212191906870.png" alt="image-20241212191906870"></p><p>(3)收藏管理：用户可以收藏自己喜欢的音乐、歌单、歌手等，可以查看、取消收藏、管理自己的收藏夹；</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212191913819.png" alt="image-20241212191913819"></p><p>(4)音乐管理：系统可以存储音乐的各种信息，包括歌曲、专辑、歌手、流派，歌词等。可以查询音乐的歌词，播放地址等；</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212191919891.png" alt="image-20241212191919891"></p><p>(5)评论管理：用户可以评论别人的歌曲，歌单，可以查看自己的评论，删除自己的评论。</p><h2 id="四、功能分析"><a href="#四、功能分析" class="headerlink" title="四、功能分析"></a>四、功能分析</h2><h3 id="4-1-功能需求及数据需求分析"><a href="#4-1-功能需求及数据需求分析" class="headerlink" title="4.1 功能需求及数据需求分析"></a>4.1 功能需求及数据需求分析</h3><p>​(1)用户模块：实现用户的注册、登录、修改个人信息、注销账号等功能，以及用户的身份验证、权限控制、个性化设置等功能。用户模块的数据需求包括用户的基本信息（用户名、密码、邮箱、手机号、昵称、头像、性别、年龄、地区）；</p><p>​(2)歌单模块：实现歌单的创建、编辑、删除等功能，歌单模块的数据需求包括歌单的基本信息（歌单名、创建者、创建时间、描述、封面）、歌单的内容信息（包含的音乐、音乐的顺序、音乐的数量）、歌单的统计信息（收藏量、播放量、评分、评论数）；</p><p>​(3)收藏模块：实现收藏的添加、取消、查看、管理等功能，收藏模块的数据需求包括收藏的基本信息（收藏的类型、收藏的对象、收藏的时间）、收藏的统计信息（收藏的数量、收藏的评分）；</p><p>​(4)音乐模块：实现音乐的存储、展示、播放、下载等功能，音乐模块的数据需求包括音乐的基本信息（如歌曲名、歌手名、专辑名、时长、大小、格式、封面、歌词等）、音乐的统计信息（如播放量、下载量、收藏量、评分、评论数等）等；</p><p>​(5)评论模块：实现用户在不同音乐，歌单下进行评论评论模块的数据需求包括评论的基本信息（如评论的用户，评论的时间，评论的内容等）、评论的统计信息（如点赞量，转发量，回复量等）。</p><h3 id="4-2-业务规则分析"><a href="#4-2-业务规则分析" class="headerlink" title="4.2 业务规则分析"></a>4.2 业务规则分析</h3><p>​(1)用户规则：用户必须注册并登录才能使用系统的功能，用户可以修改自己的个人信息，可以注销自己的账号，但不能恢复已注销的账号，用户可以给系统提供反馈信息，系统会根据用户的反馈信息改进服务质量；</p><p>​(2)歌单规则：歌单必须有一个唯一的id，系统不会存储或展示重复的歌单，歌单必须有一个创建者，系统会记录歌单的创建者和创建时间，歌单必须有一个描述，系统会展示歌单的描述，系统会展示歌单的内容和音乐的顺序；</p><p>​(3)收藏规则：收藏必须有一个唯一的id，系统不会存储或展示重复的收藏，收藏必须有一个对象，系统会记录收藏的对象和收藏的时间，收藏除了id与收藏名其他都可以为空；</p><p>​(4)音乐规则：每首音乐都有1个唯一的id，系统不会存储或展示重复的音乐，系统会记录音乐的播放地址、歌手、歌曲名称、歌词信息等；</p><p>​(5)评论规则：每个评论都会有1个唯一的id，系统不会存储id重复的评论，评论只限于歌曲与歌单。</p><p>​X-Music音乐平台的数据库功能模块结构设计如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212192109809.png" alt="image-20241212192109809"></p><h2 id="五、数据库系统设计—概念设计"><a href="#五、数据库系统设计—概念设计" class="headerlink" title="五、数据库系统设计—概念设计"></a>五、数据库系统设计—概念设计</h2><h3 id="5-1-概念结构设计"><a href="#5-1-概念结构设计" class="headerlink" title="5.1 概念结构设计"></a>5.1 概念结构设计</h3><p>​概念结构设计是数据库设计的关键阶段之一。它的定义可以概括为：通过对用户需求进行综合、归纳与抽象，将现实世界中的客观事物及其相互联系转化为一种独立于具体数据库管理系统的概念模型的过程。</p><p>​概念结构设计具体来说就是运用各种概念数据模型的表示方法，如 E-R 图（实体-联系图）等[4]，来描述数据库所需要表示和存储的信息结构，包括实体、实体的属性以及实体之间的关系。这个阶段主要关注的是对业务领域的理解和建模，而不涉及具体的数据库实现细节，如数据类型、存储方式等。它为后续的逻辑结构设计提供了清晰的蓝图和指导，确保数据库能够准确、有效地反映业务需求和数据关系[5]。</p><h3 id="5-2-概念结构的特点和设计方法"><a href="#5-2-概念结构的特点和设计方法" class="headerlink" title="5.2 概念结构的特点和设计方法"></a>5.2 概念结构的特点和设计方法</h3><p>​概念结构具有抽象性，综合性，稳定性和可理解性四大特性。常见的概念结构设计方法有自顶向下，自底向上，逐步扩张和混合策略等。</p><h4 id="5-2-1-命名规范"><a href="#5-2-1-命名规范" class="headerlink" title="5.2.1 命名规范"></a>5.2.1 命名规范</h4><p>(1)实体集的名称应该是单数名词，且首字母大写，例如：User、Music、Playlist等。</p><p>(2)属性的名称应该是小写字母，且用下划线分隔单词，例如：user_id、song_name、playlist_id等。</p><p>(3)联系集的名称应该是两个相关实体集的名称用下划线连接，例如：User_PlayList、PlayList_Music、User_Favor等。</p><p>(4)主键属性的名称应该是实体集的名称加上_id，例如：user_id、playlist_id、song_id等。</p><p>(5)外键属性的名称应该是参照实体集的主键属性的名称，例如：creator_id、song_id、object_id等。</p><h4 id="5-2-2-实体集及属性"><a href="#5-2-2-实体集及属性" class="headerlink" title="5.2.2 实体集及属性"></a>5.2.2 实体集及属性</h4><p>(1)用户（User）：用户是系统的基本使用者，用户可以注册、登录、修改个人信息、注销账号等。用户实体集的属性有：</p><p>​user_id：用户的唯一标识，主键，char类型，非空。</p><p>​user_name：用户的用户名，用于登录，唯一，字符串类型，非空，长度不超过255个字符。</p><p>​user_password：用户的密码，用于登录，字符串类型，非空，长度不超过20个字符。</p><p>​email：用户的邮箱，用于验证和找回密码，唯一，字符串类型，非空，长度不超过50个字符。</p><p>​phone：用户的手机号，用于验证和找回密码，唯一，字符串类型，非空，长度为11个字符。</p><p>​nickname：用户的昵称，用于展示，字符串类型，非空，长度不超过20个字符。</p><p>​gender：用户的性别，用于展示，字符串类型，非空，长度为1个字符，只能是’男’或’女’。</p><p>​age：用户的年龄，用于展示，整数类型，非空，范围在0到120之间。</p><p>(2)音乐（Music）：音乐是系统的基本内容，音乐可以被存储、展示、播放、下载等。音乐实体集的属性有：</p><p>​music_id：音乐的唯一标识，主键，char类型，非空。</p><p>​music_name：音乐的名称，用于展示，字符串类型，非空，长度不超过50个字符。</p><p>​art_id：音乐的歌手的id，用于展示，字符串类型，非空，长度10个字符。</p><p>​album：音乐的专辑名称，用于展示，字符串类型，非空，长度不超过50个字符。</p><p>​cover_url：音乐的封面，用于展示，字符串类型，非空，长度不超过100个字符，存储图片的URL。</p><p>​lyric_url：音乐的歌词，用于展示，字符串类型，非空，长度不超过100个字符，存储歌词的URL。</p><p>​type_id：音乐的风格，用于分类，字符串类型，非空，长度不超过20个字符。</p><p>​play_count：音乐的播放量，用于统计，整数类型，非空，范围在0到1000000000之间，初始值为0。</p><p>​collect_count：音乐的收藏量，用于统计，整数类型，非空，范围在0到1000000000之间，初始值为0。</p><p>​play_url：音乐的播放地址，字符串类型，非空，长度不超过100个字符，存储歌曲的URL。</p><p>(3)歌单（Playlist）：歌单是系统的基本组织形式，歌单可以被创建、编辑、删除等。歌单实体集的属性有：</p><p>​playlist_id：歌单的唯一标识，主键，整数类型，非空，自增。</p><p>​playlist_name：歌单的名称，用于展示，字符串类型，非空，长度不超过50个字符。</p><p>​user_id：歌单的创建者，用于展示，外键，引用用户实体集的user_id属性，整数类型，非空。</p><p>​create_time：歌单的创建时间，用于展示，日期时间类型，非空，格式为’YYYY-MM-DD HH:MM:SS’。</p><p>​description：歌单的描述，用于展示，字符串类型，非空，长度不超过500个字符。</p><p>​cover：歌单的封面，用于展示，字符串类型，非空，长度不超过100个字符，存储图片的URL。</p><p>​tag_id：歌单的标签，用于分类，字符串类型，非空，长度不超过10个字符。</p><p>(4)收藏（Collect）：收藏是系统的基本交互形式，收藏可以被添加、取消、查看、管理等。收藏实体集的属性有：</p><p>​collect_id：收藏的唯一标识，主键，整数类型，非空，自增。</p><p>​collect_type：收藏的类型，用于分类，字符串类型，非空，长度为2个字符，只能是’歌曲’或’歌单’，分别表示收藏的对象是音乐或歌单。</p><p>​user_id：收藏的用户，用于展示，外键，引用 User实体集的外键。</p><p>​collect_time：收藏的创建时间，用于展示，日期时间类型，非空，格式为’YYYY-MM-DD HH:MM:SS’。</p><p>​description：收藏的描述，用于展示，字符串类型，非空，长度不超过500个字符。</p><p>(5)评论（Comment）：评论是系统的基本内容，评论可以被存储、展示等。评论实体集的属性有：</p><p>​con_id：评论的唯一标识，主键，char类型，非空。</p><p>​user_id：用户的唯一标识，char类型，非空。</p><p>​content：评论的内容，char类型，非空。</p><p>​item_id：被评论对象的唯一标识，char类型，非空。</p><p>​item_type：被评论对象的类型，代表着歌单或歌曲，enum类型，非空。</p><h3 id="5-3-系统的E-R图"><a href="#5-3-系统的E-R图" class="headerlink" title="5.3 系统的E-R图"></a>5.3 系统的E-R图</h3><h4 id="5-3-1-实体—联系方法-Entity-Relationship"><a href="#5-3-1-实体—联系方法-Entity-Relationship" class="headerlink" title="5.3.1 实体—联系方法(Entity-Relationship)"></a>5.3.1 实体—联系方法(Entity-Relationship)</h4><p>​根据实际需求得出，各实体之间的联系如下：</p><p>​(1)用户_歌单（User_Playlist）：用户和歌单之间的联系集，表示用户可以创建、编辑、删除自己的歌单；</p><p>​(2)歌单_音乐（Playlist_Music）：歌单和音乐之间的联系集，表示歌单可以包含一个或多个音乐，音乐可以属于一个或多个歌单，歌单的创建者可以将音乐添加到歌单中，也可以从歌单中移除音乐，歌单的内容和音乐的顺序可以被编辑；</p><p>​(3)用户_收藏（User_Collect）：用户和收藏之间的联系集，表示用户可以收藏自己喜欢的音乐、歌单、歌手等，也可以查看、取消收藏、管理自己的收藏夹 ；</p><p>​(4)收藏_音乐（Collect_Music）：收藏和音乐的联系集，表示一首歌可以被一个或多收藏夹收藏，一个收藏夹可以收藏一个或多个音乐，用户可以向收藏夹中增添、删除音乐；</p><p>​(5)收藏_歌单（Collect_Playlist）：收藏和歌单的联系集，表示一个歌单可以被一个或多收藏夹收藏，一个收藏夹可以收藏一个或多个歌单，用户可以向收藏夹中增添、删除歌单；</p><p>​(6)评论_音乐（Comment_Music）：评论音乐的联系集，表示一首歌可以拥有多个评论，但同一个评论只能属于一首歌，用户可以自己添加、删除评论；</p><p>​(7)评论_歌单（Comment_Playlist）：评论歌单的联系集，表示一个歌单可以拥有多个评论，但同一个评论只能属于一歌单，用户可以自己添加、删除评论。</p><h4 id="5-3-2-E-R图设计"><a href="#5-3-2-E-R图设计" class="headerlink" title="5.3.2 E-R图设计"></a>5.3.2 E-R图设计</h4><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212192448576.png" alt="image-20241212192448576"></p><h2 id="六、数据库系统设计—逻辑结构设计"><a href="#六、数据库系统设计—逻辑结构设计" class="headerlink" title="六、数据库系统设计—逻辑结构设计"></a>六、数据库系统设计—逻辑结构设计</h2><h3 id="6-1-关系数据库的基本概念"><a href="#6-1-关系数据库的基本概念" class="headerlink" title="6.1 关系数据库的基本概念"></a>6.1 关系数据库的基本概念</h3><p>​由实体间的联系导出关系模型，关系模型在关系数据库中即为一个二维表。</p><p>​(1)记录：二维表中的一行，表示一个实体。</p><p>​(2)字段：二维表的列，表示实体的属性、特征。</p><p>​(3)主键：列或列的组合，能唯一地标识一行。表中只有一个主键，主键不允许NULL或重复。</p><p>​(4)外键：表中某一字段与另一表中的主键相对应，则该字段称为表的外键。</p><ul><li><p>外键表示了两个表之间的联系。</p></li><li><p>主键所在的表称为主表，外键所在的表为从表。</p><p>​关系模型即二维表，要满足数据完整性的要求。</p></li><li><p>数据完整性：指数据的正确性和可靠性。</p></li><li><p>实体完整性：保证表中所有行具有唯一性。</p></li><li><p>域完整性：保证给定字段的数据有效性。</p></li><li><p>参照完整性：也称引用完整性，确保相关联的表之间数据的一致性。</p></li><li><p>用户自定义完整性：用户根据实际系统要求，定义的约束条件，涉及到的数据必须满足语义要求。</p></li></ul><h3 id="6-2-E-R图向关系模型转换的原则"><a href="#6-2-E-R图向关系模型转换的原则" class="headerlink" title="6.2 E-R图向关系模型转换的原则"></a>6.2 E-R图向关系模型转换的原则</h3><p>​(1)如果两个关系是1:1的联系，可以在两个实体类型转换成的两个关系模式中任意一个关系模式中加入另一个关系模式的码和联系类型的属性[6]。 </p><p>​(2)如果两个关系是1:m的联系，则在n端实体类型转换成的关系模式中加入1端实体类型的码和联系类型的属性。</p><p>​(3)如果两个关系是m:n的联系，则将联系类型也转换成关系模式，其属性为两端实体类型的码加上联系类型的属性，而码为两端实体码的组合。</p><h3 id="6-3-关系模式"><a href="#6-3-关系模式" class="headerlink" title="6.3 关系模式"></a>6.3 关系模式</h3><p>​经过以上E-R图设计，再对相关表结构优化后得到如下设计：</p><p>​(1)User（user_id、user_name、user_password、email、phone、nickname、gender、age）</p><p>​(2)Music（music_id、music_name、art_id、art_name、album、cover_url、lyric_url、type_id、type_name、play_count、collect_count、play_url）</p><p>​(3)Playlist（playlist_id、playlist_name、user_id、create_time、description、cover_url、tag_id、tag_name）</p><p>​(4)PlaylistDetails（playlist_id、music_id）</p><p>​(5)Collect（collect_id、user_id、collect_time、collect_name）</p><p>​(6)CollectDetailsMusic（collect_id、item_id）</p><p>​(7)CollectDetailsPlaylist（collect_id、item_id）</p><p>​(8)Comment（con_id、user_id、content、item_id、tiem_type）</p><h4 id="6-3-1-将联系转换成关系模式"><a href="#6-3-1-将联系转换成关系模式" class="headerlink" title="6.3.1 将联系转换成关系模式"></a>6.3.1 将联系转换成关系模式</h4><p>​(1)用户_歌单（user_id、user_name、user_password、email、phone、nickname、gender、age、playlist_id）</p><p>​(2)歌单_音乐（playlist_id、music_id）</p><p>​(3)用户_收藏（user_id、user_name、user_password、email、phone、nickname、gender、age、collect_id）</p><p>​(4)收藏_音乐（collect_id、music_id）</p><p>​(5)收藏_歌单（collect_id、playlist_id）</p><p>​(6)评论_音乐（music_id、music_name、art_id、art_name、album、cover_url、lyric_url、type_id、type_name、play_count、collect_count、play_url、con_id）</p><p>​(7)评论_歌单（playlist_id、playlist_name、user_id、create_time、description、cover_url、tag_id、tag_name、con_id）</p><h4 id="6-3-2-对关系模式进行规范化"><a href="#6-3-2-对关系模式进行规范化" class="headerlink" title="6.3.2 对关系模式进行规范化"></a>6.3.2 对关系模式进行规范化</h4><p>​这个数据库满足第一范式（1NF），因为每个表中的所有属性都是不可再分的原子值。</p><p>​这个数据库满足第二范式（2NF），因为每个表中的非主属性都完全函数依赖于主键，没有部分函数依赖的情况。例如，Music表中的所有非主属性都完全函数依赖于主键music_id，而不是部分依赖于music_name或art_name等。</p><p>​这个数据库不满足第三范式（3NF）：</p><p>​因为type_name和tag_name字段并不能由music_id和playlist_id得出，因此得出存在相关传递依赖：</p><p>​type_id→type_name</p><p>​tag_id→tag_name</p><p>​art_id→art_name</p><p>​另外因为另外CollectDetailsMusic表和CollectDetailsPlaylist表中的数据有着很多重合，外加上表数量很多后期难以维护，所以我将这两个合并成一张CollectDetails表，再加上一个字段item_type用以区分item_id是Music_id还是Playlist_id</p><p>​经过修改后得到以下数据表：</p><p>​(1)User（user_id、user_name、user_password、email、phone、nickname、gender、age）</p><p>​(2)Music（music_id、music_name、art_id、album、cover_url、lyric_url、type_id、play_count、collect_count、play_url）</p><p>​(3)Playlist（playlist_id、playlist_name、user_id、create_time、description、cover_url、tag_id）</p><p>​(4)PlaylistDetails（playlist_id、music_id）</p><p>​(5)Collect（collect_id、user_id、collect_time、collect_name）</p><p>​(6)CollectDetails（collect_id、item_id、item_type）</p><p>​(7)Comment（con_id、user_id、content、item_id、item_type）</p><p>​(8)MusicType（type_id、type_name）</p><p>​(9)PlaylistType（tag_id、tag_name）</p><p>​(10)Artist（art_id，art_name）</p><p>​这个数据库满足第三范式（3NF）[7]，因为每个表中的非主属性都不传递函数依赖于主键，也就是说，不存在非主属性之间的依赖关系。例如，Music表中的type_id属性不依赖于music_name属性，而只依赖于主键user_id。</p><p>​经过以上规范化处理后，关系模式更加简洁、清晰，并且减少了数据冗余和不一致性。同时，也提高了数据库的性能和可维护性[8]。</p><h2 id="七、数据库系统设计—物理结构设计"><a href="#七、数据库系统设计—物理结构设计" class="headerlink" title="七、数据库系统设计—物理结构设计"></a>七、数据库系统设计—物理结构设计</h2><p>​本数据库一共设计了10张表，User表用来存储用户数据、Music表用来存储音乐数据、Artist表用来存储作者数据、Playlist表用来存储歌单的定义数据、PlaylistDetails表用来存储歌单中具体歌曲列表数据、Collect表用来存储收藏的定义数据、CollectDetails表用来存储收藏的具体项目数据、Comment表用来存储评论数据、MusicType表用来存储音乐的风格数据、PlaylistType表用来存储歌单的类型数据；</p><p>​本数据库一共定义了12个索引，其中10个索引均为主键索引，在定义主键时会自动生成，2个唯一索引，分别是User表中的phone和email字段。</p><p>​表结构如图所示，以下用三线表进行表的物理结构设计展示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212192829485.png" alt="image-20241212192829485"></p><h3 id="7-1-系统包含表的物理结构设计"><a href="#7-1-系统包含表的物理结构设计" class="headerlink" title="7.1 系统包含表的物理结构设计"></a>7.1 系统包含表的物理结构设计</h3><p>(1)User表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>user_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>user_name</td><td>varchar(50)</td><td>NOT NULL</td><td>用户名</td></tr><tr><td>3</td><td>user_password</td><td>varchar(20)</td><td>NOT NULL</td><td>密码</td></tr><tr><td>4</td><td>email</td><td>varchar(50)</td><td>NOT NULL</td><td>邮箱</td></tr><tr><td>5</td><td>phone</td><td>char(11)</td><td>NOT NULL</td><td>手机号</td></tr><tr><td>6</td><td>nickname</td><td>varchar(50)</td><td>NOT NULL</td><td>昵称</td></tr><tr><td>7</td><td>gender</td><td>enum</td><td>NULL</td><td>性别</td></tr><tr><td>8</td><td>age</td><td>int</td><td>NULL</td><td>年龄</td></tr></tbody></table><p>(2)Music表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>music_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>music_name</td><td>varchar（50）</td><td>NOT NULL</td><td>名称</td></tr><tr><td>3</td><td>art_id</td><td>char(10)</td><td>NOT NULL</td><td>歌手id</td></tr><tr><td>4</td><td>album</td><td>varchar（50）</td><td>NULL</td><td>专辑名称</td></tr><tr><td>5</td><td>cover_url</td><td>varchar（100）</td><td>NOT NULL</td><td>封面</td></tr><tr><td>6</td><td>lyric_url</td><td>varchar（100）</td><td>NULL</td><td>歌词</td></tr><tr><td>7</td><td>type_id</td><td>char(5)</td><td>NOT NULL</td><td>风格</td></tr><tr><td>8</td><td>play_count</td><td>bigint</td><td>NULL</td><td>播放量</td></tr><tr><td>9</td><td>collect_count</td><td>bigint</td><td>NULL</td><td>收藏量</td></tr><tr><td>10</td><td>play_url</td><td>varchar（100）</td><td>NOT NULL</td><td>播放地址</td></tr></tbody></table><p>(3)Playlist表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>playlist_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>playlist_name</td><td>Varchar（50）</td><td>NOT NULL</td><td>名称</td></tr><tr><td>3</td><td>user_id</td><td>char(10)</td><td>NOT NULL</td><td>创建者</td></tr><tr><td>4</td><td>create_time</td><td>date</td><td>NOT NULL</td><td>创建时间</td></tr><tr><td>5</td><td>decription</td><td>text</td><td>NULL</td><td>描述</td></tr><tr><td>6</td><td>cover_url</td><td>varchar（100）</td><td>NOT NULL</td><td>封面</td></tr><tr><td>7</td><td>tag_id</td><td>char(5)</td><td>NOT NULL</td><td>标签</td></tr></tbody></table><p>(4)PlaylistType表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>tag_id</td><td>char(5)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>tag_name</td><td>varchar(10)</td><td>NOT NULL</td><td>标签</td></tr></tbody></table><p>(5)PlaylistDetails表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>playlist_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>歌单id</td></tr><tr><td>2</td><td>music_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>音乐id</td></tr></tbody></table><p>(6)Collect表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>collect_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>user_id</td><td>char(10)</td><td>NOT NULL</td><td>用户</td></tr><tr><td>3</td><td>collect_time</td><td>date</td><td>NOT NULL</td><td>创建时间</td></tr><tr><td>4</td><td>collect_name</td><td>varchar(20)</td><td>NULL</td><td>名称</td></tr></tbody></table><p>(7)CollectDetails表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>collect_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>收藏id</td></tr><tr><td>2</td><td>list_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>收藏项目id</td></tr><tr><td>3</td><td>item_type</td><td>enum</td><td>主键&#x2F;NOT NULL</td><td>收藏类型</td></tr></tbody></table><p>(8)MusicType表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th><th></th></tr></thead><tbody><tr><td>1</td><td>type_id</td><td>char(5)</td><td>主键&#x2F;NONULL</td><td>id</td><td></td></tr><tr><td>2</td><td>type_name</td><td>Varchar（50）</td><td>NOT NULL</td><td>音乐风格</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>(9)Comment表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>con_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>user_id</td><td>char(10)</td><td>NOT NULL</td><td>评论用户id</td></tr><tr><td>3</td><td>content</td><td>text</td><td>NOT NULL</td><td>内容</td></tr><tr><td>4</td><td>item_id</td><td>char(10)</td><td>NOT NULL</td><td>被评论id</td></tr><tr><td>5</td><td>item_type</td><td>enum</td><td>NOT NULL</td><td>被评论类型</td></tr></tbody></table><p>(10)Artist表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>art_id</td><td>char(10)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>art_name</td><td>varchar(50)</td><td>NOT NULL</td><td>姓名</td></tr></tbody></table><h2 id="八、存储过程和触发器设计"><a href="#八、存储过程和触发器设计" class="headerlink" title="八、存储过程和触发器设计"></a>八、存储过程和触发器设计</h2><p>​(1)这个触发器[9]会在向 CollectDetails 表插入数据之前检查 item_id 是否合法。如果 item_type 的值为 “歌单”，则 item_id 需要在 Playlist 表的 Playlist_id 字段内；如果 item_type 值为 “歌曲”，则 item_id 需要在 Music 表的 music_id 字段内。如果不匹配，触发器会抛出一个错误，错误内容为 “数据不匹配，请重新输入”。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212192958078.png" alt="image-20241212192958078"></p><p>​(2)这个存储过程接受两个 music_id 作为输入，比较这两个 music_id 对应的 play_count。如果第一个 music_id 的 play_count 大于或等于第二个 music_id 的 play_count，则输出 0；否则，输出 1。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193008683.png" alt="image-20241212193008683"></p><p>​(3)这个存储函数接受一个 playlist_id 作为输入，返回这个 playlist_id 对应的歌单中的歌曲总数。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193016047.png" alt="image-20241212193016047"></p><p>​(4)这个触发器会在向 Comment 表插入数据之前检查 item_id 是否合法。如果 item_type 的值为 “歌单”，则 item_id 需要在 Playlist 表的 Playlist_id 字段内；如果 item_type 值为 “歌曲”，则 item_id 需要在 Music 表的 music_id 字段内。如果不匹配，触发器会抛出一个错误，错误内容为 “数据不匹配，请重新输入”。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193024685.png" alt="image-20241212193024685"></p><p>​(5)这个触发器会在 User 表的 user_id 被修改后，自动更新 Collect、Comment 和 Playlist 表中的对应 user_id。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193033637.png" alt="image-20241212193033637"></p><p>​(6)这个触发器会在 MusicType 表的 type_id 被修改后，自动更新 Music 表中的对应 type_id。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193042407.png" alt="image-20241212193042407"></p><p>​(7)这个触发器会在 Artist 表的 art_id 被修改后，自动更新 Music 表中的对应 art_id。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193050669.png" alt="image-20241212193050669"></p><h2 id="九、运行界面展示"><a href="#九、运行界面展示" class="headerlink" title="九、运行界面展示"></a>九、运行界面展示</h2><h3 id="9-1用户系统"><a href="#9-1用户系统" class="headerlink" title="9.1用户系统"></a>9.1用户系统</h3><p>(1)运行系统，在浏览器输入localhost:8080即可跳转到账号登录界面，账号登录界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193140371.png" alt="image-20241212193140371"></p><p>(2)首页展示轮播图和歌单资讯。轮播图可以用于展示系统快捷指令或者系统活动信息；并且展示各类热门歌单供用户选择。首页界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193155185.png" alt="image-20241212193155185"></p><p>(3)歌单列表用于展示系统所有的歌单，个性化推荐给用户喜欢的歌单，歌单列表界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193201965.png" alt="image-20241212193201965"></p><p>(4)歌手列表用于展示系统中所有的歌手，点击歌手可跳转到歌手的详细信息页面，歌手列表界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193212268.png" alt="image-20241212193212268"></p><p>(5)点击音乐列表，可以进入对应音乐的详情界面，展示音乐图片、歌手、歌词、评论等信息，音乐详情界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193221616.png" alt="image-20241212193221616"></p><p>(6)用户登录后，可以进入个人资料界面设置个人资料、修改密码等操作，个人资料界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193231918.png" alt="image-20241212193231918"></p><h3 id="9-2管理系统"><a href="#9-2管理系统" class="headerlink" title="9.2管理系统"></a>9.2管理系统</h3><p>(1)后台管理首页展示统计的系统信息，比如用户数量、歌曲总数、歌手数量、用户性别比例等信息，后台管理首页界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193306920.png" alt="image-20241212193306920"></p><p>(2)管理员可对用户进行管理，可批量删除用户，用户管理界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193314963.png" alt="image-20241212193314963"></p><p>(3)管理员可对歌手进行管理，可以添加、修改、删除歌手，也可对歌手的歌曲进行管理，歌手管理界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193322146.png" alt="image-20241212193322146"></p><p>(4)管理员可对歌单进行管理，可以添加、编辑、删除歌单，也可对歌单评论进行管理，歌单管理界面如图所示。</p><p><img src="/../images/postsImg/X-Music%E9%9F%B3%E4%B9%90%E5%B9%B3%E5%8F%B0/image-20241212193328853.png" alt="image-20241212193328853"></p><h2 id="十、测试和维护"><a href="#十、测试和维护" class="headerlink" title="十、测试和维护"></a>十、测试和维护</h2><p>​软件在基本完成开发后，不是立刻就会应用到市场上去。每一个软件在正式应用之前都要经过数次的测试与修改，这样才能保证上线后能够以该软件拥有足够的稳定性、能够快速上手操作、有着可以满足用户需求的功能、优美的页面留住用户，吸引用户继续使用该软件，最后实现项目的圆满完成[10]。</p><p>​对系统的测试主要是将系统全部的功能运行操作一遍或几遍以上，查看是否出错的一个操作。对系统的测试包含着功能测试和数据测试两部分。其中功能测试是检验本在线音乐网站功能是否可以正常的操作。</p><p>表11-1 用户登录模块测试用例</p><table><thead><tr><th>用例编号</th><th>测试用例描述</th><th>操作过程及数据</th><th>预期结果</th><th>测试结果</th></tr></thead><tbody><tr><td>N1</td><td>输入正确的用户名密码</td><td>遵循系统既定规则填写用户名密码后点击确定开始登录系统</td><td>成功登录系统后，跳转到系统主页</td><td>通过</td></tr><tr><td>N2</td><td>输入错误的用户名密码</td><td>遵循系统既定规则填写用户名密码后点击确定开始登录系统</td><td>系统提示登录失败，并进入错误提示</td><td>通过</td></tr><tr><td>N3</td><td>空用户名密码</td><td>遵循系统既定规则填写用户名密码后点击确定开始登录系统</td><td>系统提示登录失败，并进入错误提示</td><td>通过</td></tr></tbody></table><p>表11-2 用户管理模块测试用例</p><table><thead><tr><th>用例编号</th><th>测试用例描述</th><th>操作过程及数据</th><th>预期结果</th><th>测试结果</th></tr></thead><tbody><tr><td>F1</td><td>录入用户信息</td><td>点击添加按钮，填写用户信息，点击确定按钮</td><td>提示录入成功</td><td>通过</td></tr><tr><td>F2</td><td>修改用户信息</td><td>点击列表操作栏中的修改链接，改动信息后点击确定按钮</td><td>提示修改成功，用户信息变化</td><td>通过</td></tr><tr><td>F3</td><td>删除用户信息</td><td>点击列表操作栏中的删除链接</td><td>提示删除成功，列表刷新</td><td>通过</td></tr></tbody></table><p>表11-3密码修改模块测试用例</p><table><thead><tr><th>用例编号</th><th>测试用例描述</th><th>操作过程及数据</th><th>预期结果</th><th>测试结果</th></tr></thead><tbody><tr><td>T1</td><td>点击修改密码，输入正确的密码</td><td>按照系统流程填写密码信息后点击确定</td><td>系统提示保存成功，密码保存到数据库</td><td>通过</td></tr><tr><td>T2</td><td>点击修改密码，输入错误的密码</td><td>按照系统流程填写错误密码信息后点击确定</td><td>系统报错，跳转到保存失败界面</td><td>通过</td></tr><tr><td>T3</td><td>点击修改密码，空用户名密码</td><td>按照系统流程点击修改密码后，不填写直接点击确定</td><td>系统报错，跳转到保存失败界面</td><td>通过</td></tr></tbody></table><p>​测试结论，本在线音乐系统可以基本实现管理员对用户注册信息的查看、对音乐和歌手等信息的管理，用户可以根据登录名和密码登录页面，对音乐进行搜索、播放、评价等操作，数据会在修改和添加时进行同步，使得用户和管理员能够看到的信息是统一的，有效的[11]。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​音乐管理系统是一个完善的数据库系统。系统的业务需求包括用户管理、歌单管理、收藏管理、音乐管理和评论管理。系统的功能需求及数据需求分析包括用户模块、歌单模块、收藏模块、音乐模块和评论模块。系统的业务规则分析包括用户规则、歌单规则、收藏规则、音乐规则和评论规则。系统中一共包含了10个表，以及对应的主键与相应的外键。创建的数个存储过程、函数与触发器保障了数据库的完整性与安全性；在撰写这次大作业的过程中，我学到很多，如如何分析业务需求和数据需求，如何设计数据库表，如何确保数据库的完整性和安全性；明白了如何分析业务需求，如何更好的理解业务，如将业务转化成文字与图表与代码，最终实现业务的流程；在完成这次作业过程中我也遇到了很多问题与困难，如对于业务的不理解，导致走了很多弯路，前期方案一直改了删删了改，浪费了很多时间。如对于数据库的一些理论知识也遗忘了很多，如关系转换，ER图，第几范式等。解决方案也很简单，第一就是不断熟悉业务，多想想具体的应用场景，其次对于数据库的基础知识，也需要对其进行专门的复习与记忆，并不断在项目中实践，这将是一个长期的过程，需要不断进行。综上所述，在完成这次作业的过程中我学到了很多，虽然也遇到了很多困难，但有这些困难得到的经验与教训是十分宝贵的。我在以后的学习和工作中，也将不断总结经验，不断提高自己的能力，取得更好的成果。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]  曾遂今.音乐网络传播与当代人的音乐观[J].中国音乐,2006(4):27-3441</p><p>[2]  王梦雪.互联网音乐盈利模式新探索[J].当代经济,2016,33(7):38-39</p><p>[3]  田洁.网络音乐传播的传播特性与现状研究[J].科技与创新,2020(10):42-44</p><p>[4]  王珊，萨师煊，数据库系统概论（第5版），高等教育出版社，2014年。</p><p>[5]  郑阿奇主编，MySQL实用教程（第3版），电子工业出版社</p><p>[6]  洪学杭, 戴金波, 方权宇, 王轩宇, 刘骐嘉, 刘梦泉. 基于MySQL数据库的戒烟App的设计与研究[J].电脑编程技巧与维护, 2024, (05): 96-99+153.</p><p>[7]  刘文远.基于逆向超图的从关系模式到“改进的第三范式”的分解[J].计算机工程与科学,1999,21(6):45-48</p><p>[8]  贾玲.关系数据库规范化设计理论探析[J].武警学院学报,2007,23(12):87-89</p><p>[9]  唐扬,熊伟,陈宏盛,景宁.数据库触发器机制的设计与实现[J].电子技术应用,2005,31(2):16-18</p><p>[10] 王瑶茜,马林虹.浅析软件开发测试体系核心模块组成[J].电子制作,2012,20(10X):110-110</p><p>[11] 宋婷玲.关于计算机软件开发中的数据库测试技术研究[J].信息记录材料,2024,25(3):118-120</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 作业 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高校实习就业信息化管理系统</title>
      <link href="/2024/06/29/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/06/29/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="高校实习就业信息化管理系统"><a href="#高校实习就业信息化管理系统" class="headerlink" title="高校实习就业信息化管理系统"></a><strong>高校实习就业信息化管理系统</strong></h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-项目背景"><a href="#1-1-项目背景" class="headerlink" title="1.1 项目背景"></a>1.1 项目背景</h3><p>​信息不对称，服务平台的不完善是影响大学生就业的重要因素。信息化形态下，建立规范、统一的大学生实习就业信息化管理平台，横向链接企业、高校和学生，纵向以就业为导向，以学生为中心，有助于贯彻落实就业优先战略，实现对大学生就业的精准发力。</p><p>​在互联网带动的信息化浪潮下，几乎无人质疑信息通信技术对当今社会发展的重要性。信息技术使得高校的运行和管理方式产生了革命性的变化，促进了企业和高校内部就业生信息资源和数据的传递，为学生就业一体化提供了有力的技术保障，进一步促进了就业质量的全面提升。</p><p>​高校实习就业信息化管理系统在基于管理的数字化校园建设上，不仅全面提高了高校日常教学、工作效率，还为学生和企业资源整合与利用打造了方便、快捷、充实的平台。</p><h3 id="1-2-系统名称"><a href="#1-2-系统名称" class="headerlink" title="1.2 系统名称"></a>1.2 系统名称</h3><p>​本次数据库设计大作业开发的系统名称为：高校实习就业信息化管理系统。</p><h3 id="1-3-开发环境"><a href="#1-3-开发环境" class="headerlink" title="1.3 开发环境"></a>1.3 开发环境</h3><p>本次数据库设计的环境为：</p><p>IDE工具：IntelliJ IDEA2021</p><p>开发操作系统：Windows10</p><p>Web应用服务器：Tomcat8.5</p><p>数据库：Mysql</p><h2 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h2><p>​本系统以管理为主体，运营者为学校教师、学生、企业。</p><p>​通过平台认证的管理员（教师），对学生基本信息、学生就业信息、企业基本信息、企业招聘信息进行管理。其可通过在校学生的表现和基本信息为其提供合适的就业机会，可通过毕业学生的就业情况为非毕业学生今后的就业提供数据支持。其可通过企业的招聘信息和基本信息，为其输入优秀人才，达到长久合作的效果。</p><p>​对于学生用户，其可以通过此平台查看自己的基本信息和就业信息，可对其进行添加，使自己的信息完整化，便于教师为其挑选合适的就业岗位。 </p><p>​对于企业用户，其可以通过此平台完善本企业的基本信息和招聘信息，使其能招聘到合适的优秀人才。</p><p>​对于校企对接方面，可以通过平台把企业和学校联系起来，多方合作满足学生就业需求。</p><h2 id="三、系统的基础数据流图"><a href="#三、系统的基础数据流图" class="headerlink" title="三、系统的基础数据流图"></a>三、系统的基础数据流图</h2><p>​通过对高校实习就业信息管理系统需求的分析，可以得出系统涉及到大量的基础数据。系统的基础数据流图如图所示。</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212150940205.png" alt="image-20241212150940205"></p><h2 id="四、功能分析"><a href="#四、功能分析" class="headerlink" title="四、功能分析"></a>四、功能分析</h2><p>​高校实习就业信息管理系统分为管理员（教师）用户系统、学生用户系统、企业用户系统三大模块。其中最具特色的功能有以下几点：</p><p>​1.管理员（教师）用户，对企业、学生、修改审核进行管理。</p><p>​2.首页采用饼状图形对数据进行统计展示，可使管理员（教师）用户清晰直观的看见统计数据。</p><p>​3.大部分复杂的数据采用列表的形式进行展示，可使数据整合化，方便管理员（教师）用户进行搜索查找，设有筛选框，模糊查询搜索栏，更加方便快捷。</p><p>​4.设有修改审核功能，学生用户和企业用户想进行修改需提交审核，管理员（教师）通过审核后，方可修改成功。此设计是为了保证学生和企业资料的准确性，和减少数据库存储的压力。</p><p>​5．学生用户和教师用户都可查看自己的信息及更新自己的信息，保证了数据的更新化。</p><p>​6.本项目最大的功能是将学生与企业进行了合理化的联系，管理员（教师）用户通过学生的就业信息可以看到企业信息，通过企业信息可以看到在其公司就业的学生信息，这样可以使教师更好的为两方进行服务，将教师手头的资源进行了整理与结合，更好的方便为学生提供就业服务，为企业提供人才输入。</p><p>​高校实习就业信息化管理系统的数据库功能模块结构设计如图所示。</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212151020350.png" alt="image-20241212151020350"></p><h2 id="五、数据库系统设计—概念设计"><a href="#五、数据库系统设计—概念设计" class="headerlink" title="五、数据库系统设计—概念设计"></a>五、数据库系统设计—概念设计</h2><h3 id="5-1-概念结构设计"><a href="#5-1-概念结构设计" class="headerlink" title="5.1 概念结构设计"></a>5.1 概念结构设计</h3><p>​概念结构设计是数据库设计的关键阶段之一。它的定义可以概括为：通过对用户需求进行综合、归纳与抽象，将现实世界中的客观事物及其相互联系转化为一种独立于具体数据库管理系统的概念模型的过程。</p><p>​概念结构设计具体来说就是运用各种概念数据模型的表示方法，如 E-R 图（实体-联系图）等[1]，来描述数据库所需要表示和存储的信息结构，包括实体、实体的属性以及实体之间的关系。这个阶段主要关注的是对业务领域的理解和建模，而不涉及具体的数据库实现细节，如数据类型、存储方式等。它为后续的逻辑结构设计提供了清晰的蓝图和指导，确保数据库能够准确、有效地反映业务需求和数据关系[2]。</p><h3 id="5-2-概念结构的特点和设计图"><a href="#5-2-概念结构的特点和设计图" class="headerlink" title="5.2 概念结构的特点和设计图"></a>5.2 概念结构的特点和设计图</h3><p>​概念结构具有抽象性，综合性，稳定性和可理解性四大特性。常见的概念结构设计方法有自顶向下，自底向上，逐步扩张和混合策略等。本系统的概念模型设计图如所示。</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212151114812.png" alt="image-20241212151114812"></p><h3 id="5-3-系统的E-R图"><a href="#5-3-系统的E-R图" class="headerlink" title="5.3 系统的E-R图"></a>5.3 系统的E-R图</h3><h4 id="5-3-1-实体—联系方法-Entity-Relationship"><a href="#5-3-1-实体—联系方法-Entity-Relationship" class="headerlink" title="5.3.1 实体—联系方法(Entity-Relationship)"></a>5.3.1 实体—联系方法(Entity-Relationship)</h4><p>根据实际需求得出，各实体之间的联系如下：</p><ol><li><p>area与users：一个管理员对应一个用户，一个用户只能是一个管理员。（管理员和用户是一对一关系）</p></li><li><p>industy（行业类别表）与firm_info（企业基本信息表）：一个企业基本信息对应一个行业类别，一个行业类别可以对应多个企业基本信息，但每个企业基本信息只能对应一个行业类别。</p></li><li><p>school（学校表）与year（年级表）：一个学校可以有多个年级，但每个年级只属于一个学校。（5）每个教师可讲授多门课程，一门课程可有多个教师讲授（教师课程之间是多对多联系）。</p></li></ol><h4 id="5-3-2-E-R图设计"><a href="#5-3-2-E-R图设计" class="headerlink" title="5.3.2 E-R图设计"></a>5.3.2 E-R图设计</h4><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212151236787.png" alt="image-20241212151236787"></p><h2 id="六、数据库系统设计—逻辑结构设计"><a href="#六、数据库系统设计—逻辑结构设计" class="headerlink" title="六、数据库系统设计—逻辑结构设计"></a>六、数据库系统设计—逻辑结构设计</h2><h3 id="6-1-关系数据库的基本概念"><a href="#6-1-关系数据库的基本概念" class="headerlink" title="6.1 关系数据库的基本概念"></a>6.1 关系数据库的基本概念</h3><p>​由实体间的联系导出关系模型，关系模型在关系数据库中即为一个二维表。</p><ol><li>记录：二维表中的一行，表示一个实体。</li><li>字段：二维表的列，表示实体的属性、特征。</li><li>主键：列或列的组合，能唯一地标识一行。表中只有一个主键，主键不允许NULL或重复。</li><li>外键：表中某一字段与另一表中的主键相对应，则该字段称为表的外键。</li></ol><ul><li><p>外键表示了两个表之间的联系。</p></li><li><p>主键所在的表称为主表，外键所在的表为从表。</p><p>关系模型即二维表，要满足数据完整性的要求。</p></li><li><p>数据完整性：指数据的正确性和可靠性。</p></li><li><p>实体完整性：保证表中所有行具有唯一性。</p></li><li><p>域完整性：保证给定字段的数据有效性。</p></li><li><p>参照完整性：也称引用完整性，确保相关联的表之间数据的一致性。</p></li><li><p>用户自定义完整性：用户根据实际系统要求，定义的约束条件，涉及到的数据必须满足语义要求。</p></li></ul><h3 id="6-2-E-R图向关系模型转换的原则"><a href="#6-2-E-R图向关系模型转换的原则" class="headerlink" title="6.2 E-R图向关系模型转换的原则"></a>6.2 E-R图向关系模型转换的原则</h3><ol><li>如果两个关系是1:1的联系，可以在两个实体类型转换成的两个关系模式中任意一个关系模式中加入另一个关系模式的码和联系类型的属性[3]。 </li><li>如果两个关系是1:m的联系，则在n端实体类型转换成的关系模式中加入1端实体类型的码和联系类型的属性。</li><li>如果两个关系是m:n的联系，则将联系类型也转换成关系模式，其属性为两端实体类型的码加上联系类型的属性，而码为两端实体码的组合。</li></ol><h3 id="6-3-关系模式"><a href="#6-3-关系模式" class="headerlink" title="6.3 关系模式"></a>6.3 关系模式</h3><ol><li><p>地区（地区编号，地区编码，地区名称，地区级别，城市编码，城市中心点，地区父节点）</p></li><li><p>班级（班级编号，班级名称，专业编号，年级编号）</p></li><li><p>企业基本信息（企业基本信息编号，用户编号，企业名称，地址编号，详细地址，简介，电话，邮箱，传真，法人，行业类别编号，成立时间，企业性质，经营范围，注册资本，经营许可证，子母公司情况，照片，备注，备用字段 1，备用字段 2，备用字段 3，备用字段 4，备用字段 5）</p></li><li><p>企业招聘信息（企业招聘信息编号，企业基本信息编号，岗位编号，地址编号，详细地址，薪资，岗位职责，要求，人数，发布时间，招聘起止时间，到岗时间，联系人，电话，邮箱，备注，工伤保险，生育保险，养老保险，医疗保险，失业保险，住房公积金，双休，年终奖，餐补，住宿补贴，交通补贴）</p></li><li><p>企业招聘信息审核（审核编号，企业招聘信息编号，企业基本信息编号，岗位编号，地址编号，详细地址，薪资，岗位职责，要求，人数，发布时间，招聘起止时间，到岗时间，联系人，电话，邮箱，备注，工伤保险，生育保险，养老保险，医疗保险，失业保险，住房公积金，双休，年终奖，餐补，住宿补贴，交通补贴，审核状态）</p></li><li><p>企业上传（企业上传编号，企业基本信息编号，企业招聘信息编号，校企对接活动编号，上传时间，内容，文件类型）</p></li><li><p>行业类别（行业类别编号，级别，行业名称，行业父节点）</p></li><li><p>专业（专业编号，系部编号，专业名称）</p></li><li><p>权限（权限编号，角色编号，权限名称）</p></li><li><p>岗位（岗位编号，级别，岗位名称，岗位父节点）</p></li><li><p>角色（角色编号，角色名称）</p></li><li><p>学校（学校编号，学校名称）</p></li><li><p>校企对接活动（校企对接活动编号，班级编号，企业信息编号，时间，内容，对接人，对接人电话）</p></li><li><p>学生生源类别（学生生源类别编号，生源类别名）</p></li><li><p>学生评价（学生评价编号，学生基本信息编号，时间，内容，评价人编号）</p></li><li><p>学生基本信息（学生基本信息编号，用户编号，班级编号，年级编号，学生生源类别编号，姓名，学号，性别，身份证号码，电话，生源地区编号，住址地区编号，详细地址，照片路径，入学时间，学生表现评分，备注）</p></li><li><p>学生基本信息审核（审核编号，学生基本信息编号，班级编号，年级编号，学生生源类别编号，姓名，学号，性别，身份证号码，电话，生源地区编号，住址地区编号，详细地址，照片路径，入学时间，学生表现评分，备注，审核状态，学生状态编号）</p></li><li><p>学生就业（学生就业编号，学生基本信息编号，企业基本信息编号，就业方式，入职时间，离职时间）</p></li><li><p>学生就业更改（学生就业更改编号，学生就业编号，时间，工资，岗位编号，职位，工伤保险，生育保险，养老保险，医疗保险，失业保险，住房公积金，双休，年终奖，餐补，住宿补贴，交通补贴）</p></li><li><p>学生就业审核（审核编号，学生就业更改编号，企业基本信息编号，就业方式，入职时间，离职时间，时间，工资，岗位编号，职位，工伤保险，生育保险，养老保险，医疗保险，失业保险，住房公积金，双休，年终奖，餐补，住宿补贴，交通补贴，审核状态）</p></li><li><p>学生奖惩（学生奖惩编号，学生基本信息编号，时间，名称，内容，类型，备注）</p></li><li><p>学生成绩（学生成绩编号，学生基本信息编号，时间，成绩）</p></li><li><p>学生状态（学生状态编号，状态名称）</p></li><li><p>学生状态更改（学生状态更改编号，学生基本信息编号，时间，状态编号，备注）</p></li><li><p>教师（教师编号，用户编号，姓名，工号，性别，身份证号码，备用 1，备用 2，备用 3，备用 4，备用 5）</p></li><li><p>用户（用户编号，角色编号，用户名，密码，状态，创建时间）</p></li><li><p>年级（年级编号，年级名称）</p></li></ol><h4 id="6-3-1-将联系转换成关系模式"><a href="#6-3-1-将联系转换成关系模式" class="headerlink" title="6.3.1 将联系转换成关系模式"></a>6.3.1 将联系转换成关系模式</h4><ol><li><p>地区关联（地区编号，城市编码）</p></li><li><p>班级关联（班级编号，专业编号，年级编号）</p></li><li><p>企业基本信息关联（企业基本信息编号，行业类别编号）</p></li><li><p>企业招聘信息关联（企业招聘信息编号，岗位编号，地址编号）</p></li><li><p>企业上传关联（企业上传编号，企业招聘信息编号，校企对接活动编号）</p></li><li><p>学生基本信息关联（学生基本信息编号，班级编号，年级编号，学生生源类别编号）</p></li><li><p>学生就业关联（学生就业编号，学生基本信息编号，企业基本信息编号）</p></li><li><p>学生就业更改关联（学生就业更改编号，学生就业编号）</p></li></ol><h4 id="6-3-2-对关系模式进行规范化"><a href="#6-3-2-对关系模式进行规范化" class="headerlink" title="6.3.2 对关系模式进行规范化"></a>6.3.2 对关系模式进行规范化</h4><p>​关系模式进行规范化的过程主要包含确定函数依赖，消除部分函数依赖和确保达到第三范式[4]。通过上述几个过程得到：</p><ol><li><p>地区编号（地区编码，地区名称，地区级别，城市编码，城市中心点，地区父节点）</p></li><li><p>班级编号（班级名称，专业编号，年级编号）</p></li><li><p>企业基本信息编号（用户编号，企业名称，地址编号，详细地址，简介，电话，邮箱，传真，法人，行业类别编号，成立时间，企业性质，经营范围，注册资本，经营许可证，子母公司情况，照片，备注，备用字段 1，备用字段 2，备用字段 3，备用字段 4，备用字段 5）</p></li><li><p>企业招聘信息编号（企业基本信息编号，岗位编号，地址编号，详细地址，薪资，岗位职责，要求，人数，发布时间，招聘起止时间，到岗时间，联系人，电话，邮箱，备注，工伤保险，生育保险，养老保险，医疗保险，失业保险，住房公积金，双休，年终奖，餐补，住宿补贴，交通补贴）</p></li><li><p>审核编号（企业招聘信息编号，企业基本信息编号，岗位编号，地址编号，详细地址，薪资，岗位职责，要求，人数，发布时间，招聘起止时间，到岗时间，联系人，电话，邮箱，备注，工伤保险，生育保险，养老保险，医疗保险，失业保险，住房公积金，双休，年终奖，餐补，住宿补贴，交通补贴，审核状态）</p></li><li><p>企业上传编号（企业基本信息编号，企业招聘信息编号，校企对接活动编号，上传时间，内容，文件类型）</p></li><li><p>行业类别编号（级别，行业名称，行业父节点）</p></li><li><p>专业编号（系部编号，专业名称）</p></li><li><p>权限编号（角色编号，权限名称）</p></li><li><p>岗位编号（级别，岗位名称，岗位父节点）</p></li><li><p>角色编号（角色名称）</p></li><li><p>学校编号（学校名称）</p></li><li><p>校企对接活动编号（班级编号，企业信息编号，时间，内容，对接人，对接人电话）</p></li><li><p>学生生源类别编号（生源类别名）</p></li><li><p>学生评价编号（学生基本信息编号，时间，内容，评价人编号）</p></li><li><p>学生基本信息编号（用户编号，班级编号，年级编号，学生生源类别编号，姓名，学号，性别，身份证号码，电话，生源地区编号，住址地区编号，详细地址，照片路径，入学时间，学生表现评分，备注）</p></li><li><p>审核编号（学生基本信息编号，班级编号，年级编号，学生生源类别编号，姓名，学号，性别，身份证号码，电话，生源地区编号，住址地区编号，详细地址，照片路径，入学时间，学生表现评分，备注，审核状态，学生状态编号）</p></li><li><p>学生就业编号（学生基本信息编号，企业基本信息编号，就业方式，入职时间，离职时间）</p></li><li><p>学生就业更改编号（学生就业编号，时间，工资，岗位编号，职位，工伤保险，生育保险，养老保险，医疗保险，失业保险，住房公积金，双休，年终奖，餐补，住宿补贴，交通补贴）</p></li><li><p>学生奖惩编号（学生基本信息编号，时间，名称，内容，类型，备注）</p></li><li><p>学生成绩编号（学生基本信息编号，时间，成绩）</p></li><li><p>学生状态编号（状态名称）</p></li><li><p>学生状态更改编号（学生基本信息编号，时间，状态编号，备注）</p></li><li><p>教师编号（用户编号，姓名，工号，性别，身份证号码，备用 1，备用 2，备用 3，备用 4，备用 5）</p></li><li><p>用户编号（角色编号，用户名，密码，状态，创建时间）</p></li><li><p>年级编号（年级名称）</p></li></ol><p>​经过以上规范化处理后，关系模式更加简洁、清晰，并且减少了数据冗余和不一致性。同时，也提高了数据库的性能和可维护性。</p><h2 id="七、数据库系统设计—物理结构设计"><a href="#七、数据库系统设计—物理结构设计" class="headerlink" title="七、数据库系统设计—物理结构设计"></a>七、数据库系统设计—物理结构设计</h2><p>​本项目共计25个表，分别为：area（管理员表）、classes（班级表）、department（系表）、firm_info（企业基本信息表）、firm_recruitment（企业招聘信息表）、firm_upload（企业上传表）、industy（行业类别表）、major（专业表）、permission（权限表）、post（岗位表）、role（角色表）、school（学校表）、school_firm_activity（校企对接活动表）、student_category（学生生源类别表）、student_evaluation（学生评价表）、student_info（学生基本信息表）、student_job（学生就业表）、student_job_change（学生就业更改记录表）、student_reward_punishment（学生奖惩记录表）、student_score学生成绩表、student_status（学生状态表）、student_status_change（学生状态更改记录表）、teacher（教师表）、users（用户表）、year（年级表）。</p><p>​表结构图如图所示，以下用三线表进行表的物理结构设计展示。</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212151905410.png" alt="image-20241212151905410"></p><h3 id="7-1-系统包含表的物理结构设计"><a href="#7-1-系统包含表的物理结构设计" class="headerlink" title="7.1 系统包含表的物理结构设计"></a>7.1 系统包含表的物理结构设计</h3><p>由于本系统涉及表较多，以下物理结构仅选择部分表进行展示，详情请见项目文件。</p><p>1.users表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>Int(11)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>username</td><td>Varchar（255）</td><td>NULL</td><td>用户名</td></tr><tr><td>3</td><td>password</td><td>Varchar（255）</td><td>NULL</td><td>密码</td></tr><tr><td>4</td><td>role_id</td><td>Int(11)</td><td>NULL</td><td>角色id</td></tr><tr><td>5</td><td>status</td><td>Int(11)</td><td>NULL</td><td>状态</td></tr><tr><td>6</td><td>create_time</td><td>date</td><td>NULL</td><td>创建时间</td></tr></tbody></table><p>2.role表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>Int(11)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>role_name</td><td>Varchar（255）</td><td>NULL</td><td>角色名称</td></tr></tbody></table><p>3.permission表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>Int(11)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>permission_name</td><td>Varchar（255）</td><td>NULL</td><td>权限功能</td></tr><tr><td>3</td><td>role_id</td><td>Int(11)</td><td>NULL</td><td>角色id</td></tr></tbody></table><p>4.area表</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>Int(11)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>area_code</td><td>Int(11)</td><td>NULL</td><td>地区编码</td></tr><tr><td>3</td><td>area_name</td><td>Varchar（255）</td><td>NULL</td><td>地区名</td></tr><tr><td>4</td><td>level</td><td>Varchar（255）</td><td>NULL</td><td>地区级别</td></tr><tr><td>5</td><td>citycode</td><td>Varchar（255）</td><td>NULL</td><td>城市编码</td></tr><tr><td>6</td><td>center</td><td>Varchar（255）</td><td>NULL</td><td>城市中心点</td></tr><tr><td>7</td><td>parent_id</td><td>Int(11)</td><td>NULL</td><td>地区父节点</td></tr></tbody></table><p>5.school_firm_activity表</p><p>school_firm_activity表中用来记录学校与企业活动的相关信息。</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>Int(11)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>classes_id</td><td>Varchar（255）</td><td>NULL</td><td>班级id</td></tr><tr><td>3</td><td>firm_info_id</td><td>Int(11)</td><td>NULL</td><td>企业信息id</td></tr><tr><td>4</td><td>time</td><td>date</td><td>NULL</td><td>时间</td></tr><tr><td>5</td><td>content</td><td>Varchar（255）</td><td>NULL</td><td>内容</td></tr><tr><td>6</td><td>docking_people</td><td>Varchar（255）</td><td>NULL</td><td>对接人</td></tr><tr><td>7</td><td>tel</td><td>Varchar（255）</td><td>NULL</td><td>对接人电话</td></tr></tbody></table><p>6.firm_upload</p><p>firm_upload表中用来记录企业上传的信息。</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>Int(11)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>name</td><td>Varchar（255）</td><td>NULL</td><td>班级名称</td></tr><tr><td>3</td><td>major_id</td><td>Int(11)</td><td>NULL</td><td>专业id</td></tr><tr><td>4</td><td>year_id</td><td>Int(11)</td><td>NULL</td><td>年级id</td></tr></tbody></table><p>7.firm_info表</p><p>firm_info表中记录企业基本信息。</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>Id</td><td>Int(11)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>User_id</td><td>Varchar（255）</td><td>NULL</td><td>用户id</td></tr><tr><td>3</td><td>Name</td><td>Varchar（255）</td><td>NULL</td><td>企业名称</td></tr><tr><td>4</td><td>area_id</td><td>Varchar（255）</td><td>NULL</td><td>地址id</td></tr><tr><td>5</td><td>Address</td><td>Varchar（255）</td><td>NULL</td><td>详细地址</td></tr><tr><td>6</td><td>Profile</td><td>Varchar（255）</td><td>NULL</td><td>简介</td></tr><tr><td>7</td><td>tel</td><td>Varchar（255）</td><td>NULL</td><td>电话</td></tr><tr><td>8</td><td>Email</td><td>Varchar（255）</td><td>NULL</td><td>邮箱</td></tr><tr><td>9</td><td>Fax</td><td>Varchar（255）</td><td>NULL</td><td>传真</td></tr><tr><td>10</td><td>Legal_person</td><td>Varchar（255）</td><td>NULL</td><td>法人</td></tr><tr><td>11</td><td>Industy_id</td><td>Int(11)</td><td>NULL</td><td>行业类别id</td></tr><tr><td>12</td><td>Founding_time</td><td>date</td><td>NULL</td><td>成立时间</td></tr><tr><td>13</td><td>Nature</td><td>Varchar（255）</td><td>NULL</td><td>企业性质</td></tr><tr><td>14</td><td>Scope</td><td>Varchar（255）</td><td>NULL</td><td>经营范围</td></tr><tr><td>15</td><td>registered_capital</td><td>Varchar（255）</td><td>NULL</td><td>注册资本</td></tr><tr><td>16</td><td>management_licence</td><td>Varchar（255）</td><td>NULL</td><td>经营许可证</td></tr><tr><td>17</td><td>child_parent</td><td>Varchar（255）</td><td>NULL</td><td>子母公司情况</td></tr><tr><td>18</td><td>photo</td><td>Varchar（255）</td><td>NULL</td><td>照片</td></tr><tr><td>19</td><td>note</td><td>Varchar（255）</td><td>NULL</td><td>备注</td></tr></tbody></table><p>8.firm_recruitment表</p><p>firm_recruitment表中用来记录企业招聘的信息</p><table><thead><tr><th>列序号</th><th>列名</th><th>类型</th><th>取值说明</th><th>列含义</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>Int(11)</td><td>主键&#x2F;NOT NULL</td><td>id</td></tr><tr><td>2</td><td>firm_info_id</td><td>Int(11)</td><td>NULL</td><td>企业基本信息id</td></tr><tr><td>3</td><td>area_id</td><td>Int(11)</td><td>NULL</td><td>地址</td></tr><tr><td>4</td><td>address</td><td>Varchar（255）</td><td>NULL</td><td>详细地址</td></tr><tr><td>5</td><td>salary</td><td>Varchar（255）</td><td>NULL</td><td>薪资</td></tr><tr><td>6</td><td>duty</td><td>Varchar（255）</td><td>NULL</td><td>岗位职责</td></tr><tr><td>7</td><td>requirements</td><td>Varchar（255）</td><td>NULL</td><td>要求</td></tr><tr><td>8</td><td>quantity</td><td>Varchar（255）</td><td>NULL</td><td>要求</td></tr><tr><td>9</td><td>release_time</td><td>date</td><td>NULL</td><td>发布时间</td></tr><tr><td>10</td><td>start_stop_time</td><td>date</td><td>NULL</td><td>招聘起止时间</td></tr><tr><td>11</td><td>arrival_time</td><td>date</td><td>NULL</td><td>到岗时间</td></tr><tr><td>12</td><td>linkman</td><td>Varchar（255）</td><td>NULL</td><td>联系人</td></tr><tr><td>13</td><td>tel</td><td>Varchar（255）</td><td>NULL</td><td>电话</td></tr><tr><td>14</td><td>email</td><td>Varchar（255）</td><td>NULL</td><td>邮箱</td></tr><tr><td>15</td><td>note</td><td>Varchar（255）</td><td>NULL</td><td>备注</td></tr><tr><td>16</td><td>employment_injury_insurance</td><td>Varchar（255）</td><td>NULL</td><td>工伤保险</td></tr><tr><td>17</td><td>maternity_insurance</td><td>Varchar（255）</td><td>NULL</td><td>生育保险</td></tr><tr><td>18</td><td>endowment_insurance</td><td>Varchar（255）</td><td>NULL</td><td>养老保险</td></tr><tr><td>19</td><td>medical_insurance</td><td>Varchar（255）</td><td>NULL</td><td>医疗保险</td></tr><tr><td>20</td><td>unemployed_insurance</td><td>Varchar（255）</td><td>NULL</td><td>失业保险</td></tr><tr><td>21</td><td>housing_provident_fund</td><td>Varchar（255）</td><td>NULL</td><td>住房公积金</td></tr><tr><td>22</td><td>weekends</td><td>Varchar（255）</td><td>NULL</td><td>双休</td></tr><tr><td>23</td><td>annual_bonus</td><td>Varchar（255）</td><td>NULL</td><td>年终奖</td></tr><tr><td>24</td><td>subsidized_meals</td><td>Varchar（255）</td><td>NULL</td><td>餐补</td></tr><tr><td>25</td><td>accommodation_subsidies</td><td>Varchar（255）</td><td>NULL</td><td>住宿补贴</td></tr><tr><td>26</td><td>traffic_subsidies</td><td>Varchar（255）</td><td>NULL</td><td>交通补贴</td></tr></tbody></table><h2 id="八、数据库创建过程"><a href="#八、数据库创建过程" class="headerlink" title="八、数据库创建过程"></a>八、数据库创建过程</h2><h3 id="8-1-代码实现"><a href="#8-1-代码实现" class="headerlink" title="8.1 代码实现"></a>8.1 代码实现</h3><p>由于系统中含有表较多因此以下代码实现仅选取五个表格进行展示：</p><ol><li>users表的创建</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line"> `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line"> `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line"> `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line"> `status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态（0正常，1禁用，2异常，3冻结）&#x27;</span>,</span><br></pre></td></tr></table></figure><ol start="2"><li>area表的创建</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `area` (</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;地区Id&#x27;</span>,</span><br><span class="line"> `areaCode` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地区编码&#x27;</span>,</span><br><span class="line"> `areaName` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地区名&#x27;</span>,</span><br><span class="line"> `level` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">-1</span> COMMENT <span class="string">&#x27;地区级别（1:省份province,2:市city,3:区县district,4:街道street）&#x27;</span>,</span><br><span class="line"> `cityCode` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;城市编码&#x27;</span>,</span><br><span class="line"> `center` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;城市中心点（即：经纬度坐标）&#x27;</span>,</span><br><span class="line"> `parentId` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">-1</span> COMMENT <span class="string">&#x27;地区父节点&#x27;</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">3264</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;地区码表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>school_firm_activity表的创建</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `school_firm_activity`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;校企对接活动id&#x27;</span>,</span><br><span class="line">  `classes_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级id（可能有多个）&#x27;</span>,</span><br><span class="line">  `firm_info_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;企业信息id（可能有多个）&#x27;</span>,</span><br><span class="line">  `<span class="type">time</span>` <span class="type">date</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;时间&#x27;</span>,</span><br><span class="line">  `content` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `docking_people` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;对接人&#x27;</span>,</span><br><span class="line">  `tel` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;对接人电话&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;校企对接活动表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>firm_upload表的创建</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `firm_upload`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;企业上传id&#x27;</span>,</span><br><span class="line">  `firm_info_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;企业基本信息id&#x27;</span>,</span><br><span class="line">  `firm_recruitment_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;企业招聘信息id&#x27;</span>,</span><br><span class="line">  `school_firm_activity_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;校企对接活动id&#x27;</span>,</span><br><span class="line">  `<span class="type">time</span>` <span class="type">date</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;上传时间&#x27;</span>,</span><br><span class="line">  `content` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `file_type` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件类型&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">2</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;企业上传表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>firm_info表的创建</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `firm_info`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;企业基本信息id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;企业名称&#x27;</span>,</span><br><span class="line">  `area_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址id&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;详细地址&#x27;</span>,</span><br><span class="line">  `profile` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;简介&#x27;</span>,</span><br><span class="line">  `tel` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;电话&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `fax` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;传真&#x27;</span>,</span><br><span class="line">  `legal_person` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;法人&#x27;</span>,</span><br><span class="line">  `industry_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;行业类别id&#x27;</span>,</span><br><span class="line">  `founding_time` <span class="type">date</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;成立时间&#x27;</span>,</span><br><span class="line">  `nature` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;企业性质&#x27;</span>,</span><br><span class="line">  `<span class="keyword">scope</span>` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;经营范围&#x27;</span>,</span><br><span class="line">  `registered_capital` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;注册资本&#x27;</span>,</span><br><span class="line">  `management_licence` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;经营许可证&#x27;</span>,</span><br><span class="line">  `child_parent` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;子母公司情况&#x27;</span>,</span><br><span class="line">  `photo` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;照片&#x27;</span>,</span><br><span class="line">  `note` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  `other_a` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备用字段1&#x27;</span>,</span><br><span class="line">  `other_b` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备用字段2&#x27;</span>,</span><br><span class="line">  `other_c` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备用字段3&#x27;</span>,</span><br><span class="line">  `other_d` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备用字段4&#x27;</span>,</span><br><span class="line">  `other_e` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备用字段5&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">6</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;企业基本信息表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><h3 id="8-2-项目运行截图"><a href="#8-2-项目运行截图" class="headerlink" title="8.2 项目运行截图"></a>8.2 项目运行截图</h3><p>1.登录</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153126564.png" alt="image-20241212153126564"></p><p>2.管理员</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153137023.png" alt="image-20241212153137023"></p><p>3.首页展示</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153144075.png" alt="image-20241212153144075"></p><p>4.信息审核展示（仅以学生为例）</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153155781.png" alt="image-20241212153155781"></p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153159650.png" alt="image-20241212153159650"></p><p>5.企业功能展示（仅以企业列表和修改企业基本信息为例）</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153224271.png" alt="image-20241212153224271"></p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153228128.png" alt="image-20241212153228128"></p><p>6.学生功能展示</p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153235548.png" alt="image-20241212153235548"></p><p><img src="/../images/postsImg/%E9%AB%98%E6%A0%A1%E5%AE%9E%E4%B9%A0%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20241212153238919.png" alt="image-20241212153238919"></p><h2 id="九、存储过程和触发器设计"><a href="#九、存储过程和触发器设计" class="headerlink" title="九、存储过程和触发器设计"></a>九、存储过程和触发器设计</h2><p>1.存储过程</p><p>insert_year: 用于向 year 表中插入数据。</p><p>update_student_info: 用于更新学生基本信息。</p><p>delete_student_info: 用于删除学生基本信息。</p><p>2.所用到的触发器</p><p>before_insert_student_info: 在插入学生基本信息之前执行的触发器，用于检查数据的完整性。</p><p>after_insert_student_info: 在插入学生基本信息之后执行的触发器，用于记录插入操作的日志。</p><p>before_update_student_info: 在更新学生基本信息之前执行的触发器，用于检查数据的完整性。</p><p>after_update_student_info: 在更新学生基本信息之后执行的触发器，用于记录更新操作的日志。</p><p>before_delete_student_info: 在删除学生基本信息之前执行的触发器，用于检查数据的完整性。</p><p>after_delete_student_info: 在删除学生基本信息之后执行的触发器，用于记录删除操作的日志。</p><h2 id="十、测试和维护"><a href="#十、测试和维护" class="headerlink" title="十、测试和维护"></a>十、测试和维护</h2><p>​我们将系统投入到学校里进行测试使用，在全系师生通力配合和系统组成员的共同努力下，通过向学校要取了学生的基本信息进行数据库的基本建设，让学生通过身份证号跟固定密码进行登录，完善自己的基本信息[5]；也通过联系十几名毕业生，进行登录完善其基本信息和就业信息；通过老师手头上企业的资源对企业的数据库进行建立，通过企查查将企业基本信息进行查询输入，通过老师让企业进行登录完善信息，并发布一些招聘信息[6]。通过以上工作完善我们项目的数据库资料。</p><p>​多方的数据输入，对系统的要求很高：大量学生的登录可能造成登录不上去的问题，也有可能造成数据的混乱，对系统的稳定性、可靠性造成了很大的挑战。面对以上的挑战，项目组的成员客服了重重困难，从改善系统的运营环境、数据库的稳定性、 扩展测试功能、细致筹划各项管理功能等方面对管理平台进行部署。我们主动了解学生、管理员老师、高校、企业在使用过程中遇到的问题，及时完善系统并解决问题。经过几轮的压力测试调整，确保各方在使用过程中不出问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​由于数据库是基于MySQL下，在安全性、容量方面完全可以满足需要，在针对每个页面的测试中，无重大的错误，界面操作简便，用户使用步骤清晰，无繁杂[7]。在性能测试方面，本系统的性能比较稳定，在遭遇用户的误操作，以及特殊数据时，能够主动提示，安全性与稳定性都比较高。</p><p>​但是由于编程与设计方面的疏忽和经验不足等诸多原因，在个别模块性能上还差强人意，比如有些功能在误操作以及特殊数据测试时，会产生错误，导致系统关闭等。解决这些问题，需要对系统的菜单功能以及编程的代码进行进一步的优化和改善，通过调整系统菜单的广度和深度，使学生信息和就业信息功能更加的完善[8]。</p><p>​在本论文中，通过详细的需求分析、系统设计与实现，成功打造了一个能够有效整合高校实习与就业相关信息的平台。借助系统的各项功能模块，如实习信息管理、就业岗位发布与匹配、学生状态跟踪等，极大地提高了高校实习就业管理工作的效率和质量。在实践过程中，该系统表现出了良好的稳定性和可扩展性，为高校实习就业管理工作的信息化、规范化和科学化提供了有力的支持[9]。未来，随着技术的不断发展和高校管理需求的变化，可以进一步对系统进行优化和完善[10]。如融入人工智能技术以实现更智能的岗位推荐等，从而更好地服务于高校师生和社会用人单位。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 王珊，萨师煊，数据库系统概论（第5版），高等教育出版社，2014年。</p><p>[2] 郑阿奇主编，MySQL实用教程（第3版），电子工业出版社</p><p>[3] 洪学杭, 戴金波, 方权宇, 王轩宇, 刘骐嘉, 刘梦泉. 基于MySQL数据库的戒烟App的设计与研究[J].电脑编程技巧与维护, 2024, (05): 96-99+153.</p><p>[4] 于述春.SELinux与My SQL数据库的定制安装[J].无线互联科技,2022,21(07):85-87.</p><p>[5] 林菲菲, 吴荣珍. 基于Java的系务管理信息系统的设计与实现[J]. 电脑知识与技术, 2024, 20 (07): 53-56.</p><p>[6] 胡瑚.基于MySQL的科研信息管理系统数据库设计[J].信息与电脑(理论版),2023,36(04):169-171.</p><p>[7] 刘畅,王陈.MySQL数据库课程的教学评价体系设计[J].电子技术,2024,53(01):393-395.</p><p>[8] 魏猛猛. 基于Java EE架构的题库管理系统设计与实现[J]. 电脑编程技巧与维护, 2022, (10): 11-12+27.</p><p>[9] Xiao Z ,Ali Y ,Xin W , et al.Sports Work Strategy of College Counselors Based on MySQL Database Big Data Analysis[J].International Journal of Information Technology and Web Engineering (IJITWE),2023,18(1):1-14.</p><p>[10]   Karthik G ,Debashish M ,Jagoda C , et al.Developing a MySQL Database for the Provenance of Black Tiger Prawns (Penaeus monodon).[J].Foods (Basel, Switzerland),2023,12(14):</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 作业 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树分类算法研究</title>
      <link href="/2024/06/28/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/"/>
      <url>/2024/06/28/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="基于人工智能的决策树分类算法研究"><a href="#基于人工智能的决策树分类算法研究" class="headerlink" title="基于人工智能的决策树分类算法研究"></a><strong>基于人工智能的决策树分类算法研究</strong></h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>​决策树归纳是最简单但最成功的学习算法之一。决策树（DT）由内部和外部节点以及组成节点之间的互连称为树的分支。内部节点是一个决策单元根据不同决定下一个要访问的子节点相关变量的可能值。相比之下，外部节点也称为树叶节点，是分支的终止节点。它没有任何子节点并且是与用来描述给定数据的类标签相关联。决策树是树中的一组规则结构，其中的每个分支都可以被解释为沿着这个分支访问的节点与之相关的决策规则。</p><p>​决策树通过从树根到树叶节点对树进行排序来对实例进行分类。这个树形结构的分类器将数据集的输入空间递归分割互相排斥的空间。按照这种结构，每个训练数据被标识为属于某个子空间，它被分配了一个标签，一个值或一个动作表征其数据点。决策树机制具有良好的透明度我们可以很容易地遵循树状结构来解释如何做出决定。因此，当我们澄清有条件的规则特征时，可解释性就会增强。</p><p>​随机变量的熵通过生成的平均信息量观察它的价值。考虑用硬币掷硬币的随机实验正面的概率等于0.9，因此P（Head）&#x3D; 0.9，P（Tail）&#x3D; 0.1。这可提供比P（Head）&#x3D; 0.5和P（Tail）&#x3D; 0.5的情况更多的信息。</p><p>​熵通常用于评估物理学中的随机性，其中熵值较大表明该过程非常随机。决策树是根据每个属性的信息内容进行启发式指导的。熵作为分类的手段用于评估每个属性的信息。</p><p>​我们也可以说熵是一个样本集合中的杂质度：熵越大，数据越不纯。基于熵，信息增益（IG）通常被用于衡量类间区分的有效性。</p><h2 id="二、决策树分类算法实现"><a href="#二、决策树分类算法实现" class="headerlink" title="二、决策树分类算法实现"></a>二、决策树分类算法实现</h2><h3 id="2-1模型构建"><a href="#2-1模型构建" class="headerlink" title="2.1模型构建"></a>2.1模型构建</h3><ol><li>定义决策树的类。其中包含分类特征，分类界值，第一类，第二类，第一类的熵，第二类的熵。每进行一次分类后，均保存为这样一个数据结构；</li><li>加载鸢尾花数据集。数据集包含5列，前四列分别是分类的特征：“花萼长度”, “花萼宽度”, “花瓣长度”, “花瓣宽度”，最后一列是样本的标签，即该一行的鸢尾花属于什么类别，此处共有3个类别；</li><li>构建决策树。主要是利用递归的思想，先找到第一层的最佳分类点，即找到最佳分类属性与分类值，分割数据集后再继续进行下一层的最佳分类点搜寻，直到划分后的数据不能再划分为止。其中，寻找最佳分类点子过程为，对每一个属性，每一个值当做分类点，计算此时的信息熵与信息增益，找到信息增益最大的分类属性与分类值，再划分数据集，保存构建的决策树类。</li></ol><h3 id="2-2决策树的可视化"><a href="#2-2决策树的可视化" class="headerlink" title="2.2决策树的可视化"></a>2.2决策树的可视化</h3><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002.png" alt="20200717013828866"></p><h3 id="2-3结果分析"><a href="#2-3结果分析" class="headerlink" title="2.3结果分析"></a>2.3结果分析</h3><p>​程序运行结果：输出决策树每一次分类的分类属性以及分类值，每一次分类之后的熵，到不能再分类时该类的类别以及该类别的数量。</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image001.png" alt="img"></p><p>​根据输出结果，画出树状的分类结果图如图3，分类到最后三种类别，分别用三种颜色来表示，（山鸢尾：红色；变色鸢尾：绿色；维吉尼亚鸢尾：蓝色）可以看到，在第一次分类时，即通过花瓣宽度将第一类山鸢尾分出来，后面最多5次分类即可将三种类别全部分割出来。</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002.jpg" alt="20200717014022158"></p><h2 id="三、对比综合实验"><a href="#三、对比综合实验" class="headerlink" title="三、对比综合实验"></a>三、对比综合实验</h2><p>​为了更好地对比实验，选用经典二分类问题，即选择scikit-learn中breast_cancer（乳腺癌）数据集进行实验分析。</p><p>​数据描述：该分类数据集包含569条数据，30个属性，均为连续属性，目标是对该数据集进行二分类问题，即判断属于’malignant’（恶性）, ‘benign’（良性）中的哪一类。</p><p>​本程序将569份数据按照7:3比例进行划分，其中400份数据作为训练集，169份数据作为测试集。</p><h3 id="3-1决策树深度对模型精度影响"><a href="#3-1决策树深度对模型精度影响" class="headerlink" title="3.1决策树深度对模型精度影响"></a>3.1决策树深度对模型精度影响</h3><p>​为了探索决策树的大小和模型准确率之间的影响和联系，方便起见，调用sklearn中的决策树分类工具包(DecisionTreeClassifier)，设置决策树最深深度这一参数(max_depth)分别为4,5,6,7,8进行实验，在训练集上(400份数据)训练，在测试集(169份数据)进行测试。同时记录训练模型所用的时间，输出最终生成树的大小，输出模型的准确率，并且输出分类模型的评价(包含precision, recall, f1-score, support)，输出模型的混淆矩阵。</p><p>​在测试完上述四个参数后，汇总结果，输出决策树的平均耗时，并且输出最优决策树模型(以准确率作为评判标准)，最大深度，以及相应的准确率，最终，得到结果如下图所示：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-17337956989511.jpg" alt="img"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-17337957102882.jpg" alt="img"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-17337957156553.jpg" alt="img"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image001-17337957208024.png" alt="4"></p><p>​由以上输出结果表明，决策树最大深度为6时，准确率为0.905，此时，训练决策树共耗时0.006s，决策树叶子结点为15，相应的f1-score等评价指标也较高，此时模型结果达到最优。</p><p>​由于本数据集数据量较小，训练较快，训练的耗时均比较小，没有比较的意义；另外，随着最深深度的增加，模型的叶子结点数量也在增加，决策树变得更加庞大和细致，但是，在测试集上的表现并没有随着决策树增大而效果变好，可能是出现了对训练集过拟合的情况，因此，在选择决策树最深深度时，需要根据实际情况，选择适当的深度。</p><h3 id="3-2决策树特征选择标准对模型精度影响"><a href="#3-2决策树特征选择标准对模型精度影响" class="headerlink" title="3.2决策树特征选择标准对模型精度影响"></a>3.2决策树特征选择标准对模型精度影响</h3><p>​同上述探究决策树大小对模型精度影响的研究方法，对参数特征选择标准criterion进行设置，可以使用”gini”或者”entropy”，前者代表基尼系数，后者代表信息增益。默认使用的是基尼系数”gini”，即CART算法，但最基础的决策树分类算法是基于ID3, C4.5的最优特征选择方法，无论哪种方式是都可以适用于本数据集类型的连续变量。进行选择后，输出结果如下：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-17337957499985.jpg" alt="img"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image001-17337957546506.png" alt="6"></p><p>​通过分析，选择信息增益为特征选择标准，在小数据集上效果较好，而大数据集上，虽然在对训练样本集的学习中可以尽可能多地挖掘信息，但其生成的决策树分支较大，规模较大，为了简化决策树的规模，提高生成决策树的效率，就出现了根据GINI系数来选择测试属性的决策树算法CART。由于本数据集数据量不大，仅有400个作为训练样本，因此相对来说，选用信息增益为特征选择标准对模型表现结果较好。</p><h3 id="3-3决策树叶子结点最小样本数对模型精度的影响"><a href="#3-3决策树叶子结点最小样本数对模型精度的影响" class="headerlink" title="3.3决策树叶子结点最小样本数对模型精度的影响"></a>3.3决策树叶子结点最小样本数对模型精度的影响</h3><p>​探究决策树叶子结点最小样本数对模型精度影响，本质上是在探究“剪枝”策略对决策树的影响，沿用上述两种对比试验的研究方法，对参数特征叶子结点最小样本数min_samples_leaf进行设置，在这里设置参数分别为1,2,3,4,5，输出结果如下：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-17337957861017.jpg" alt="img"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-17337957902068.jpg" alt="img"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-17337957949709.jpg" alt="img"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-173379579845210.png" alt="11"></p><p>​由以上输出结果表明，决策树叶子结点最小样本数为3时，准确率为0.905，此时，训练决策树共耗时0.005s，决策树叶子结点为14，相应的f1-score等评价指标也较高，此时模型结果达到最优。</p><p>​由实验结果可知，决策树叶子结点最小样本数越大，一般情况下决策树分支会减小，决策树整体变小，有一定的抵抗对训练数据过拟合的能力，但随着叶子结点最小样本数大到一定程度，模型的准确性又会难以保证，本次实验得到当叶子结点最小样本数为3的时候，模型准确度最高，因此，在选择决策树叶子结点最小样本数时，需要根据实际情况，选择适当的值，即通过“剪枝”的思想，控制决策树的大小，提升模型对于测试集的精度。</p><h3 id="3-4最优决策树相关分析"><a href="#3-4最优决策树相关分析" class="headerlink" title="3.4最优决策树相关分析"></a>3.4最优决策树相关分析</h3><p>​通过上述的各个参数的调整与研究，总结测试，得出结论，在本项目中，选用决策树的参数为criterion&#x3D;‘entropy’,max_depth&#x3D;15,min_samples_leaf&#x3D;3，输出结果如下：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image001-173379582952011.png" alt="img"></p><p>​由以上输出结果表明，此时模型的准确率达到0.935达到最高，此时，训练决策树共耗时0.0132s，决策树深度为5，叶子结点为12，相应的f1-score等评价指标也较高，此时模型结果达到最优。</p><p>​接下来，调用graphviz和pydotplus工具包，设置好参数路径，可视化决策树：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-173379584403812.jpg" alt="img"></p><p>​蓝色代表分类为正常’benign’，橙色代表分类为患病’malignant’，颜色越深表示此类样本中只含有这一类，越浅表示分类界限不明确。综上，决策树可以较好地完成该二分类问题。</p><p>​接下来，为了观察决策树的分类效果，根据决策树的分类过程对采用的30个特征做重要度排序：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image002-173379586509713.jpg" alt="img"></p><p>​可以看到’worst perimeter’和’wort concave points’这两个特征的重要度最高，以这两个特征分别为横轴和纵轴，绘制样本的散点图，并且根据排序结果进行分类，有以下结果：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image001-173379587735314.png" alt="img"></p><p>​由上图，可以看到黄颜色的样本和紫颜色的样本成功被分为两类，分类界限也比较明显，决策树分类效果比较好。</p><h3 id="3-5贝叶斯网络分类"><a href="#3-5贝叶斯网络分类" class="headerlink" title="3.5贝叶斯网络分类"></a>3.5贝叶斯网络分类</h3><p>​为了对比贝叶斯网络与决策树分类的结果，基于相同的scikit-learn中breast_cancer（乳腺癌）数据集，调用sklearn.naive_bayes中的GaussianNB分类模型进行实验，有以下输出结果：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/clip_image001-173379591777415.png" alt="img"></p><p>​由上述输出结果可以看到准确率达到了0.964，没有参数的调整，效果优于决策树分类的最佳结果0.935。说明在该问题中，样本数量不是很庞大，贝叶斯网络效果更佳，另外，由于人口中不会大量发生癌症，样本的不均衡性，也导致决策树算法的分类性能降低。综上所述，在本项目中适合采用朴素贝叶斯网络进行分类。</p><h3 id="3-6对比综合实验结论"><a href="#3-6对比综合实验结论" class="headerlink" title="3.6对比综合实验结论"></a>3.6对比综合实验结论</h3><p>​与朴素贝叶斯分类相比，决策树学习的优点和缺点。</p><p>​最优决策树的相关分析，贝叶斯网络的分类结果可以看到，针对同样的数据集，两种方法均能够较好地完成该二分类的任务，但是就具体问题而言，贝叶斯网络的效果更好，原因可能是因为数据样本比较少，样本不均衡等原因。通过实验体会和查阅资料，总结：</p><p><strong>决策树的优点：</strong></p><ol><li>决策树易于理解和解释；</li><li>能够同时处理数据型和常规型属性；</li><li>在相对短的时间内能够对大型数据源做出可行且效果良好的结果；</li><li>比较适合处理有缺失属性的样本；</li><li>能够处理不相关的特征；</li></ol><p><strong>决策树的缺点：</strong></p><ol><li>对于那些各类别样本数量不一致的数据，在决策树中，进行属性划分时，不同的判定准则会带来不同的属性选择倾向；</li><li>决策树处理缺失数据时的困难；</li><li>过度拟合问题的出现；</li><li>忽略数据集中属性之间的相关性。</li></ol><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>​通过此次决策树的学习和代码的运行，我掌握了决策树基础算法的逻辑，和如何解析数据使得数据符合决策树算法输入。决策树的算法不需要调整过多的参数，同时算法的可解释性也非常简单直观。但决策树的缺点也同样在此次实验中暴露出来了，当决策属性过多，整个决策树的算法的开销将会膨胀到非常大。同时这样扩展出来的数据集也容易达到过拟合的状态。于是学者之后还研发出来了预剪枝，和后剪枝等技术，以及使用随机森林算法来解决这些相关问题。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 决策树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职业生涯规划书</title>
      <link href="/2024/06/28/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E8%A7%84%E5%88%92%E4%B9%A6/"/>
      <url>/2024/06/28/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E8%A7%84%E5%88%92%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="职业生涯规划书"><a href="#职业生涯规划书" class="headerlink" title="职业生涯规划书"></a>职业生涯规划书</h1><h1 id="筑梦青春，职引未来"><a href="#筑梦青春，职引未来" class="headerlink" title="筑梦青春，职引未来"></a><strong>筑梦青春，职引未来</strong></h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​在这个人才竞争的时代，如果你没有一个明确有效的职业规划，势必会造成对时间对生命的浪费。《礼记·中庸》有句话说的好，“凡事预则立，不预则废”。万事开头难，最好职业规划才能扣好通往成功的第一粒扣子。在大学期间我们已经建立了健全的世界观，价值观，人生观，应该有计划的安排大学生活，在人才济济的大环境中不断提高自己的核心竞争力。</p><h2 id="二、自我认识"><a href="#二、自我认识" class="headerlink" title="二、自我认识"></a>二、自我认识</h2><h3 id="（一）个人特质"><a href="#（一）个人特质" class="headerlink" title="（一）个人特质"></a>（一）个人特质</h3><p>​在大学生活中，成为有用之才是我坚定不移的追求目标。为了能够制定出更契合自身的职业规划，我极为重视从自我性格方面展开深入且全面的剖析，以挖掘自身特质。在工作场景中，我通常展现出开朗和热情的一面，并且十分善于与他人进行有效的交流沟通，还乐于虚心接受别人给予的意见和建议。</p><p>​我充分地认识到，倾听他人的表达以及和他人保持良好沟通是至关重要的。基于我自己的性格而言，我觉得自己非常适合参与团队工作，与大家携手奋进。在日常的交流过程中，我始终秉持真实、关怀他人以及利他主义这些关键理念。但是不得不承认的是，我整体的个性较为感性，有时会让我容易陷入多愁善感的状态，进而在面对一些事情时会犹豫不决。虽然有时候会优柔寡断，但在生活里我常常拥有一双善于发现美的眼睛，能够敏锐地捕捉到生活中那些细小的美好之处并进行详细记录。我还特别喜欢观赏优秀的电影设计作品等，通过电影等艺术作品，我逐渐形成了独属于自己的灵感库。这些灵感对于我之后从事设计工作将会带来十分巨大的益处，它会成为我宝贵的财富。</p><h3 id="（二）职业价值观"><a href="#（二）职业价值观" class="headerlink" title="（二）职业价值观"></a>（二）职业价值观</h3><p>​在工作中，我深切地觉得协调与美乃是最为关键的要点。我们必须始终坚持运用辩证的思维和方法去处理各种问题。尤其是在从事设计类工作时，更应严格遵循这一理念。要将自身的设计理念以及工作室所提出的设计要求，与整个社会的大环境紧密地联系起来，不能脱离实际。只有这样，才能创作出真正为社会大众所接纳和欢迎的设计作品，从而实现个人与社会之间的互惠互利。与此同时，当面对职业发展时，我们也要着重关注积极向上的那一面。要通过积极的心态和信念来激励自己不断前进，不断努力去创造出更具价值的成果，让自己的人生价值得以更好地体现和提升，为自己的职业生涯书写出更加辉煌的篇章。</p><h3 id="（三）胜任能力"><a href="#（三）胜任能力" class="headerlink" title="（三）胜任能力"></a>（三）胜任能力</h3><p>​在生活工作我有很强的的上进心，能全神贯注的完成计划。有一定的团队合作能力和组织策划能力，善于发现问题，可以客观的分析和处理面对的问题，把大问题拆解成一个个小问题并逐个击破。我性格活泼开朗，能够很快的融入新的工作环境，并在新环境中继续历练自己。从不害怕挫折，因为坎坷是人不断进步的最佳动力，在实践中努力成为国家所需要的人才。</p><h2 id="三．职业环境分析"><a href="#三．职业环境分析" class="headerlink" title="三．职业环境分析"></a>三．职业环境分析</h2><h3 id="（一）家庭环境分析"><a href="#（一）家庭环境分析" class="headerlink" title="（一）家庭环境分析"></a>（一）家庭环境分析</h3><p>​我的家庭环境充满着团结与和谐，在这样温馨的氛围中，我拥有了许多宝贵的机会。它让我能够更加自由地去观看这个丰富多彩的世界，去探索、去发现那些未知的美好，为我的成长和认知提供了坚实的基础和无尽的可能。</p><h3 id="（二）学校环境分析"><a href="#（二）学校环境分析" class="headerlink" title="（二）学校环境分析"></a>（二）学校环境分析</h3><p>​我们的学校静静地坐落在广袤的齐鲁大地之上，深深受到齐鲁文化那深厚底蕴的熏陶。在这里，有着令人称赞的良好校风，教师们秉持着优良的教风，学生们展现出积极的学风，整个校园弥漫着极为浓厚的文化氛围。这种氛围就像是温暖的阳光，轻柔地包裹着我们，为我们的生活和学习打造了一个无比优良的环境。它让我们能安心地生活其中，尽情地汲取知识的养分，在成长的道路上稳步前行，不断追逐着自己的梦想和目标。</p><h3 id="（三）社会环境分析"><a href="#（三）社会环境分析" class="headerlink" title="（三）社会环境分析"></a>（三）社会环境分析</h3><p>​当前，在重视人才环境形成的同时，重视人才质量的环境也日趋形成。如今大学生的数量在逐渐增多，市场对大学生的需求量也渐渐趋于饱和状态。在这样的情况下，若想要顺利实现自己的职业规划，就必须要仔细地去选择好自己在社会中所应处的准确位置，明确自身的方向，然后坚持不懈地朝着这个方向努力奋进，不断提升自己的能力和素质，以更好地适应社会的发展和需求，从而在激烈的竞争中脱颖而出。</p><h3 id="（四）职业环境分析"><a href="#（四）职业环境分析" class="headerlink" title="（四）职业环境分析"></a>（四）职业环境分析</h3><p>​随着互联网的迅猛发展，使得移动产品设计人员紧缺。虽然整体需求较大但由于大多聚集在大城市因此竞争也大，且由于UI设计师的高要求以及高薪资，越来越多的设计和计算机类的工作人员转行，使得UI设计门槛不断升高。因此应该多注重提升自己的专业竞争力，以在千万应聘者中能脱颖而出。</p><h2 id="四、行动目标与计划"><a href="#四、行动目标与计划" class="headerlink" title="四、行动目标与计划"></a>四、行动目标与计划</h2><h3 id="（一）短期目标"><a href="#（一）短期目标" class="headerlink" title="（一）短期目标"></a>（一）短期目标</h3><p>​由于我本身学习计算机专业，因此下大学里应该多多辅修美术方面的基础知识，两边知识均衡提升以达到一个UI设计师应有的水平。在大学期间通过英语六级并争取能够深造学习设计与计算机知识的机会，开拓自己的视野；利用在校平台参与职业相关比赛争取实践锻炼机会为自己积累更多职业经验。</p><h3 id="（二）中期目标"><a href="#（二）中期目标" class="headerlink" title="（二）中期目标"></a>（二）中期目标</h3><p>​多多参与大型项目积累经验，培养自己良好开放的心态，锻炼自己活泼敏捷的思维，建立优秀的审美能力，敏锐的用户体验观察力。职业中期是提升和稳固自己职业技能的中间阶段。可以通过以下几个方面入手保持自己的竞争力：1. 不断学习和掌握新的设计工具和技术。关注行业动态，及时学习新出现的软件和功能，保持自己在工具使用上的先进性。2. 深入研究用户体验和交互设计原理。理解用户的心理和行为模式，以便能设计出更符合用户需求和习惯的界面，提升产品的易用性和吸引力。3. 注重培养自己的审美能力。通过欣赏优秀的设计作品、研究色彩搭配、字体运用等，提高自己的审美水平，使设计作品更具美感和艺术性。掌握较强的平面设计和网页设计能力，可以独立完成大型项目和管理大型设计工作的经验，并找寻积累志同道合的伙伴。</p><h3 id="（三）长期目标"><a href="#（三）长期目标" class="headerlink" title="（三）长期目标"></a>（三）长期目标</h3><p>​成立自己的UI工作室并找到自己工作室的风格。建立自己的设计作品库，展示多样化的优秀作品，这可以直观地体现自己的设计能力和风格。持续提升自己的创新能力，尝试打破常规，为设计带来新颖的思路和创意，以在众多设计师中脱颖而出。能稳定的产出符合客户要求以及社会审美的作品。不断创新交互与设计方式，引领UI设计潮流。</p><h2 id="五、制定计划与策略"><a href="#五、制定计划与策略" class="headerlink" title="五、制定计划与策略"></a>五、制定计划与策略</h2><ol><li>学习和培养技能：作为计算机专业的学生，在专业课中已经掌握了编程、软件开发等技术相关的基础知识。为了转向UI设计师的角色，需要学习UI设计的基础知识和技能，包括色彩理论、用户体验设计、界面设计原则等。可以通过在线课程、教程或者专业的设计学习平台如Adobe XD、Sketch等来学习和练习。</li><li>构建设计作品集：UI设计师的职业路径通常需要一个优秀的设计作品集来展示自己的设计能力和风格。从简单的练习项目开始，逐步扩展到更复杂的设计任务，确保作品集能够展示你的设计技能和创意。</li><li>寻找实习和项目经验：通过参加设计实习或者自愿为项目设计UI界面来积累实际经验。实习机会不仅能帮助你在实践中应用所学知识，还能建立行业内的联系和经验积累。</li><li>持续学习和发展：UI设计是一个快速发展的领域，持续学习和不断更新技能至关重要。保持对新技术和工具的了解，参加行业会议、研讨会或者在线课程，不断提升自己的设计能力和市场竞争力。</li></ol><h2 id="六、结束语"><a href="#六、结束语" class="headerlink" title="六、结束语"></a>六、结束语</h2><p>​任何职业规划都应该以适合自己为首要原则，本职业生涯发展报告从个人性格，客观环境，兴趣能力三个方向深入分析，确立自己未来十年内的职业发展和定位。计划固然好但如若不实践也终究是纸上谈兵，我们应该拿出勇气付出努力来面对多变的现实。在成功的过程中始终坚持脚踏实地执行，持之以恒实事求是的做好每一步。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 职业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辟雍学府APP</title>
      <link href="/2024/06/28/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/"/>
      <url>/2024/06/28/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/</url>
      
        <content type="html"><![CDATA[<h1 id="辟雍学府APP"><a href="#辟雍学府APP" class="headerlink" title="辟雍学府APP"></a>辟雍学府APP</h1><h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><p>​在当今数字化时代，在线学习的需求日益增长。辟雍是中国古代的一种礼制建筑，是周天子为教育贵族子弟设立的大学。本app以辟雍为名，意在传承发扬优秀的传统文化，将优秀的传统文化深入到现代社会的各个角落中去。</p><p>​当前，在线教育市场呈现出蓬勃发展的态势，用户对于优质在线学习工具的需求持续增长，这使得此类 APP 具有广阔的市场前景。在线学习 APP 能够为用户提供随时随地学习的便利，整合丰富的学习资源，满足不同用户的多样化需求[1]。通过对其设计与实现的研究，有助于提升学习效率和质量，创造更好的学习体验。本文将详细阐述 Android 平台的特性和优势，分析在线学习 APP 的功能需求与架构设计，并探索实现过程中的关键技术和挑战。期望通过此研究，为在线学习领域的发展提供有益的参考和实践指导，推动教育信息化的进一步发展。</p><h3 id="1-1-系统简介"><a href="#1-1-系统简介" class="headerlink" title="1.1 系统简介"></a>1.1 系统简介</h3><p>1.辟雍学府APP的概述</p><p>辟雍学府 APP 是一款专注于传统文化课程的在线学习应用。它以“辟雍”这一古老的教育象征为名，致力于传承和弘扬中华民族优秀传统文化。在辟雍学府 APP 中，用户可以接触到丰富多样的传统文化课程，涵盖诗词歌赋、书法绘画、古典音乐、历史典故、传统礼仪等诸多领域[2]。无论您是对传统文化初感兴趣的新手，还是已有一定研究的爱好者，都能在这里找到适合自己的学习内容。</p><p>2.系统的主要功能和特点</p><p>主要功能包括：</p><ol><li><p>丰富课程库：提供涵盖中国古代文学、书法、古典舞、中医、茶艺等全面的传统文化课程。</p></li><li><p>个性化学习方案：根据用户的兴趣、知识水平和学习目标，定制专属学习计划。为初学者推荐基础入门课程，为进阶者提供深入研究的专题课程。</p></li><li><p>互动交流社区：方便用户与老师、同学交流心得，分享学习成果。用户可以在社区中展示自己的书法作品，与他人相互切磋。</p></li></ol><p>主要特点包括：</p><ol><li><p>沉浸式学习体验：通过高清视频、音频和精美的图文，营造出浓厚的文化氛围。</p></li><li><p>权威师资：授课教师均为传统文化领域的资深专家和学者，保证教学质量。</p></li><li><p>学习进度跟踪：实时记录用户的学习进度和成绩，便于自我监督和改进。</p></li><li><p>移动端便捷学习：支持在手机和平板等设备上使用，随时随地开启学习之旅。无论是在地铁上还是在公园中，都能利用碎片时间学习传统文化知识。</p></li></ol><h3 id="1-2-研究内容"><a href="#1-2-研究内容" class="headerlink" title="1.2 研究内容"></a>1.2 研究内容</h3><p>​首先对在线学习系统进行简要的系统分析，主要从市场调研，目标用户确定，技术可行性分析三方面入手。了解当前在线学习市场中传统文化课程的需求和竞争情况。分析其他类似 APP 的优势和不足，寻找差异化竞争的机会[3]。然后确定系统设计的整体架构，包括前端、后端和数据库的架构，规划系统的模块划分和模块之间的交互方式。</p><p>​最后进行用户界面的设计，要求突出项目的风格特色，整体内容和谐一致。营造具有传统文化氛围的界面风格，采用古典元素和色彩搭配。不仅在色彩搭配上在功能上我设计了简洁明了的导航栏，方便用户快速找到所需的课程和功能，以吸引人的方式展示课程的标题、简介、教师信息和评价等。设计舒适的学习页面，包括视频播放窗口、笔记功能、提问区域等，确保用户在学习过程中有良好的体验。</p><h3 id="1-3-研究背景"><a href="#1-3-研究背景" class="headerlink" title="1.3 研究背景"></a>1.3 研究背景</h3><p>​1.Android应用和发展现状</p><p>​Android 是一种广泛应用于移动设备的操作系统，具有开放性、硬件丰富性、开发便捷性等优势。随着智能手机的普及和移动互联网的发展，Android 应用开发技术也在不断演进。Android应用开发的技术趋势越来越偏向于与人工智能与机器学习，5G，物联网集成，即时应用等新技术结合。</p><p>​2.辟雍学府APP的重要性</p><p>​辟雍学府 APP 作为包含传统文化课程的在线学习系统，肩负着我国优秀传统文化的弘扬与传承。在全球化和现代化的浪潮中，传统文化面临着被遗忘和忽视的风险。辟雍学府 APP 为传统文化的传承和弘扬提供了新的途径，让更多人能够接触、了解和喜爱传统文化。</p><p>​在线学习的形式使得传统文化不再是高高在上或者被封锁的老古董，而是真正融入人民生活中的新流行[4]。辟雍学府 APP使得优秀传统文化的教育资源被普及，无论身处何地，只要有网络，用户都能享受到专业且个性化的课程。</p><h3 id="1-4-研究意义"><a href="#1-4-研究意义" class="headerlink" title="1.4 研究意义"></a>1.4 研究意义</h3><p>​辟雍学府 APP为在线教育领域的学术研究提供了新的案例和数据，丰富了关于传统文化课程在线教学模式的理论体系。有助于深入探讨如何将现代技术与传统文化教育相结合，为相关学术研究提供实践参考。探索了新的教育方式和手段，为传统文化教育的创新发展提供了思路和方法。深入研究有助于更好地传承和弘扬中华优秀传统文化，挖掘传统文化在当代社会的价值和意义，为传统文化在数字时代的传承路径提供有益的探索。</p><p>​对于在线学习这个行业来说，辟雍学府 APP开创了传统文化与在线学习形式结合的先河，可为同行业其他产品的开发和优化提供借鉴。还有助于提升在线学习课程的行业标准，促使其他平台注重课程的专业性、系统性和趣味性。吸引更多用户关注和参与传统文化学习，扩大在线传统文化教育的市场规模。激发市场活力，促进相关产业链的发展，如教材出版、文化活动等。</p><h2 id="二、系统分析"><a href="#二、系统分析" class="headerlink" title="二、系统分析"></a>二、系统分析</h2><h3 id="2-1-业务需求分析"><a href="#2-1-业务需求分析" class="headerlink" title="2.1 业务需求分析"></a>2.1 业务需求分析</h3><ol><li><p>用户注册与登录流程</p><p>用户输入手机号码或邮箱等信息进行注册。</p><p>系统发送验证码进行验证。</p><p>用户设置密码完成注册。</p><p>登录时输入注册信息进行验证。</p></li><li><p>学习流程</p><p>用户进入已选课程页面。</p><p>观看课程视频、阅读学习资料。</p><p>完成课后练习和作业。</p></li><li><p>学习成果评估流程</p><p>用户完成课程学习后参加考试或提交项目作业。</p><p>系统自动判卷或教师人工评阅。</p><p>用户获得学习成绩和评价。</p></li></ol><h3 id="2-2-用户需求分析"><a href="#2-2-用户需求分析" class="headerlink" title="2.2 用户需求分析"></a>2.2 用户需求分析</h3><p>​用户群体划分：学生群体，包含中小学生，大学生。对传统文化有更深入的研究需求，用于学术和个人兴趣发展。希望通过生动有趣的方式学习传统文化，为学校课程提供补充和拓展；上班族对传统文化有兴趣，希望利用碎片化时间提升个人素养，缓解工作压力；退休人员，有较多闲暇时间，追求丰富的精神生活，深入学习传统文化；传统文化爱好者，对某一特定领域的传统文化有浓厚兴趣和较高追求，如诗词、戏曲、武术等。</p><p>​用户需求调研与整理：用户需求主要分为学习需求，体验需求，互动需求和个性化需求。这也提示我要构建一个全面且系统的课程体系，涵盖传统文化的各个方面，如文学、艺术、哲学、历史等，选择课程内容具有权威性和准确性，由专业教师或学者授课。设计简洁清晰，易于操作的界面，流畅稳定的视频播放和下载功能，适应不同网络环境。根据个人兴趣和学习目标，定制个性化的学习计划，接收个性化的课程推荐和学习提醒。</p><h3 id="2-3-非功能性需求分析"><a href="#2-3-非功能性需求分析" class="headerlink" title="2.3 非功能性需求分析"></a>2.3 非功能性需求分析</h3><p>​性能需求：课搜索功能的响应时间不超过 2 秒，提供及时准确的搜索结果。程页面加载时间应在 3 秒以内，确保用户能够快速访问课程内容。</p><p>​安全性需求：系统在长时间运行（如连续运行 7×24 小时）过程中，不应出现崩溃或严重错误。能够稳定处理大量用户同时在线学习的情况，不出现明显的卡顿或延迟。</p><p>​可用性需求：兼容主流的移动操作系统，如 Android 5.0 及以上版本、iOS 10 及以上版本。适配不同屏幕尺寸和分辨率的设备，确保显示效果正常。</p><h2 id="三、系统设计"><a href="#三、系统设计" class="headerlink" title="三、系统设计"></a>三、系统设计</h2><h3 id="3-1-总体架构设计"><a href="#3-1-总体架构设计" class="headerlink" title="3.1 总体架构设计"></a>3.1 总体架构设计</h3><p>1.系统结构图与描述</p><p>​以用户端举例包含三个模块登录注册学习模块和个人中心，其中登录注册模块手机号登陆两种方式。学习模块包括，课程分类，课程详情，视频播放，资料下载和课后习题五个模块。个人中心包括，个人播放记录，设置和个性化设置。</p><p><img src="/../images/postsImg/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/image-20241212155438009.png" alt="image-20241212155438009"></p><p>2.层次结构与模块划分</p><p>​表现层，负责与用户进行直接交互，包括 APP 的界面设计、用户输入输出的处理等。展示课程内容、用户信息、交流互动界面等。业务逻辑层，处理核心业务逻辑，如课程的管理、用户学习进度的跟踪、交流互动的规则等，协调不同模块之间的工作，确保系统的正常运行。数据访问层，与数据库进行交互，实现数据的读取、存储、更新和删除操作，为上层提供数据支持，保证数据的一致性和准确性。</p><p>​用户管理模块包含用户注册与登录，用户个人信息维护。</p><p>​学习模块包括课程学习页面展示，学习进度跟踪与记录，学习资料下载，课后习题联系</p><p>​系统设置模块包括界面背景设置，播放记录和个人信息个性化设置。</p><h3 id="3-2-Tomcat服务器设计"><a href="#3-2-Tomcat服务器设计" class="headerlink" title="3.2 Tomcat服务器设计"></a>3.2 Tomcat服务器设计</h3><p>​Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为比较流行的Web 应用服务器[5]。属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p><p>​本系统采用Apache-Tomcat-9.0.54，作为系统的信息来源。服务器上放置图片、视频和JSON数据等，可以轻量快速的响应系统的数据需求。静态资源服务负责在请求时直接提供服务器上存储的静态文件。这些文件可以包括HTML页面、CSS样式表、JavaScript脚本、图像文件等。通过提供专门的静态资源服务，可以优化网站性能。静态资源通常会被浏览器缓存，减少了对服务器的请求次数，加速了页面加载速度。静态资源通过HTTP协议传输给客户端[6]。这意味着客户端可以通过简单的HTTP请求获取这些资源，而不需要执行任何服务器端代码。</p><h2 id="四、用户界面设计"><a href="#四、用户界面设计" class="headerlink" title="四、用户界面设计"></a>四、用户界面设计</h2><h3 id="4-1-开始页布局设计"><a href="#4-1-开始页布局设计" class="headerlink" title="4.1 开始页布局设计"></a>4.1 开始页布局设计</h3><p><img src="/../images/postsImg/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/image-20241212155636655.png" alt="image-20241212155636655"></p><h3 id="4-2-首页页面布局"><a href="#4-2-首页页面布局" class="headerlink" title="4.2 首页页面布局"></a>4.2 首页页面布局</h3><p>​首页展示布局展示包含：课程主页，课程轮播图，下方导航栏。轮播图可以实时展示热门课程，点击即可进入课程学习，帮助大家实时掌握学习热点，激发学习兴趣。</p><p><img src="/../images/postsImg/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/image-20241212155700792.png" alt="image-20241212155700792"></p><h3 id="4-3-课程详情页面布局"><a href="#4-3-课程详情页面布局" class="headerlink" title="4.3 课程详情页面布局"></a>4.3 课程详情页面布局</h3><p>​课程详情页通过点击首页的课程学习，可以进入对应课程的课程详情页面，在这个页面中，将会清晰地展示出该课程的简介信息，其中涵盖了课程的简介、视频、背景图等关键内容。同时，页面上还会呈现出一个详细的课程视频列表，用户能够一目了然地看到所有相关的视频资源，方便其根据自身需求和兴趣进行有针对性的选择和观看。</p><p><img src="/../images/postsImg/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/image-20241212155728806.png" alt="image-20241212155728806"></p><h3 id="4-4-视频播放页面布局"><a href="#4-4-视频播放页面布局" class="headerlink" title="4.4 视频播放页面布局"></a>4.4 视频播放页面布局</h3><p>​视频播放页面包含：点击课程详情页面的视频列表即可播放视频，其中可以暂停播放切换下一个视频，拉动进度条等功能。</p><p><img src="/../images/postsImg/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/image-20241212155753504.png" alt="image-20241212155753504"></p><h3 id="4-5-习题列表和详情页面布局"><a href="#4-5-习题列表和详情页面布局" class="headerlink" title="4.5 习题列表和详情页面布局"></a>4.5 习题列表和详情页面布局</h3><p>​习题列表页面展示：各个课程相对应的练习题，用户可做练习题巩固课程学习内容，或者选择自己需要的资源进行下载。</p><p><img src="/../images/postsImg/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/image-20241212160005547.png" alt="image-20241212160005547"></p><p><img src="/../images/postsImg/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/image-20241212160016186.png" alt="image-20241212160016186"></p><h3 id="4-6-我的页面和我的详情布局"><a href="#4-6-我的页面和我的详情布局" class="headerlink" title="4.6 我的页面和我的详情布局"></a>4.6 我的页面和我的详情布局</h3><p><img src="/../images/postsImg/%E8%BE%9F%E9%9B%8D%E5%AD%A6%E5%BA%9CAPP/image-20241212160030447.png" alt="image-20241212160030447"></p><h2 id="五、总结与展望"><a href="#五、总结与展望" class="headerlink" title="五、总结与展望"></a>五、总结与展望</h2><h3 id="5-1-成果总结"><a href="#5-1-成果总结" class="headerlink" title="5.1 成果总结"></a>5.1 成果总结</h3><p>1.系统设计的成果与亮点</p><p>主要成果如下：</p><ul><li>功能完善的在线学习平台：提供丰富多样的传统文化课程，满足不同用户的学习需求。系统具备稳定可靠的运行性能，保障用户流畅的学习体验。</li><li>优质的教学资源管理：对课程内容进行精心策划和制作，保证教学质量。实现教学资源的高效存储和更新，确保用户获取最新的知识。</li><li>安全可靠的数据保护：采取严格的安全措施，保护用户的个人信息和学习数据。</li></ul><p>主要亮点如下：</p><ul><li>跨平台使用：支持在多种设备（如手机、平板、电脑）上无缝切换使用，方便用户随时随地学习。</li><li>与传统文化机构合作：引入权威的专家和学者进行授课，提升课程的专业性和可信度。联合博物馆、文化遗址等开展实地教学活动，丰富学习形式。</li></ul><p>2.遇到的挑战与解决方案</p><ul><li><p>配置Tomcat服务器端口冲突</p><p>Tomcat 默认使用的端口（如 8080）与其他正在运行的服务或应用程序所使用的端口发生冲突，导致 Tomcat 无法正常启动。</p><p>解决方法：关闭占用端口的应用程序。</p></li><li><p>Tomcat服务器控制台出现乱码 </p><p>解决方法：修改配置文件的编码格式设置。</p></li><li><p>Tomcat服务器启动时窗口一闪而过 </p><p>解决方法：正确设置 JAVA_HOME ，Tomcat环境变量</p></li></ul><h3 id="5-2-未来展望"><a href="#5-2-未来展望" class="headerlink" title="5.2 未来展望"></a>5.2 未来展望</h3><p>​科技日新月异，作为一款在线学习APP未来可以拓展更多的功能，来帮助用户更好的体验和学习。比如：结合虚拟现实（VR）和增强现实（AR）功能，为用户提供更加沉浸式的学习体验，让用户仿佛置身于古代文化场景中学习礼仪、欣赏古建筑等。作为中华传统文化宣传的重要载体，在未来的发展中倘若能够引入更为丰富多样的语言版本，把高品质的传统文化课程全面推向广阔的国际市场，那么必将能够吸引来自全球范围内那些对中国传统文化抱有浓厚兴趣的学习者前来深入学习。</p><p>​在系统功能方面可以更加优化个性化推荐算法，根据用户的学习行为、兴趣偏好和知识水平，更精准地推荐课程和学习资源。加强社交功能，例如创建学习小组、举办线上文化竞赛等，增加用户之间的互动和竞争，提高学习积极性。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 张得震.基于现代安卓系统的开发、技术创新及市场化发展研究[J].数字技术与应用,2020,38(01):200+202.</p><p>[2] 帅东明,胡平平.基于安卓系统的App开发技术研究[J].电脑知识与技术,2020,16(09):83-84.</p><p>[3] 陈园琼,张晓丽,曾玉波,黄磊.基于Android的校园移动社交平台的分析与设计[J].电脑知识与技术,2020,16(06):49-51.</p><p>[4] 张楠熙.基于Java语言的安卓手机软件开发研究[J].数字技术与应用,2019,37(12):118+120.</p><p>[5] 国才.基于Android的数据库学习系统设计[J].电脑编程技巧与维护,2019(11):69-70+78.</p><p>[6] 胡恒,谢彩云.Android应用开发优化[J].信息与电脑(理论版),2019,31(20):84-85.</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> Java </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN算法解决垃圾分类问题</title>
      <link href="/2024/06/19/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2024/06/19/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="CNN算法解决垃圾分类问题"><a href="#CNN算法解决垃圾分类问题" class="headerlink" title="CNN算法解决垃圾分类问题"></a><strong>CNN算法解决垃圾分类问题</strong></h1><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><h3 id="1-1-研究背景"><a href="#1-1-研究背景" class="headerlink" title="1.1 研究背景"></a>1.1 研究背景</h3><p>​随着人们对环境和可持续发展的重视，未来垃圾分类市场前景广阔。使用卷积神经网络算法解决垃圾分类问题，可以提高分类效率，降低运营成本，具有很大的应用潜力。随着深度学习技术的发展和应用，人工智能在图像识别等领域取得了很大的突破，通过训练神经网络模型可以实现对垃圾图像的自动分类，提高了垃圾处理的效率和准确性。本研究旨在设计和实现一种基于人工智能的垃圾分类系统，通过深度学习算法对垃圾图像进行识别和分类，提高垃圾分类效率和准确性，促进垃圾资源化利用和环保意识。</p><h3 id="1-2-研究现状"><a href="#1-2-研究现状" class="headerlink" title="1.2 研究现状"></a>1.2 研究现状</h3><h4 id="1-2-1-国内研究现状"><a href="#1-2-1-国内研究现状" class="headerlink" title="1.2.1 国内研究现状"></a>1.2.1 国内研究现状</h4><ol><li>中国科学院自动化所开发的“智能垃圾分类机器人”，可以通过图像识别和语音交互完成垃圾分类，并且已经在一些社区进行了试点测试。</li><li>阿里云推出的“智能垃圾处理系统”，通过深度学习算法对垃圾进行识别和分类，可以有效减少人工干预，提高垃圾处理效率。</li><li>上海交通大学、复旦大学等知名高校也积极开展相关研究，探索基于人工智能的垃圾分类技术在实际中的应用。</li></ol><h4 id="1-2-2-国外研究现状"><a href="#1-2-2-国外研究现状" class="headerlink" title="1.2.2 国外研究现状"></a>1.2.2 国外研究现状</h4><ol><li>美国硅谷初创公司ZenRobotics已经研发出了一种利用机器学习算法来对回收垃圾进行自动分选的机器人系统[1]。</li><li>德国公司AMP Robotics则开发了一款基于人工智能的回收垃圾处理系统，包括机器人和摄像头，可以实现24小时不间断的垃圾分类处理。</li><li>英国公司Recycleye已经开发出一种智能垃圾分类系统，利用深度学习和机器视觉技术，可以对回收垃圾进行准确分类。</li></ol><p>​以上仅是部分例子，足以说明基于人工智能的垃圾分类技术在国内外均受到越来越广泛的关注和应用，其发展前景非常广阔。</p><h3 id="1-3-相关技术介绍"><a href="#1-3-相关技术介绍" class="headerlink" title="1.3 相关技术介绍"></a>1.3 相关技术介绍</h3><p>​本次实验涉及到的相关理论知识有：基于深度学习算法进行图像和语音识别技术、不同的深度学习框架和模型，例如TensorFlow、Python等、后端数据库进行交互存储用户信息等相关技术。</p><h3 id="1-4-人员分工"><a href="#1-4-人员分工" class="headerlink" title="1.4 人员分工"></a>1.4 人员分工</h3><p>​本次实验人员有富佳和王艺凡。其中富佳负责数据收集和预处理，模型训练和评估，系统实现和应用，文档编写；王艺凡负责模型选择和优化，识别图片收集，解说视频录制。</p><h2 id="二、实验目的"><a href="#二、实验目的" class="headerlink" title="二、实验目的"></a>二、实验目的</h2><ol><li>本研究旨在设计和实现一种基于人工智能的垃圾分类系统，通过深度学习算法对垃圾图像进行识别和分类，提高垃圾分类效率和准确性，促进垃圾资源化利用和环保意识。</li><li>采用卷积神经网络（CNN）等算法对图片进行特征提取和分类，或者采用RNN、CTC等方法来进行语音信号的处理。掌握数据库和后端等多个方面的知识和技能。</li></ol><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a>三、实验环境</h2><table><thead><tr><th align="center">操作系统</th><th align="center">Windows10</th></tr></thead><tbody><tr><td align="center">电脑配置</td><td align="center">CPU型号：AMD Ryzen 5 4600U with  Radeon Graphics  GPU型号：AMD Radeon(TM) Graphics  内存：16.0 GB</td></tr><tr><td align="center">模型选择</td><td align="center">卷积神经网络模型  使用TensorFlow进行模型搭建</td></tr><tr><td align="center">编程语言</td><td align="center">Python</td></tr></tbody></table><h2 id="四、实验原理"><a href="#四、实验原理" class="headerlink" title="四、实验原理"></a>四、实验原理</h2><h3 id="4-1-问题的选择"><a href="#4-1-问题的选择" class="headerlink" title="4.1 问题的选择"></a>4.1 问题的选择</h3><p>​基于人工智能的垃圾分类研究来源于社会各界对环保问题的关注，传统垃圾分类方式的局限性，深度学习技术的广泛应用以及垃圾分类市场前景的广泛性等多方因素。我们要解决的问题是提高垃圾分类的效率和准确性，保证系统对不同类型垃圾的正确识别。</p><h3 id="4-2-算法的详细介绍"><a href="#4-2-算法的详细介绍" class="headerlink" title="4.2 算法的详细介绍"></a>4.2 算法的详细介绍</h3><p>​使用卷积神经网络来进行特征提取和模型选择来训练我们的机器学习模型。这里，我们可以使用卷积神经网络来进行特征提取，然后将提取的特征传递给分类器进行分类。在基于人工智能的垃圾分类系统设计与实现中，使用卷积神经网络来进行特征提取是一种有效的方式。卷积神经网络具有自动学习特征、参数共享和平移不变性等优点，可以大幅提高垃圾分类系统的精确度。</p><h3 id="4-3-算法优缺点对比"><a href="#4-3-算法优缺点对比" class="headerlink" title="4.3 算法优缺点对比"></a>4.3 算法优缺点对比</h3><p><strong>使用CNN算法的优点有：</strong></p><ol><li>特征学习能力强：CNN能够自动从数据中学习特征，而不需要手动设计特征[2]。这对于垃圾分类来说尤其重要，因为垃圾的外观和材质多种多样，传统算法难以捕捉所有的特征。</li><li>上下文信息处理：CNN能够处理图像等复杂数据类型，并且能够有效地利用像素周围的上下文信息。这对于垃圾分类中的视觉识别非常有利，可以帮助系统更好地理解垃圾的种类和类别。</li><li>适应性强：CNN在处理不同尺寸和形状的输入数据时具有较强的适应能力。这意味着它可以处理不同大小和形状的垃圾图像，而不需要预处理步骤。</li></ol><p><strong>不足之处：</strong></p><ol><li>数据需求量大：CNN需要大量的标记数据来进行训练，尤其是对于复杂的问题和大规模的数据集。如果没有足够的数据进行训练，模型的泛化能力和性能可能会受到影响。</li><li>计算资源消耗高：训练一个复杂的CNN模型通常需要大量的计算资源，包括 GPU 加速等。这对于资源有限的环境可能会成为一个挑战，特别是在移动设备或嵌入式系统中运行时。</li><li>过拟合风险：如果训练数据不充分或者模型复杂度过高，CNN容易出现过拟合的问题，即在训练集上表现良好但在测试集上表现较差。</li></ol><h2 id="五、系统设计"><a href="#五、系统设计" class="headerlink" title="五、系统设计"></a>五、系统设计</h2><h3 id="5-1-数据集的构建"><a href="#5-1-数据集的构建" class="headerlink" title="5.1 数据集的构建"></a>5.1 数据集的构建</h3><p>​为了训练和测试模型，我们需要构建一个垃圾分类数据集。在构建数据集的过程中，我们需要收集大量具有代表性的垃圾图片，并根据不同种类的垃圾进行分类和标记。所以，我从网上搜集了各种类型垃圾的大量图片，也从生活中拍摄了一部分，用于进行系统测试。</p><h4 id="5-1-1-定义垃圾分类类别"><a href="#5-1-1-定义垃圾分类类别" class="headerlink" title="5.1.1 定义垃圾分类类别"></a>5.1.1 定义垃圾分类类别</h4><p>​首先，需要确定该系统需要识别和分类的垃圾种类，如纸张、塑料、金属、玻璃、厨余垃圾等。可回收物主要是包含废旧纸张、塑胶、玻璃、金属和布料五大类，主要是适合回收再利用和资源化再生使用的生活废弃物，废旧纸张：主要是包含旧报纸、刊物、书籍、各种各样包装纸等，不过要注意纸巾和厕所纸因为水溶性太强不可回收。塑胶：各种各样塑料袋、塑料泡沫、塑料包装制品、一次性塑料餐盒餐具、硬塑料、塑胶牙刷、塑料杯子、矿泉水瓶等。玻璃：主要是包含各种各样玻璃瓶、碎玻璃片、镜子、暖瓶等。金属物：主要是包含易拉罐、罐头瓶等。布料：主要是包含废弃衣服裤子、餐桌布、洗脸毛巾、书包、鞋等。</p><h4 id="5-1-2-图像采集"><a href="#5-1-2-图像采集" class="headerlink" title="5.1.2 图像采集"></a>5.1.2 图像采集</h4><p>​从互联网、市场、家庭等多个渠道采集不同类别的垃圾图像，所采集的图像应包括常见和少见的垃圾种类及其不同形态。确定采集对象首先需要明确要采集哪些垃圾类别，通常包括可回收、有害、湿垃圾、干垃圾等类别。</p><p>​1.准备采集设备</p><p>​为了得到高质量的垃圾图片，可以使用专业的相机或手机摄像头等设备进行采集。同时，还需要选取一个合适的采集场景。</p><p>​2.采集并标注垃圾图片</p><p>​在采集过程中，要注意光线和角度的影响，并拍摄多张图片以增加数据的多样性。同时，对每张图片进行标注，即确定该图片所代表的垃圾类别，以便于后续模型训练和测试。</p><p>​3.数据处理与清洗</p><p>​得到的垃圾图片不可避免地会存在一些噪声或者错误标注的情况。因此在进行模型训练前，需要对采集的图片数据进行预处理和清洗。常见的预处理方法包括图像大小调整、归一化等操作，而清洗工作则需要排除掉那些错误标注或损坏的图片数据。</p><p>​4.增量采集和更新</p><p>​垃圾分类图像采集是一个不断迭代和更新的过程。随着模型在使用中不断积累新的经验和知识，也需要不断采集符合当前需求的新数据进行训练和测试。因此，在系统的实际运行中，要定期对垃圾分类图像库进行增量采集和更新。</p><h4 id="5-1-3-图像标注"><a href="#5-1-3-图像标注" class="headerlink" title="5.1.3 图像标注"></a>5.1.3 图像标注</h4><p>​对采集到的垃圾图像进行标注，以便后续训练和测试使用。标注可以使用手动标注或者自动标注两种方法。</p><p>​1.确定垃圾类别</p><p>​首先需要确定要标注的垃圾类别，并将其列出清单。</p><p>​2.了解标注数据格式</p><p>​在进行垃圾分类图像标注前，需要了解标注数据格式和标注规范。常用的标注数据格式有VOC、COCO等[3]，而标注规范则包括标注内容、标注框位置、标注顺序等方面。</p><p>​3.数据准备</p><p>​将采集到的垃圾图片整理到一个文件夹中，并将该文件夹路径记录下来。</p><p>​4.选择标注软件</p><p>​选择合适的垃圾分类图像标注软件或平台，例如LabelImg、CVAT等。打开标注软件，并创建一个新项目，然后将准备好的图片文件夹导入到项目中。</p><p>​5.标注图像</p><p>​在标注软件中选择对应的垃圾类别标签，然后使用矩形框标注工具对图片进行标注。通常需要对每个垃圾物品进行多次不同角度的标注才能保证标注数据的多样性。</p><p>​6.导出标注数据</p><p>​在完成所有图片的标注后，将标注数据导出为CSV、XML等格式[4]，并按照项目要求进行整理和存储。</p><h4 id="5-1-4-数据增强"><a href="#5-1-4-数据增强" class="headerlink" title="5.1.4 数据增强"></a>5.1.4 数据增强</h4><p>​首先需要了解原始数据集的特点、类别分布情况、数据量等信息，以便于确定数据增强的需求和目标。</p><p>​1.选择数据增强算法</p><p>​根据数据集的特点和任务需求，选择合适的数据增强算法。常见的数据增强算法包括随机旋转、随机裁剪、随机缩放、随机反转、颜色扰动等。</p><p>​2.实现数据增强</p><p>​利用图像处理库或深度学习框架提供的数据增强工具，对原始数据进行相应的变换和扰动操作，并保存成新的数据文件。</p><p>​3.合并原始数据和增强数据</p><p>​将原始数据和增强数据进行合并，并重新标注和整理，以便于后续模型训练和测试。</p><h4 id="5-1-5-划分数据集"><a href="#5-1-5-划分数据集" class="headerlink" title="5.1.5 划分数据集"></a>5.1.5 划分数据集</h4><p>​将所得到的数据集划分为训练集、验证集和测试集，以便后续训练和测试使用。</p><p>​1.确定数据集大小</p><p>​首先需要确定已经标注好的数据集的大小，通常用于垃圾分类模型训练和评估的数据集至少要包含数千张图片。</p><p>​2.划分比例</p><p>​根据数据集大小和任务需求，选择合适的训练集、验证集和测试集的划分比例。常见的划分比例为6:2:2或7:2:1[5]。</p><p>​3.随机划分</p><p>​使用随机方式将原始数据集划分成训练集、验证集和测试集，使得每个数据子集内都有不同类别的垃圾，并保持三者数据量的平衡。</p><p>​4.整理数据集</p><p>​对分好的数据集进行整理和存储，包括原始图片文件和相应的标注数据，方便后续处理和模型训练。</p><p>​5.数据集扩增</p><p>​如果数据集较小，可以通过人工或自动方式对数据集进行扩增，以增加数据样本量和多样性，提高模型的泛化性能。</p><h4 id="5-1-6-验证数据集"><a href="#5-1-6-验证数据集" class="headerlink" title="5.1.6 验证数据集"></a>5.1.6 验证数据集</h4><p>​在训练过程中，需要验证模型在验证集上的准确率，以保证模型的有效性。验证数据集的选择应当具有代表性，即应该与真实场景下的垃圾数据相似。例如，在城市环境下，可包含各种日常生活垃圾的图片，如饮料瓶子、塑料袋、纸张等。首先，将训练数据集输入到模型中进行训练；其次，对训练过程中的模型进行优化和调参，并利用验证数据集进行交叉验证以避免过拟合。最后， 对调整好的模型进行测试。</p><p>​通过以上步骤，我们可以构建一个合适大小和质量的垃圾分类数据集，用于基于人工智能的垃圾分类系统的设计与实现。</p><h3 id="5-2-数据集预处理"><a href="#5-2-数据集预处理" class="headerlink" title="5.2 数据集预处理"></a>5.2 数据集预处理</h3><p>​我们还需要对数据集进行预处理，包括图片大小统一化、去除噪声、增加样本数等。数据集采用了中国发布的垃圾分类标准，该标准将人们日常生活中常见的垃圾分为了四大类。其中，将废弃的玻璃、织物、家具以及电器电子产品等适合回收同时可循环利用的废弃物归为可回收垃圾。将剩菜剩饭、果皮果壳、花卉绿植以及其他餐厨垃圾等容易腐烂的废弃物归为厨余垃圾。将废电池、废药品、废灯管等对人们身体健康和自然环境有害而且应当门处理的废弃物归为有害垃圾。除以上三类垃圾之外的废弃物都归为其他垃圾[6]。该数据集是图片数据，分为训练集85%（Train）和测试集15%（Test）。其中O代表Organic（有机垃圾），R代表Recycle（可回收）。</p><p><img src="/../images/postsImg/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/image-20241212145642393.png" alt="image-20241212145642393"></p><h4 id="5-2-1-图像尺寸调整"><a href="#5-2-1-图像尺寸调整" class="headerlink" title="5.2.1 图像尺寸调整"></a>5.2.1 图像尺寸调整</h4><p>​将所有采集到的垃圾图像调整为相同的尺寸，以便后续进行深度学习模型训练，一般情况下，应将所有图像缩放成统一的大小。</p><h4 id="5-2-2-图像增强"><a href="#5-2-2-图像增强" class="headerlink" title="5.2.2 图像增强"></a>5.2.2 图像增强</h4><p>​通过对图像进行裁剪、翻转、旋转等操作，增加训练样本的数量，提高算法的泛化能力，同时还可以去除图像背景或者增强图像对比度，以提高垃圾的区分度。</p><h4 id="5-2-3-数据集平衡"><a href="#5-2-3-数据集平衡" class="headerlink" title="5.2.3 数据集平衡"></a>5.2.3 数据集平衡</h4><p>​如果某些类别的垃圾在数据集中数量不均衡，则可以采用数据均衡方法，使得训练过程中每个类别的样本数量尽量相同。即某些类别的垃圾数量较多，而其他类别的垃圾数量较少。这可能会导致训练出来的模型对数量多的类别更为敏感，从而降低了对数量小的类别的分类准确率。</p><p>​为了解决这个问题，可以采取以下策略：</p><p>​1.数据集扩充</p><p>​针对数量小的类别，通过数据集扩充的方式增加样本数量。例如，可以通过图像增强技术增加垃圾图片的数量，以提高数据集的平衡性和样本覆盖度。</p><p>​2.数据重采样</p><p>​将数量多的类别的样本进行下采样，或者将数量小的类别的样本进行上采样，以达到类别均衡的目的。下采样即删除部分数量多的样本，上采样即复制部分数量少的样本，使得每个类别的样本数量大致相同。</p><p>​3.模型权重调整</p><p>​在模型训练过程中，将数量小的类别的权重赋予更高的值，以提高其分类准确率。这可以通过在损失函数中使用加权的方式来实现。</p><p>​需要注意的是，在进行数据集平衡时需要保持样本的多样性和代表性，避免对分类器的训练造成影响。同时还需要考虑到数据集大小的问题，过大的数据集可能会导致训练时间和计算成本的增加。</p><h2 id="六、实验步骤与内容"><a href="#六、实验步骤与内容" class="headerlink" title="六、实验步骤与内容"></a>六、实验步骤与内容</h2><p>​为了训练和测试模型，我们需要构建一个垃圾分类数据集。在构建数据集的过程中，我们需要收集大量具有代表性的垃圾图片，并根据不同种类的垃圾进行分类和标记。所以，我们从网上搜集了各种类型垃圾的大量图片，也从生活中拍摄了一部分，用于进行系统测试。</p><h3 id="6-1-使用卷积神经网络-CNN-来进行特征提取"><a href="#6-1-使用卷积神经网络-CNN-来进行特征提取" class="headerlink" title="6.1 使用卷积神经网络(CNN)来进行特征提取"></a>6.1 使用卷积神经网络(CNN)来进行特征提取</h3><p>​通过特征提取和模型选择来训练我们的机器学习模型。这里，我们可以使用卷积神经网络(CNN)来进行特征提取，然后将提取到的特征传递给分类器进行分类。在基于人工智能的垃圾分类系统设计与实现中，使用卷积神经网络（CNN）来进行特征提取是一种有效的方式[7]。CNN具有自动学习特征、参数共享和平移不变性等优点，可以大幅提高垃圾分类系统的精确度。</p><p>​1.输入图像</p><p>​将处理过的图像作为输入。</p><p>​2.卷积层</p><p>​通过一系列的卷积核对输入图像进行卷积操作，提取出图像的局部特征，并生成多个特征映射。</p><p>​3.池化层</p><p>​在卷积层之后，加入池化层，对卷积层的输出进行下采样处理，减少参数的数量，同时也可以提高特征的稳定性和可靠性。</p><p>​4.全连接层</p><p>​将池化层的输出连接到全连接层中，实现识别和分类。</p><p>​5.输出层</p><p>​最后通过输出层输出预测结果，确定垃圾实例所属的类别。</p><p>​将CNN输出结果与真实结果进行比较，计算误差并反向传播，更新神经网络的权重和偏置，这样可以使得模型更加准确。</p><h3 id="6-2-分类器进行分类"><a href="#6-2-分类器进行分类" class="headerlink" title="6.2 分类器进行分类"></a>6.2 分类器进行分类</h3><p>​使用分类器对卷积神经网络（CNN）提取出来的特征进行分类是一种常见的方法。分类器可以将输入的特征映射转化为对应的垃圾类别，从而实现对垃圾的分类。</p><h4 id="6-2-1-特征提取"><a href="#6-2-1-特征提取" class="headerlink" title="6.2.1 特征提取"></a>6.2.1 特征提取</h4><p>​基于人工智能的垃圾分类系统需要对垃圾图像进行特征提取，以便进行有效的分类和识别[8]。目前，常用的特征提取方法包括传统的手工设计特征和深度学习中的卷积神经网络（CNN）等模型。</p><p>​传统的手工设计特征通常使用计算机视觉技术对图像进行预处理，提取颜色直方图、灰度直方图、纹理特征和形状特征等来描述垃圾图像的内容和特征。例如，可以通过图像边缘检测、滤波器等方式来提取垃圾图像的轮廓和纹理信息，进而用于分类和识别。但是，这些方法需要手动设计特征提取算法，并且难以适应复杂垃圾场景下的变化和多样性。</p><p>​相比之下，基于深度学习的特征提取方法具有更强的自适应性和表达能力。卷积神经网络是一种典型的深度学习模型，它通过多层卷积、池化等操作提取图像的高级特征，然后使用全连接层进行分类和识别。在垃圾分类中，可以使用预训练的CNN模型，如VGG、ResNet等，在大量垃圾图像上进行微调和迁移学习，以获得更好的识别效果。此外，还可以使用自编码器等无监督学习方法对垃圾图像进行特征提取。</p><p>​需要注意的是，基于深度学习的特征提取方法需要消耗大量时间和计算资源，同时对数据集和模型的选择和构建也有一定要求。因此，在实际应用中需要综合考虑各种因素，保证系统的性能和可靠性。</p><h4 id="6-2-2-分类器训练"><a href="#6-2-2-分类器训练" class="headerlink" title="6.2.2 分类器训练"></a>6.2.2 分类器训练</h4><p>​根据已经降维处理过的特征向量，采用传统的机器学习分类算法（如支持向量机、随机森林等）训练分类器模型，使其可以自动识别和分类新的垃圾实例。选择合适的分类器模型进行训练。常用的分类器包括支持向量机随机森林（Random Forest）、神经网络（Neural Network）等[9]。通过将垃圾实例的特征向量输入到已经训练好的分类器中，对垃圾进行预测和分类，输出对应的垃圾类别[10]。</p><p><img src="/../images/postsImg/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/image-20241212150205546.png" alt="image-20241212150205546"></p><h2 id="七、实验结果分析"><a href="#七、实验结果分析" class="headerlink" title="七、实验结果分析"></a>七、实验结果分析</h2><p>​构建好模型结构后，设置数据集加载路径，在搭建好的环境中进行模型训练，将训练过程中每轮迭代的Train Loss、Valid Loss、Train Acc、Valid Acc等数据保存到log日志文件中，然后使用matplotlib库绘制在训练集和测试集上的Accuracy跟Loss的变化曲线。</p><p>​目前模型训练集准确度83.8%，测试集准确度67.5%，仍有待提高。</p><p><img src="/../images/postsImg/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/image-20241212150228659.png" alt="image-20241212150228659"></p><p><img src="/../images/postsImg/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/image-20241212150238095.png" alt="image-20241212150238095"></p><p><img src="/../images/postsImg/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/image-20241212150241894.png" alt="image-20241212150241894"></p><p><img src="/../images/postsImg/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/image-20241212150245750.png" alt="image-20241212150245750"></p><p><img src="/../images/postsImg/CNN%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/image-20241212150249308.png" alt="image-20241212150249308"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​习近平总书记强调：“实行垃圾分类，关系广大人民群众生活环境，关系节约使用资源，是社会文明水平的一个重要体现”近年来，我国加速推行垃圾分类制度，全国垃圾分类工作由点到面、逐步启动、成效初显，取得了一定的积极进展。但与此同时，垃圾分类也面临着一些挑战和不足。因此基于人工智能的垃圾分类系统是一种创新的解决方案，可以实现自动化、高效率和准确度高的垃圾分类。基于人工智能的垃圾分类系统可以进行自动化分类，并且可以适应不同场景的需求。高效率和准确度高，可以大规模地处理数据，提高了分类效率。基于深度学习模型，可以根据实际情况进行优化，提高了分类的准确性。对保护环境和可持续发展具有积极的促进作用，提高了社会和生态效益。</p><p>​尽管基于人工智能的垃圾分类系统已经取得了显著进展，但仍然存在一些局限性，如对少见垃圾种类识别较困难、数据库存储和管理成本较高等问题。因此，未来需要继续优化和完善该系统，以满足更广泛的垃圾分类需求，并推进城市环保事业的发展。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]  Khan, Muhammad Sharif, et al. “Deep learning-based garbage recognition and management using Convolutional Neural Networks.” IEEE Access 9 (2021): 13834-13849.</p><p>[2]  Amirkhani, Amir, and C.-C. Jay Kuo. “Deep learning based garbage classification for smart waste management.” 2020 IEEE International Conference on Consumer Electronics-Taiwan (ICCE-Taiwan). IEEE, 2020.</p><p>[3]  王玉明，高洁, 谢益强. 基于深度学习的垃圾分类方法[J]. 电子设计工程, 2018(09):72-76.</p><p>[4]  刘学鹏，利用支持向量机建立垃圾分类系统[J]. 科技资讯, 2019(01):141-142.</p><p>[5]  李东升, 吴飞, 王昊. 基于神经网络的垃圾分类系统设计与实现[J]. 信息技术, 2017(10):57-60. </p><p>[6]  刘阳，李强. (2019). 智能垃圾分类系统中的图像识别技术研究[J]. 物理学报, 1168(3), 032034.</p><p>[7]  杨浩，刘振宇，陈健，周敏，高志远. (2020). 基于物联网和计算机视觉的垃圾分类系统开发与实现[J]. IEEE Access, 8, 196745-196757.</p><p>[8]  卢山，张艳利，谢亮. (2019). 一种基于深度学习和增强现实的垃圾分类综合方案[J]. 可持续性, 11(22), 6525.</p><p>[9]  凌琨，曾瑜，林凯华，龚康源. (2019). 基于机器学习技术的自动化垃圾分类系统[J]. 最新技术和工程, 8(4), 4417-4421.</p><p>[10] 贾亚娟，赵敏娟，夏显力，等.农村生活垃圾分类处理模式与建议[J]资源科学，2019（2）：338-351.</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斑马问题实验</title>
      <link href="/2024/06/15/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/06/15/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验五-斑马问题实验"><a href="#实验五-斑马问题实验" class="headerlink" title="实验五 斑马问题实验"></a><strong>实验五 斑马问题实验</strong></h1><h2 id="一、实验背景"><a href="#一、实验背景" class="headerlink" title="一、实验背景"></a>一、实验背景</h2><ol><li>在本次实验中，我们学习将 Python 应用于逻辑编程，并尝试自主撰写逻辑规则解决斑马问题。</li><li>本章实验的主要目的是掌握逻辑与推理相关基础知识点，熟悉python编程。</li><li>能够依据给定的事实以及规则编写代码，解决逻辑约束问题。</li></ol><h2 id="二、实验简介"><a href="#二、实验简介" class="headerlink" title="二、实验简介"></a>二、实验简介</h2><p>​5个不同国家且工作各不相同的人分别住在一条街上的5所房子里，每所房子的颜色不同，每个人都有自己养的不同宠物，喜欢喝不同的饮料。</p><p>​根据以下提示，你能告诉我哪所房子里的人养斑马，哪所房子里的人喜欢喝矿泉水吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">英国人住在红色的房子里</span><br><span class="line">西班牙人养了一条狗</span><br><span class="line">日本人是一个油漆工</span><br><span class="line">意大利人喜欢喝茶</span><br><span class="line">挪威人住在左边的第一个房子里</span><br><span class="line">绿房子在白房子的左边</span><br><span class="line">摄影师养了一只蜗牛</span><br><span class="line">外交官住在黄房子里</span><br><span class="line">中间那个房子的人喜欢喝牛奶</span><br><span class="line">喜欢喝咖啡的人住在绿房子里</span><br><span class="line">挪威人住在蓝色的房子旁边</span><br><span class="line">小提琴家喜欢喝橘子汁</span><br><span class="line">养狐狸的人所住的房子与医生的房子相邻</span><br><span class="line">养马的人所住的房子与外交官的房子相邻</span><br></pre></td></tr></table></figure><p><strong>存在的条件汇总：</strong></p><p>国籍：英国、西班牙、日本、意大利、挪威</p><p>房子颜色：红色、绿色、白色、蓝色、黄色</p><p>工作：油漆工、摄影师、外交官、小提琴家、医生</p><p>宠物：狗、蜗牛、狐狸、马、斑马</p><p>饮料：茶、牛奶、咖啡、橘子汁、矿泉水</p><h2 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h2><p>​使用python逻辑编程kanren库，将题目中的条件形式化为一个个的表达式，加入约束到kanren的一个集合中，然后利用kanren内置函数run求解即可。</p><p>​根据已知条件的性质将条件分为三组：</p><p><strong>1.第一组为属于一个实体的属性间的关系，有如下几个：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>英国人住在红房子里</span><br><span class="line"><span class="number">2.</span>西班牙人养了一条狗</span><br><span class="line"><span class="number">3.</span>日本人是一个油漆工</span><br><span class="line"><span class="number">4.</span>意大利人喝茶。</span><br><span class="line"><span class="number">7.</span>摄影师养了一只蜗牛</span><br><span class="line"><span class="number">8.</span>外交官住在黄房子里</span><br><span class="line"><span class="number">10.</span>喜欢喝咖啡的人住在绿房子里</span><br><span class="line"><span class="number">12.</span>小提琴家喜欢喝橘子汁</span><br></pre></td></tr></table></figure><p>​kanren中加入一个逻辑表达式的方法：</p><ul><li>首先用houses &#x3D; var() 创建一个逻辑变量houses。</li><li>代码中的var表示任意变量。5个var()分别代表国籍、工作、饮料、宠物、屋子颜色</li><li>然后利用membero函数表示一个约束, membero(item, houses) 表示 item是houses集合中的一个成员。如：</li></ul><p><img src="/../images/postsImg/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/image-20241209152747529.png" alt="image-20241209152747529"></p><p><strong>2.第二组为表示实体在整体中的确切属性的条件</strong></p><p>​添加方法为eq函数，eq(a,b) 表示ab相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span>挪威人住在左边的第一个房子里</span><br><span class="line"><span class="number">9.</span>中间房子的人喜欢喝牛奶</span><br></pre></td></tr></table></figure><p><img src="/../images/postsImg/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/image-20241209153132087.png" alt="image-20241209153132087"></p><p><strong>3.第三组为描述两个实体间的不确定的(模糊的)关系的表达式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6.</span>绿房子在白房子的左边</span><br><span class="line"><span class="number">11.</span>挪威人住在蓝色的房子旁边</span><br><span class="line"><span class="number">13.</span>养狐狸的人所住的房子与医生的房子相邻</span><br><span class="line"><span class="number">14.</span>养马的人所住的房子与外交官的房子相邻</span><br></pre></td></tr></table></figure><p>​在kanren中没有能够直接描述以上关系的函数，所以需要人为定义</p><p>​实现的函数：</p><p>​left(q,p,x)表示在关系集合x中q在p的左边</p><p>​next(q,p,x)表示在关系集合x中q和p相邻</p><p><img src="/../images/postsImg/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/image-20241209153241032.png" alt="image-20241209153241032"></p><p>​借助以上两个函数就可以将对应的四个逻辑表达式表达出来了</p><p><img src="/../images/postsImg/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/image-20241209153258415.png" alt="image-20241209153258415"></p><p>​到这里所有的表达式都已经表达完毕，已经可以利用run运行了，但是此时的表达式中还没有斑马和矿泉水这两个变量，程序处理到他们时会用符号代替，下面添加这两个变量进入表达式：</p><p><img src="/../images/postsImg/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/image-20241209153316952.png" alt="image-20241209153316952"></p><p>最后运行规则代码：</p><p><img src="/../images/postsImg/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/image-20241209153325516.png" alt="image-20241209153325516"></p><h2 id="四、实验代码总结"><a href="#四、实验代码总结" class="headerlink" title="四、实验代码总结"></a>四、实验代码总结</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kanren <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> kanren.core <span class="keyword">import</span> lall</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">q, p, <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> membero((q, p), <span class="built_in">zip</span>(<span class="built_in">list</span>, <span class="built_in">list</span>[<span class="number">1</span>:]))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">right_of</span>(<span class="params">q, p, <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> left(p, q, <span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_to</span>(<span class="params">q, p, <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> conde([left(q, p, <span class="built_in">list</span>)], [right_of(q, p, <span class="built_in">list</span>)])</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Agent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.units = var()  <span class="comment"># 单个unit变量指代一座房子的信息(国家，工作，饮料，宠物，颜色)</span></span><br><span class="line">        <span class="comment"># 例如(&#x27;英国人&#x27;, &#x27;油漆工&#x27;, &#x27;茶&#x27;, &#x27;狗&#x27;, &#x27;红色&#x27;)即为正确格式，但不是本题答案</span></span><br><span class="line">        <span class="comment"># 请基于给定的逻辑提示求解五条正确的答案</span></span><br><span class="line">        <span class="variable language_">self</span>.rules_zebraproblem = <span class="literal">None</span>  <span class="comment"># 用lall包定义逻辑规则</span></span><br><span class="line">        <span class="variable language_">self</span>.solutions = <span class="literal">None</span>  <span class="comment"># 存储结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">define_rules</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.rules_zebraproblem = lall(</span><br><span class="line">            (eq, (var(), var(), var(), var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            <span class="comment"># self.units共包含五个unit成员，即每一个unit对应的var都指代一座房子(国家，工作，饮料，宠物，颜色)</span></span><br><span class="line">            <span class="comment"># 各个unit房子又包含五个成员属性: (国家，工作，饮料，宠物，颜色)</span></span><br><span class="line">            (membero, (<span class="string">&#x27;英国人&#x27;</span>, var(), var(), var(), <span class="string">&#x27;红色&#x27;</span>), <span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (<span class="string">&#x27;西班牙人&#x27;</span>, var(), var(), <span class="string">&#x27;狗&#x27;</span>, var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (<span class="string">&#x27;日本人&#x27;</span>, <span class="string">&#x27;油漆工&#x27;</span>, var(), var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (<span class="string">&#x27;意大利人&#x27;</span>, var(), <span class="string">&#x27;茶&#x27;</span>, var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (eq, ((<span class="string">&#x27;挪威人&#x27;</span>, var(), var(), var(), var()), var(), var(), var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (right_of, (var(), var(), var(), var(), <span class="string">&#x27;绿色&#x27;</span>), (var(), var(), var(), var(), <span class="string">&#x27;白色&#x27;</span>),<span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (var(), <span class="string">&#x27;摄影师&#x27;</span>, var(), <span class="string">&#x27;蜗牛&#x27;</span>, var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (var(), <span class="string">&#x27;外交官&#x27;</span>, var(), var(), <span class="string">&#x27;黄色&#x27;</span>), <span class="variable language_">self</span>.units),</span><br><span class="line">            (eq, (var(), var(), (var(), var(), <span class="string">&#x27;牛奶&#x27;</span>, var(), var()), var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (var(), var(), <span class="string">&#x27;咖啡&#x27;</span>, var(), <span class="string">&#x27;绿色&#x27;</span>), <span class="variable language_">self</span>.units),</span><br><span class="line">            (next_to, (<span class="string">&#x27;挪威人&#x27;</span>, var(), var(), var(), var()), (var(), var(), var(), var(), <span class="string">&#x27;蓝色&#x27;</span>), <span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (var(), <span class="string">&#x27;小提琴家&#x27;</span>, <span class="string">&#x27;橘子汁&#x27;</span>, var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (next_to, (var(), var(), var(), <span class="string">&#x27;狐狸&#x27;</span>, var()), (var(), <span class="string">&#x27;医生&#x27;</span>, var(), var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (next_to, (var(), var(), var(), <span class="string">&#x27;马&#x27;</span>, var()), (var(), <span class="string">&#x27;外交官&#x27;</span>, var(), var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (var(), var(), <span class="string">&#x27;矿泉水&#x27;</span>, var(), var()), <span class="variable language_">self</span>.units),</span><br><span class="line">            (membero, (var(), var(), var(), <span class="string">&#x27;斑马&#x27;</span>, var()), <span class="variable language_">self</span>.units),</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.define_rules()</span><br><span class="line">        <span class="variable language_">self</span>.solutions = run(<span class="number">0</span>, <span class="variable language_">self</span>.units, <span class="variable language_">self</span>.rules_zebraproblem)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.solutions</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    agent = Agent()</span><br><span class="line">    solutions = agent.solve()</span><br><span class="line">    <span class="comment"># 提取解释器的输出</span></span><br><span class="line">    output = [house <span class="keyword">for</span> house <span class="keyword">in</span> solutions[<span class="number">0</span>] <span class="keyword">if</span> <span class="string">&#x27;斑马&#x27;</span> <span class="keyword">in</span> house][<span class="number">0</span>][<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#123;&#125;房子里的人养斑马&#x27;</span>.<span class="built_in">format</span>(output))</span><br><span class="line">    output = [house <span class="keyword">for</span> house <span class="keyword">in</span> solutions[<span class="number">0</span>] <span class="keyword">if</span> <span class="string">&#x27;矿泉水&#x27;</span> <span class="keyword">in</span> house][<span class="number">0</span>][<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;房子里的人喜欢喝矿泉水&#x27;</span>.<span class="built_in">format</span>(output))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment"># 解释器的输出结果展示</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> solutions[<span class="number">0</span>]:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行代码截图</strong></p><p><img src="/../images/postsImg/%E6%96%91%E9%A9%AC%E9%97%AE%E9%A2%98%E5%AE%9E%E9%AA%8C/image-20241209153531897.png" alt="image-20241209153531897"></p><h2 id="五、实验总结"><a href="#五、实验总结" class="headerlink" title="五、实验总结"></a>五、实验总结</h2><p>​kanren库能够起到按照指定的表达式寻找满足表达式的值，下面是常用的kanren函数及其常用用法。</p><p>​eq(u,v)创建一个等式约束,表示变量a等于变量b,通常只是表达一个等式关系,返回值类型为一个逻辑表达式(函数)。</p><p>​var()用于创建逻辑变量,可以绑定到其他逻辑变量或常量。</p><p>​run(n,x,*goals)函数用于进行逻辑推理,返回指定个满足约束的变量绑定,返回值类型为python列表,列表的每个元素是字典。</p><p>​函数参数列表中n表示返回个数,x表示想要得到的逻辑变量,*goals指的是约束条件,约束条件可以有多个。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格记--引导型开放日记</title>
      <link href="/2024/06/15/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/06/15/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="格记–引导型开放日记"><a href="#格记–引导型开放日记" class="headerlink" title="格记–引导型开放日记"></a><strong>格记–引导型开放日记</strong></h1><h2 id="一、设计任务与要求"><a href="#一、设计任务与要求" class="headerlink" title="一、设计任务与要求"></a>一、设计任务与要求</h2><h3 id="1-1-设计背景"><a href="#1-1-设计背景" class="headerlink" title="1.1 设计背景"></a>1.1 设计背景</h3><p>​如今随着信息技术的快速发展和广泛应用，人们对于个人生活记录和管理的需求日益增长，使得更便捷的个人日记本系统成为当下迫切需要的服务。传统的纸质日记本或简单的移动设备已无法满足当代人们对于便捷性、安全性和高效性的需求。设计并开发一款基于SSM框架的引导型个人日记本系统，将有效地满足这些需求，提高个人的生活质量。</p><h3 id="1-2-系统功能简介"><a href="#1-2-系统功能简介" class="headerlink" title="1.2 系统功能简介"></a>1.2 系统功能简介</h3><p>​格记–引导型开放日记是一个使用Javaweb技术开发的在线日记平台。该系统是一个简单的在线日记分享、编辑平台。主要包含以下几个方面：登录注册，查看所有用户的公开日记，对公开日记进行搜索，管理个人发布的日记，对日记进行评论。</p><h3 id="1-3-开发环境及要求"><a href="#1-3-开发环境及要求" class="headerlink" title="1.3 开发环境及要求"></a>1.3 开发环境及要求</h3><table><thead><tr><th align="center">操作系统</th><th align="center">Windows10</th></tr></thead><tbody><tr><td align="center">数据库</td><td align="center">MySQL8.0.16</td></tr><tr><td align="center">Web服务器</td><td align="center">Tomcat9.0.54</td></tr><tr><td align="center">开发工具</td><td align="center">IDEA2020.3</td></tr><tr><td align="center">Java运行环境</td><td align="center">Java8</td></tr></tbody></table><h3 id="1-4-系统开发的目的"><a href="#1-4-系统开发的目的" class="headerlink" title="1.4 系统开发的目的"></a>1.4 系统开发的目的</h3><p>​格记日记系统的设计的目的是满足用户对于记录、管理和分享个人生活的需求。我们系统的目标在于为用户提供一个安全、便捷的平台，使他们能够记录和存储日常生活、情感、思想等内容。并具备查找、分类和评论的功能为用户提供一个交流互助的平套。通过这个系统，用户不仅可以记录生活中的精彩瞬间或者思想感悟，还能够方便地回顾这些珍贵的回忆。</p><p>​格记日记系统不仅仅是记录工具，更是一个见证用户成长过程的平台。它可以帮助用户更好地了解自己的成长和改变，提高自我认知和自我管理能力。通过回顾过往的日记内容，用户能够更清晰地观察自己的成长过程。在一篇篇自己编写的日记中，发现一种情感支持和心理健康的保障。它将陪伴用户度过人生中的喜怒哀乐，见证用户成长、转变和进步，帮助用户记录生活的点点滴滴，提高自我认知和情感管理的能力。</p><h2 id="二、系统需求分析"><a href="#二、系统需求分析" class="headerlink" title="二、系统需求分析"></a>二、系统需求分析</h2><h3 id="2-1-系统功能模块"><a href="#2-1-系统功能模块" class="headerlink" title="2.1 系统功能模块"></a>2.1 系统功能模块</h3><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212160910243.png" alt="image-20241212160910243"></p><h3 id="2-2-功能性需求"><a href="#2-2-功能性需求" class="headerlink" title="2.2 功能性需求"></a>2.2 功能性需求</h3><ul><li><p>登录和注册：</p><p>用户注册一个新账户，提供用户名和密码。</p><p>已注册用户能够登录系统。</p><p>管理员可使用管理员账号登录。</p></li><li><p>创建日记：</p><p>用户登录后，能够创建新的日记条目。</p><p>日记条目包含标题、日期、时间、内容等信息。</p></li><li><p>查看日记：</p><p>用户可以查看以前创建的日记条目。</p><p>且可以按日期、标题等方式进行排序和筛选。</p><p>若不登陆，用户则可以浏览公开的日记。</p></li><li><p>编辑和删除日记：</p><p>用户可以编辑已存在的日记条目，删除不再需要的日记条目。</p><p>用户可以编辑自己的评论，也可以评论公开的日记。</p></li><li><p>备份和恢复：</p><p>用户可以备份日记数据，以防止意外数据丢失。</p><p>具备恢复功能，允许用户在需要时恢复备份的数据。</p></li></ul><h3 id="2-3-非功能性需求"><a href="#2-3-非功能性需求" class="headerlink" title="2.3 非功能性需求"></a>2.3 非功能性需求</h3><ul><li><p>用户友好性：</p><p>界面简洁直观，易于新用户上手。</p></li><li><p>安全性：</p></li></ul><p>​用户密码加密存储，以保护用户数据的安全性。</p><p>​用户的日记数据受到访问控制，通过身份验证的用户可以查看和修改。</p><p>​管理员账号登陆可以管理所有人的公开日记。</p><ul><li>可扩展性：</li></ul><p>​系统易于扩展，为将来添加新的功能或改进现有功能提供便利。</p><ul><li>性能：</li></ul><p>​系统具有良好的性能，能够在短时间内响应用户请求并处理日记数据。</p><ul><li>稳定性：</li></ul><p>​系统应稳定可靠，能够长时间运行尽量避免崩溃或错误。</p><h2 id="三、总体设计方案"><a href="#三、总体设计方案" class="headerlink" title="三、总体设计方案"></a>三、总体设计方案</h2><h3 id="3-1-系统功能分析及设计思路"><a href="#3-1-系统功能分析及设计思路" class="headerlink" title="3.1 系统功能分析及设计思路"></a>3.1 系统功能分析及设计思路</h3><h4 id="3-1-1-系统功能分析"><a href="#3-1-1-系统功能分析" class="headerlink" title="3.1.1 系统功能分析"></a>3.1.1 系统功能分析</h4><p>​日记系统可以记录生活中的点滴细节思考和感悟，同时也是现如今压力越来越大的情况下一个很好的情感出口。在格记日记系统诞生之初，我们就对其有着清晰的定位。格记作为一个线上日记管理系统有着比传统纸质日记更便捷，不易丢失和损坏等优点。因此作为一个线上日记系统，一定要确保用户数据的安全性，加强隐私保护的同时也要确保数据被即使安全的保存在云端，确保用户的数据不会丢失。我们对格记进行以下的功能设置来帮助用户更好的使用线上日记系统</p><p>​分类管理：格记提供一些固定标签或者自定义标签帮助用户划分和查找自己的日记。</p><p>​便捷分享：用户可以将自己的日记分享给朋友或公开发布，增加交流和分享的机会。也可以评论和转发他人公开权限的日记。</p><p>​匿名浏览：提供心灵交流和呼吸的空间，不登陆可匿名浏览他人公开日记。</p><p>​引导型记录：为用户提供问题和模板帮助用户更便捷的记录自己的一天。</p><p>​管理方式方便：登录分为用户账号登录和管理员账号登录，方便管理人员后续跟进和维护</p><h4 id="3-1-2-设计思路"><a href="#3-1-2-设计思路" class="headerlink" title="3.1.2 设计思路"></a>3.1.2 设计思路</h4><p>​日记系统的总体设计思路主要从记日记的用户角度出发，发现和整理用户的实际需求并按需求进行功能设计。首先在用户登录或者注册后，可通过个人空间管理的功能，对日记进行管理。主要包括日记的添加、编辑、删除、查询等功能。用户还可对自己的日记进行分类管理，并可根据分类将其显示在个人空间中。通过本项目的设计与实现，旨在为用户提供一个高效、安全、便捷的线上日记管理平台，促进用户之间的交流与分享，提升用户的记录和管理体验。</p><h3 id="3-2-系统整体框架"><a href="#3-2-系统整体框架" class="headerlink" title="3.2 系统整体框架"></a>3.2 系统整体框架</h3><p>​该系统数据库采用关系型数据库MySQL8，后端采用SSM架构，前端采用Thymeleaf模板引擎。</p><h4 id="3-2-1-数据库设计"><a href="#3-2-1-数据库设计" class="headerlink" title="3.2.1 数据库设计"></a>3.2.1 数据库设计</h4><p>​如图所示为diary_ssm数据库的整体设计方案。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212161453691.png" alt="image-20241212161453691"></p><p>表数据分析：</p><ul><li>用户表（user）：用户id、用户名、密码、邮箱、日记地址、昵称、创建时间、活跃时间、角色权限、头像位置。</li><li>内容表（content）：日记id、分类id、标题、缩略名、创建时间、修改时间、文章内容、是否推荐、作者id、文章类型、文章状态、访问量、缩略图、描述。</li><li>分类表（category）：分类id、分类名称、缩略图。</li><li>评论表（comment）：评论id、文章id、创建时间、作者、作者id、邮箱、日记地址、IP地址、评论内容、父评论。</li><li>文件表（file）：文件id、路径、作者id、文件状态、名称、类型、创建时间、修改时间、下载量、文件大小。</li><li>日志表（log）：日志id、浏览器名、操作系统名、访问api路径、IP地址、来源地址、访问时间、文章id。</li><li>标签表（tag）：标签id、标签名、总标签数。</li></ul><h4 id="3-2-2-后端SSM框架搭建"><a href="#3-2-2-后端SSM框架搭建" class="headerlink" title="3.2.2 后端SSM框架搭建"></a>3.2.2 后端SSM框架搭建</h4><p>​SSM框架是 Spring+ SpringMVC+ MyBatis的缩写，它是由 Spring和 MyBatis两大开放源码框架（SpringMVC是 Spring的一部分）组成的，经常被用来做一些相对简单的 Web工程的框架。与以前的 SSH (Spring+ Struts+ Hibernate）相比， SSM更轻便、更灵活，已经成为 Java Web开发的主流框架。</p><p>​SpringMVC负责管理表现层的Handler。SpringMVC容器是Spring容器的子容器，因此SpringMVC容器可以调用Spring容器中的Service对象。</p><p>​Spring负责事务管理，Spring可以管理持久层的Mapper对象和业务层的Service对象。由于Mapper对象和Service对象都在Spring容器中，所以可以在业务逻辑层通过Service对象调用持久层的Mapper对象。</p><p>​Mybatis负责与数据库进行交互。</p><p>后端项目结构图：</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212161544729.png" alt="image-20241212161544729"></p><h4 id="3-2-3-前端页面搭建"><a href="#3-2-3-前端页面搭建" class="headerlink" title="3.2.3 前端页面搭建"></a>3.2.3 前端页面搭建</h4><p>​前端采用Thymeleaf模板搭建，Thymeleaf是适用于Web和独立环境的现代服务器端Java模板引擎。Thymeleaf的主要目标是为您的开发工作流程带来优雅的自然模板，使HTML可以在浏览器中正确显示，也可以作为静态原型工作，从而可以在开发团队中加强协作。</p><p>​Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 Thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</p><p>​Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</p><p>​Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</p><p>前端项目结构图：</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212161622191.png" alt="image-20241212161622191"></p><h2 id="四、各功能的主要功能及说明"><a href="#四、各功能的主要功能及说明" class="headerlink" title="四、各功能的主要功能及说明"></a>四、各功能的主要功能及说明</h2><p>1．登陆注册功能</p><p>​系统分为用户登录和管理员登录，用户登录后可以编写日记和管理日记，管理员登录后可以查看系统数据和管理日记、标签、分类、用户等。</p><p>2．日记管理功能</p><p>​用户登录后可以编辑发布自己的日记，并且可以对自己发布的日记进行管理，包括修改日记和删除日记。</p><p>3．分类管理功能</p><p>​分类可以对所有的日记进行归类处理，不同的日记不同的类别，方便用户查看对应的感兴趣的内容。</p><p>4．标签管理功能</p><p>​用户在编写日记时，可以选择已有多个标签，也可添加自己需要的标签，标签更细化了日记的种类，方便用户查看对应的感兴趣的内容。</p><p>5．评论管理功能</p><p>​可以对日记进行评论，与作者互动。</p><p>6.用户管理功能</p><p>​管理员账号登录后，可以管理所有的普通用户，对用户进行修改和删除操作。</p><p>7．文件管理功能</p><p>​管理员账号可处理用户上传的一些文件。具有上传和删除操作。</p><h2 id="五、设计结果和分析"><a href="#五、设计结果和分析" class="headerlink" title="五、设计结果和分析"></a>五、设计结果和分析</h2><p>1．游客角色</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212161853291.png" alt="image-20241212161853291"></p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212161857641.png" alt="image-20241212161857641"></p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212161906591.png" alt="image-20241212161906591"></p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212161909643.png" alt="image-20241212161909643"></p><p>2．系统登录注册</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162627043.png" alt="image-20241212162627043"></p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162640904.png" alt="image-20241212162640904"></p><p>3．用户角色</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162651756.png" alt="image-20241212162651756"></p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162656357.png" alt="image-20241212162656357"></p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162702311.png" alt="image-20241212162702311"></p><p>4．管理员角色</p><p>仪表盘：展示系统所有统计信息，总日记数，分类数量，标签数量，评论数量等。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162713785.png" alt="image-20241212162713785"></p><p>用户管理：展示系统所有用户的公开日记。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162726163.png" alt="image-20241212162726163"></p><p>分类管理：新增、修改和删除类别操作。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162735156.png" alt="image-20241212162735156"></p><p>标签管理：对标签进行修改和删除操作，并且显示标签对应的日记数量。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162742832.png" alt="image-20241212162742832"></p><p>评论管理：展示系统所有日记的评论，点击前台地址可以跳转到对应的评论日记页面。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162750798.png" alt="image-20241212162750798"></p><p>用户管理：展示系统所有已注册的用户信息。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162757881.png" alt="image-20241212162757881"></p><p>文件管理：展示用户之间共享存储的文件，可以免费下载和查看。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162806559.png" alt="image-20241212162806559"></p><p>系统配置：可以对个人信息和密码进行修改，团队信息的内容就是在主页上显示的信息展示模块，可动态修改不同的值。</p><p><img src="/../images/postsImg/%E6%A0%BC%E8%AE%B0--%E5%BC%95%E5%AF%BC%E5%9E%8B%E5%BC%80%E6%94%BE%E6%97%A5%E8%AE%B0/image-20241212162813263.png" alt="image-20241212162813263"></p><h2 id="六、学习心得"><a href="#六、学习心得" class="headerlink" title="六、学习心得"></a>六、学习心得</h2><p>​通过一个学期对Java这门课的学习，让我认识到信心、恒心、毅力在学习的过程当中十分重要。在本门课一学期的学习中我们学习到了许多的理论知识，但真正让我们对这些书本知识印象深刻的还是此次大作业。在本次大作业中我们学习到了在课上只闻其声不见其貌的框架，顺带复习了以前学习的一系列数据库操作。在短短两周内和“他们”深刻交流了一下，这里感谢岳昊老师，如果没有您我们的作品将没有这么完善。</p><p>​这门课教会我们的不仅仅是一个框架，更是一种面对问题不挫败不气馁的态度。这是我们第一次在大作业中尝试自己立意。虽然我们现在时间和金钱还有限，但如果有机会我们想格记真的可以完善好，成为一方人心灵的港湾。作业完成过程中尽管时间紧迫时，遇到困难会抓耳挠腮，但一起看着作品成功完成，我们这个四人的小团队也感到衷心的欣慰。</p><p>​最后感谢我的组员们，小组作业中从不踢皮球或者推脱，大家都非常快速和完美的完成自己的工作，虽然我们的作品还有很多不足，但我们之后会继续努力继续进步的。期待下次再相遇！</p><p><strong>附表：</strong></p><table><thead><tr><th align="center">团队分工明细表</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">序号</td><td align="center">姓名</td><td align="center">主要工作任务</td></tr><tr><td align="center">1</td><td align="center">富佳</td><td align="center">搭建项目基本结构；实现用户注册与登录功能；实现日记的分类管理功能；文档主笔。</td></tr><tr><td align="center">2</td><td align="center">夏取明</td><td align="center">设计数据库表结构；开发日记的创建与编辑功能；添加评论功能；进行系统测试；视频录制。</td></tr><tr><td align="center">3</td><td align="center">王艺凡</td><td align="center">完善用户界面设计；文档主笔。</td></tr><tr><td align="center">4</td><td align="center">朱艳芳</td><td align="center">完成系统需求分析；视频文稿；</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 作业 </tag>
            
            <tag> Web </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于循环神经网络的对联自动生成研究</title>
      <link href="/2024/06/09/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/"/>
      <url>/2024/06/09/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="基于循环神经网络的对联自动生成研究"><a href="#基于循环神经网络的对联自动生成研究" class="headerlink" title="基于循环神经网络的对联自动生成研究"></a><strong>基于循环神经网络的对联自动生成研究</strong></h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-选题背景及意义"><a href="#1-1-选题背景及意义" class="headerlink" title="1.1 选题背景及意义"></a>1.1 选题背景及意义</h3><p>​深度学习的概念最早由 Geoffrey Hinton 在 2006 年提出，其兴起于图像识别领域，在之后的很短时间内，深度学习技术广泛应用于机器学习的各个领域。在AI领域中，自然语言处理（Natural Language Processing，NLP）是一个占据着极其重要地位的子领域，它的发展可以使计算机理解和利用人类语言，使计算机达到认知智能，并逐步迈入感知智能[1]。NLP主要包括语言理解和语言生成两大部分。在语言生成范畴，诗歌和对联的自动生成是一个非常重要的分支，具有很强的前瞻性，一直是学术界研究的热点。</p><p>​在本文中，我们研究了对联的自动生成。我们提出了一个基于注意力的编码器-解码器模型来接收前从句，并在对联对中输出后续子句。给定任何指定的先行从句，我们学习单个字符的表示，以及从句中的组合，以及它们如何相互加强和约束。我们可以使用编码器解码器模型生成后续子句。在生成过程中，我们结合了注意力机制，以满足对联的特殊性。</p><p>​使用深度神经网络进行对联的生成研究是一项十分具有意义的工作，对联的自动生成，也是对自然语言处理领域中一个具体方面的深入探索和研究，对自然语言处理领域内的其他任务也有一定的借鉴参考价值；使用机器学习方法进行对联的创作，可以将其生成方法拓宽到其他场景下，促进中国传统文化的传播和发展。</p><h3 id="1-2-开发团队"><a href="#1-2-开发团队" class="headerlink" title="1.2 开发团队"></a>1.2 开发团队</h3><p><strong>组员：</strong></p><p>富佳、夏取明、王艺凡</p><p><strong>具体分工：</strong></p><p>富佳：组长；数据集整理，预处理；展示界面搭建；报告撰写</p><p>夏取明：模型搭建训练及模型预测； 参考文献收集</p><p>王艺凡：数据集搜集；参考文献收集；报告撰写</p><h3 id="1-3-开发环境"><a href="#1-3-开发环境" class="headerlink" title="1.3 开发环境"></a>1.3 开发环境</h3><table><thead><tr><th align="center">操作系统</th><th align="center">Windows</th></tr></thead><tbody><tr><td align="center">CPU型号</td><td align="center">AMD Ryzen 5 4600U with Radeon Graphics</td></tr><tr><td align="center">GPU型号</td><td align="center">AMD  Radeon(TM) Graphics</td></tr><tr><td align="center">内存</td><td align="center">16.0 GB</td></tr><tr><td align="center">主要工具</td><td align="center">Anaconda、Python3.6、paddle</td></tr></tbody></table><h3 id="1-4-国内外研究现状"><a href="#1-4-国内外研究现状" class="headerlink" title="1.4 国内外研究现状"></a>1.4 国内外研究现状</h3><p>​在以往的研究中很少有研究关注深度学习对中国对联的应用，但有类似的文本分类识别应用在机器翻译和欧美古典诗歌自动生成等方面。机器翻译的概念始于 1949 年，1954 年美国 Georgetown-IBM 实验室第一次完成英语和俄语间的机器翻译实验，证明了机器翻译的可行性。但是在后面一段时间内，由于速度慢、消耗计算资源高、准确性低等缺点，机器翻译的发展一度停滞。直到 20 世纪 80 年代，随着社会信息服务需求的扩大，机器翻译技术在处理大量文本翻译任务的优势逐渐凸显，机器翻译的研究开始复苏。</p><p>​古典诗歌自动生成的研究始于 1959 年，当时 Theo Lutz 通过计算机创作了第一首德语诗歌。从那时起，机器自动生成诗歌从简单的词堆栈方法开始，然后逐渐发展到现在的基于案例的推理方法以及其他新兴的方法，可分为基于模板的生成方法、基于遗传算法的方法、生成和测试方法以及基于案例的推理方法。很少有研究关注中国对联的产生。中国对联生成任务可以看作是两句诗生成的简化形式。给定诗的第一行，生成器应该相应地生成第二行，这与对联生成的过程类似。但是，对联生成和诗歌生成之间仍然存在一些差异。生成后续从句以匹配给定的前置从句的任务比生成一首诗的所有句子更明确。此外，并不是诗中所有的句子都需要遵循对联的约束。</p><p>​总的来说，国内基于seq2seq的对联自动生成系统在技术上已经取得了一定的进展，但仍面临着诸多挑战，如语义理解、语法结构、韵律要求等。未来，随着深度学习技术的不断发展和对联生成应用场景的不断拓展，这些挑战将逐渐得到解决，对联生成系统的性能和应用前景也将不断提升。</p><h2 id="二、相关理论及其技术介绍"><a href="#二、相关理论及其技术介绍" class="headerlink" title="二、相关理论及其技术介绍"></a>二、相关理论及其技术介绍</h2><h3 id="2-1-循环神经网络"><a href="#2-1-循环神经网络" class="headerlink" title="2.1 循环神经网络"></a>2.1 循环神经网络</h3><h4 id="2-1-1-标准循环神经网络"><a href="#2-1-1-标准循环神经网络" class="headerlink" title="2.1.1 标准循环神经网络"></a>2.1.1 标准循环神经网络</h4><p>​基础的神经网络包括输入层、隐藏层和输出层三层结构，其只在层与层之间建立连接。而标准循环神经网络 RNN(Recurrent Neural Network)在此基础上，在同层之间的神经元之间也建立了连接。RNN 的神经网络结构如图 2.1 所示，等号右边为神经网络按时间展开图，等号左边是其简化图。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002.jpg" alt="img"></p><h4 id="2-1-2-长短时记忆网络"><a href="#2-1-2-长短时记忆网络" class="headerlink" title="2.1.2 长短时记忆网络"></a>2.1.2 长短时记忆网络</h4><p>​长短时记忆网络 LSTM 是循环神经网络的一个最常见的扩展模型，其就是为了解决一般 RNN 网络的缺陷，更有效的应对产期依赖问题。LSTM的隐藏层比RNN更为复杂，采用了三个“门”结构，用来解决长期依赖问题。如图2.2所示LSTM的隐藏层分别包含了输入门、遗忘门和输出门。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-17337985776821.jpg" alt="img"></p><p>​这是最基本的 LSTM 结构，目前有 LSTM 的变种形式如 GRU 等等，但是基本思想都是统一的。LSTM 和 GRU 是目前比较常见的神经网络隐藏层单元结构，除此以外，还有 Koutnik提出的 Clockwork RNN 结构，Yao 提出的 Depth Gated RNN 结构等[2]，对于具体的任务，可以适当变形以适应任务需要。</p><h3 id="2-2-注意力机制"><a href="#2-2-注意力机制" class="headerlink" title="2.2 注意力机制"></a>2.2 注意力机制</h3><p>​注意力机制（Attention Mechanism，简称 AM）最早的提出是在图像领域，受到人类注意力机制的启发，人类观察图像时往往有重点的将注意力集中在图像的特定部分并且会根据之前观察图像的经验来观察之后的图像。基于注意力机制的文本分类机制为每个词赋予了权重α，并根据权重生成语义编码C。其编码的三个阶段具体计算步骤为：</p><ol><li>计算 Query和不同 Key 的相关性，计算不同 Value 值的权重系数。</li><li>对上一阶段的输出进行归一化处理，将数值的范围映射到 0 和 1 之间。</li><li>根据权重系数对Value进行加权求和，从而得到最终的注意力数值。</li></ol><p>​在注意力模型中，由于每一次输出的词语在计算的时候，使用到的语义编码C 都是不一样的，这也体现出注意力的意义，在很多任务中都已经取得了很好的效果。</p><h3 id="2-3-序列到序列模型"><a href="#2-3-序列到序列模型" class="headerlink" title="2.3 序列到序列模型"></a>2.3 序列到序列模型</h3><h4 id="2-3-1-经典的序列到序列模型"><a href="#2-3-1-经典的序列到序列模型" class="headerlink" title="2.3.1 经典的序列到序列模型"></a>2.3.1 经典的序列到序列模型</h4><p>​序列到序列模型（seq2seq）亦称为编码-解码模型，由谷歌公司于2014年在论文《Sequence to sequence learning with neural networks》中提出。序列到序列模型的提出在整个深度学习领域获得了很大的影响。近年来在机器翻译、语音识别、图像识别、文本生成等领域的大部分研究都是围绕序列到序列的模型框架展开。如图2.3所展示了一个经典的序列到序列模型。模型包含了一个编码器（Encoder）和一个解码器（Decoder），编码器的作用是提取输入序列特征，并将其压缩成一个固定大小的语义向量C，解码器的作用是解读语义向量C，将其转化为目标输出序列。其中编码器和解码器一般采用循环神经网络[3]。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image001.png" alt="img"></p><h4 id="2-3-2-基于注意力机制的序列到序列模型"><a href="#2-3-2-基于注意力机制的序列到序列模型" class="headerlink" title="2.3.2 基于注意力机制的序列到序列模型"></a>2.3.2 基于注意力机制的序列到序列模型</h4><p>​经典的序列到序列模型在很多问题上都非常有效，但是也存在问题。最大的不足在于，编码器和解码器仅通过一个固定的语义向量C进行联系，每个输出时刻语义向量的值都是不变的，且语义向量并不能够将整个序列的信息完全表示，如此解码器在每个时刻仅根据历史的信息和固定的语义向量C进行输出，这样会导致本应该和输出强相关的输入信息被严重的稀释了[4]。</p><p>​因此将注意力机制应用于序列到序列模型，如图2.4展示了基于注意力机制的序列到序列模型示意图。用经典的序列到序列模型结合注意力机制，使得编码器和解码器之间通过一个可变的语义向量进行联系，每个输出时刻语义向量都是不同的，可变的Ci表示了每个时刻输出最相关的输入信息。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image001-17337987235392.png" alt="img"></p><p>​本文主要用到基于注意力机制的序列到序列模型，因此这里展开描述基于注意力机制的序列到序列模型计算过程步骤：</p><p>​假设基于注意力机制的序列到序列模型输入的源序列为S &#x3D; (x1,x2,…,xm)，输出的目标序列为T&#x3D; (y1,y2,…,yn)，那么在第i时刻模型的输出计算过程可以表示如下：</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image001-17337987355173.png" alt="img"></p><p>​其中，Ci不是一个固定的值，会根据每一个时刻的变化而变化，由编码器的隐藏向量(h1,…,hm)通过如下公式计算得到：</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image001-17337987461764.png" alt="img"></p><p>​其中，𝛼i𝑗为注意力权值，计算公式如下：</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image001-17337987565385.png" alt="img"></p><p>​其中，</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image001-17337987685056.png" alt="img"></p><p>​其中，𝑠i−1表示解码器第i-1时刻的隐藏层状态，函数F(𝑎, 𝑏)表示计算a和b的相似度。首先计算解码器隐藏层状态和编码器隐藏层状态的相似度，然后对计算出的相似度采用类Softmax函数进行归一化，得到注意力权值，最后注意力权值与编码器隐藏状态相乘求和得到语义向量Ct。</p><h2 id="三、对联生成模型设计"><a href="#三、对联生成模型设计" class="headerlink" title="三、对联生成模型设计"></a>三、对联生成模型设计</h2><h3 id="3-1-Encoder-Decoder-框架结构简介"><a href="#3-1-Encoder-Decoder-框架结构简介" class="headerlink" title="3.1 Encoder-Decoder 框架结构简介"></a>3.1 Encoder-Decoder 框架结构简介</h3><p>​对联生成问题为典型的序列生成问题，这里采用最经典的 Encoder-Decoder框架结构，由于预测句子中下一个词一般需要用到前面已经生成的词，前后词语之间并不是独立的，RNN 同层节点之间相互连接能够体现这种前后词语之间的联系，并且同层节点之间的权值是共享的，因此本文任务选择使用 RNN Encoder-Decoder。一般的 RNN 结构需要将输入压缩成一个固定长度的向量，这就很难处理一些比较长的句子，特别是那些比训练集中语句更长的语句，本文在编码阶段采用的是双向RNN结构——BiGRU，这在语音识别方面已经得到了很有效的应用，解码阶段选择的就是GRU 结构。为了在每次生成输出词语的时候充分利用输入序列携带的信息，使输入序列中的不同词语对输出词语有不同的影响，本文在解码阶段使用了注意力机制。另外，为了体现上下联语句在语义和语境上的一致性，本文在解码的时候将含有上联整句信息的句向量考虑进去，下图是本文建立的对联生成模型的总体结构图。</p><p> <img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-17337988378657.jpg" alt="img"></p><h4 id="3-1-1-输入处理"><a href="#3-1-1-输入处理" class="headerlink" title="3.1.1 输入处理"></a>3.1.1 输入处理</h4><p>​本文任务的基本模式就是，输入上联输出对应的下联，这里的输入上联是汉字组成的序列。很显然，将这个任务转化为深度学习问题，必须将上联的文字符号化输入计算机中。第一步任务就是将序列中汉字转化为一个向量，就是所谓的词向量。一般的词向量在训练时只考虑到词语与其所在训练序列中的前后词语之间的关系，由于对联任务的特殊性，不仅需要考虑前后词语之间的关系，还需要考虑上下联中对应位置的词语之间的联系，于是，在训练词向量的时候将上下联对应位置的字考虑在内，也就是将其加入上下文中，将训练出来的这种词向量称之为对联字向量。</p><h4 id="3-1-2-编码阶段"><a href="#3-1-2-编码阶段" class="headerlink" title="3.1.2 编码阶段"></a>3.1.2 编码阶段</h4><p>​为了体现序列前后词语之间的联系，在编码阶段本文使用的是BiGRU 的结构。门控循环单元神经网络（gated recurrent unit neural network，简称 GRU）是由 Cho 等人在 2014 年提出来的，是 RNN 的衍生物，属于 RNN 的一种变种，与 RNN 的结构本质上并没有什么不同，差异在于计算隐藏层状态的函数。</p><p>​GRU 使用了更新门（update gate）与重置门（reset gate）来控制标准 RNN 的梯度消失的问题，这两个门控向量基本上决定了 GRU 最终输出哪些信息。这两门控机制能够保存长期序列中的信息，且不会随着时间变长而被清除或因与预测不相关而被移除。</p><p>​本文中编码阶段使用的是双向的GRU，由图4.1可以看出，一个前向的GRU，一个反向的 GRU，正向的和反向的 GRU 实际上并没有什么区别，只是输入序列的顺序不同。</p><h4 id="3-1-3-解码阶段"><a href="#3-1-3-解码阶段" class="headerlink" title="3.1.3 解码阶段"></a>3.1.3 解码阶段</h4><p>​解码阶段的任务是根据输入 X 的中间语义表示 C 以及前面生成的历史信息（y1,y2,…,yi-1）来生成 i 时刻要输出的词语 yi，前面说过，解码阶段使用的依然是RNN 的变体 GRU。在基础的 Decoder 中，每个 ci 都一模一样的，并不能加强或者减轻某个字对某个词的作用大小，很明显上联中对应位置的字对当前字生成的影响较大，其他位置的字对当前字生成的影响较小。为了解决这个问题，体现出上联中不同字对于下联中不同词语的影响，在解码过程中应用了 Attention 机制[5]。AM 模型可以说是今年来 NLP 领域中的重要进展之一，其效果在很多场景得到证实。在 Decoder中加入 AM 后，在生成每一个 yi 的时候的中间语义向量 ci 都是不相同的，是根据当前生成字而不断变化的[6]。</p><h3 id="3-2-数据处理部分"><a href="#3-2-数据处理部分" class="headerlink" title="3.2 数据处理部分"></a>3.2 数据处理部分</h3><h4 id="3-2-1-噪声数据摘除"><a href="#3-2-1-噪声数据摘除" class="headerlink" title="3.2.1 噪声数据摘除"></a>3.2.1 噪声数据摘除</h4><p>​数据集来源：<a href="https://github.com/wb14123/couplet-dataset">https://github.com/wb14123/couplet-dataset</a> 此数据集包含了五个文件，将文件按照（test+train）的顺序进行合并[7]。之后发现有14条数据有问题，其中前10个问题为上联，后4个问题为下联。经过对噪声数据进行处理后，最终获得744915条对联数据。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002.png" alt="img"></p><h4 id="3-2-2-添加输入开始与结束标志"><a href="#3-2-2-添加输入开始与结束标志" class="headerlink" title="3.2.2 添加输入开始与结束标志"></a>3.2.2 添加输入开始与结束标志</h4><p>&lt; start&gt; 表示一个输入的开始 </p><p>&lt; end&gt; 表示一个输入的结束</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-17337989826658.png" alt="img"></p><h4 id="3-2-3-建立词库与字典"><a href="#3-2-3-建立词库与字典" class="headerlink" title="3.2.3 建立词库与字典"></a>3.2.3 建立词库与字典</h4><p>​在字典的创建过程中，主要先用一个辅助字典，存储每个词汇出现的频率，然后根据频率排序辅助字典。然后初始化两个字典，遍历辅助字典,可用当前字典（非辅助字典）的长度作为词汇数字标识。 在该过程中，我们还可以根据频率筛选出频率大于一定阈值的词汇，即抛弃低频词汇[8]。</p><p>​词库：由上下联所有字符，可用列表表示</p><p>​字典：建立词汇–&gt;向量，向量–&gt;词汇两个字典。向量在这里可以理解为数字化，最终的目的是向量化。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-17337990023979.png" alt="img"></p><h4 id="3-2-4-数据向量化"><a href="#3-2-4-数据向量化" class="headerlink" title="3.2.4 数据向量化"></a>3.2.4 数据向量化</h4><p>​根据前一步中创建的“词汇–&gt;向量”字典将所有数据向量化。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-173379901873010.jpg" alt="img"></p><h4 id="3-2-5-数据集划分及封装"><a href="#3-2-5-数据集划分及封装" class="headerlink" title="3.2.5 数据集划分及封装"></a>3.2.5 数据集划分及封装</h4><p>​我们总的数据为744915条，按照8:1:1的方式划分训练集，验证集，测试集。数据集的封装主要使用paddlepaddle以及paddlenlp提供的方法,其中paddlenlp主要是进行每个minibath数据的padding操作，统一长度[9]。</p><p>​最终我们得到封装好的训练集、验证集，测试集。以训练集为例，每个元素包括五部分：</p><ol><li>上联输入向量</li><li>输入向量未填充前的长度，用于控制LSTM的隐藏状态是否更新填充位置</li><li>下联输入向量，不包含最后一个位置的元素</li><li>下联输入向量，不包含第一个元素，然后在最后一个扩维，用于loss计算</li><li>下联输入向量的mask向量</li></ol><h2 id="四、模型训练"><a href="#四、模型训练" class="headerlink" title="四、模型训练"></a>四、模型训练</h2><h3 id="4-1-参数设定"><a href="#4-1-参数设定" class="headerlink" title="4.1 参数设定"></a>4.1 参数设定</h3><ul><li>num_layers&#x3D;2:LSTM的层数</li><li>hidden_size&#x3D;128:隐藏层的状态数</li><li>embedding_dim&#x3D;256:嵌入层的维度</li><li>lr&#x3D;0.001:学习率</li><li>log_freq&#x3D;200:每200个batch输入一次日志信息</li><li>max_grad_norm&#x3D;5:梯度裁剪</li><li>optimizer&#x3D;Adam():优化器，不是参数，在这里我们把他看作一个参数</li><li>loss&#x3D;CrossEntropy():损失函数，使用的是带掩码的交叉熵损失函数</li><li>metrics&#x3D;Preplexity():评价准则，困惑度</li></ul><h3 id="4-2-模型训练"><a href="#4-2-模型训练" class="headerlink" title="4.2 模型训练"></a>4.2 模型训练</h3><p>部分关键代码：</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-173379911835411.jpg" alt="img"></p><p>使用model.fit()函数进行训练及验证。</p><p>部分参数设置：</p><ul><li>epcohs&#x3D;20</li><li>eos_id&#x3D;word2id_dict[‘<end>‘]</end></li><li>num_layers&#x3D;2</li><li>dropout_rate&#x3D;0.2</li><li>hidden_size&#x3D;128</li><li>embedding_dim&#x3D;256</li><li>max_grad_norm&#x3D;5</li><li>lr&#x3D;0.001</li><li>log_freq&#x3D;200</li></ul><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-173379914079712.png" alt="img"></p><h3 id="4-3-模型预测"><a href="#4-3-模型预测" class="headerlink" title="4.3 模型预测"></a>4.3 模型预测</h3><p>​模型的预测使用了beam search(束搜索)。常规的搜索方法有greedy search（贪心搜索）和exhaustive search（穷举搜索）。</p><p>​穷举搜索：穷举所有可能的输出结果。例如输出序列长度为3，候选项为4，那么就有4<em>4</em>4&#x3D;64种可能，当输出序列长度为10时，就会有4**10种可能，这种幂级增长对于计算机性能的要求是极高的，耗时耗力。</p><p>​贪心搜索：每次选择概率最大的候选者作为输出。搜索空间小，以局部最优解期望全局最优解，无法保证最终结果是做优的，但是效率高。</p><p>​束搜索：束搜索可以看作是穷举搜索和贪心搜索的折中方案。需要设定一个beam size(束宽)，当设为1时即为贪心搜索，当设为候选项的数量时即为穷举搜索。</p><h3 id="4-4-展示界面搭建"><a href="#4-4-展示界面搭建" class="headerlink" title="4.4 展示界面搭建"></a>4.4 展示界面搭建</h3><p>​展示界面使用Python自带的TKinter包进行搭建，主要包括两个文本框和两个动作按钮。用户输入对联的上联，然后点击相应按钮，系统会提取用户的输入，将其向量化，然后送入训练好的模型中，产生输出，然后显示在另一个文本框中。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-173379917879313.jpg" alt="img"></p><h2 id="五、模型评测"><a href="#五、模型评测" class="headerlink" title="五、模型评测"></a>五、模型评测</h2><h3 id="5-1-loss曲线"><a href="#5-1-loss曲线" class="headerlink" title="5.1 loss曲线"></a>5.1 loss曲线</h3><p>​loss曲线数据由PaddlePaddle提供的接口在训练时保存在log文件中，之后通过可视化工具进行展示。横轴表示训练的minibatch，纵轴表示loss值。</p><p>​通过训练集与验证集的lossqu曲线可以看出，训练在前期收敛较快，训练集后期有波动，但是验证集后期仍为缓慢下降趋势，说明模型的训练效果是不错的。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-173379922392814.png" alt="img"></p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-173379922806515.png" alt="img"></p><h3 id="5-2-困惑度"><a href="#5-2-困惑度" class="headerlink" title="5.2 困惑度"></a>5.2 困惑度</h3><p>​困惑度数据的获取方式同loss。通过训练集与验证集的困惑度曲线，任务模型训练效果可以。但是训练集的困惑度后期呈现为直线，这应该是存在问题的，有待分析解决。我们在测试集上进行了困惑度分析，每个batch的数据困惑度基本一致，说明模型波动较小，效果理想。</p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-173379924722916.png" alt="img"></p><p><img src="/../images/postsImg/%E5%9F%BA%E4%BA%8E%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E8%81%94%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A0%94%E7%A9%B6/clip_image002-173379925096617.png" alt="img"></p><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p>​对联是中华文化一种独特的艺术形式，其上下联之间讲究对仗工整、平仄协调，这要求对联创作者具备丰富的知识储备和深厚的文学素养，因此创作对联对普通人来说稍显困难。对于计算机来说，在自然语言处理领域，对联的生成也是一项比较困难的任务。近年来，深度学习技术快速发展，在如图像识别、语音识别等机器学习领域表现出色，自然语言处理作为机器学习的重要分支，深度学习技术也推动着自然语言处理技术不断发展。</p><p>​本文首先讨论了自动生成对联的研究背景和研究意义，以及对联生成模型的国内外研究现状。介绍了循环神经网络和注意力机制，并且采用基于注意力机制的序列到序列模型对对联生成系统进行进一步研究。掌握了基于编码-解码框架的神经网络模型、注意力机制模型等算法，明确研究方向，舍弃了传统的基于循环神经网络或卷积神经网络的方法，完全使用注意力机制的神经网络结构进行对联的自动生成。结果表明注意力机制在对联的自动生成任务上具有不可替代的作用。</p><h2 id="七、参考文献"><a href="#七、参考文献" class="headerlink" title="七、参考文献"></a>七、参考文献</h2><p>[1]   Manurung, R., Ritchie, G. and Thompson, H. (2012) Using genetic algorithms to create meaningful poetic text. J. Exp. Theor. Artif. Intel., 24, 43–64.</p><p>[2]   Sundermeyer, M., Schlüter, R. and Ney, H. (2012) LSTM Neural Networks for Language Modeling. In Proceedings of Interspeech 2012, Portland, OR, 9–13 September, pp. 601–608. Association for Computational Linguistics, Stroudsburg.</p><p>[3]   Papineni, K., Roukos, S., Ward, T. and Zhu, W.J. (2002) BLEU: a Method for Automatic Evaluation of Machine Translation. In Proceedings of the 40th Annual Meeting on Association for Computational Linguistics, Philadelphia, Pennsylvania, USA, 19–24 July 2002, pp. 311–318. Association for Computational Linguistics, Stroudsburg.</p><p>[4]   王治权.基于注意力机制和改进型 RNN 的 Web 文本情感分析研究[D]. 2018.</p><p>[5]   王哲.基于深度学习技术的中国传统诗歌生成方法研究[D].中国科学技术大学,2017.</p><p>[6]   Koutnik J, Greff K, Gomez F, et al. A clockwork rnn[J]. arXiv preprint arXiv:1402.3511, 2014.</p><p>[7]   蒋锐滢,崔磊,何晶,等.基于主题模型和统计机器翻译方法的中文格律诗自动生成 [J].计算机学报, 2015.</p><p>[8]   Oliveira, H.G., Hervas, R., Diaz, A. and Gervas, P. (2017)Multilingual extension and evaluation of a poetry generator. Nat.Lang. Eng., 23, 929–967.</p><p>[9]   Zhang J, Du J, Dai L. A GRU-based Encoder-Decoder Approach with Attention for Online Handwritten Mathematical Expression Recognition[J]. 2017.</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 循环神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树实验</title>
      <link href="/2024/05/23/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/05/23/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验四-决策树实验"><a href="#实验四-决策树实验" class="headerlink" title="实验四 决策树实验"></a><strong>实验四 决策树实验</strong></h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>1.认识决策树的构建过程；</p><p>2.分析决策树可视化的运算；</p><p>3.掌握决策树的应用。</p><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><p>​决策树是什么？决策树(decision tree)是一种基本的分类与回归方法。举个通俗易懂的例子，如下图所示的流程图就是一个决策树，长方形代表判断模块，椭圆形成代表终止模块，表示已经得出结论，可以终止运行。从判断模块引出的左右箭头称作为分支，它可以达到另一个判断模块或者终止模块。我们还可以这样理解，分类决策树模型是一种描述对实例进行分类的树形结构。决策树由结点和有向边组成。结点有两种类型：内部结点和叶结点。内部结点表示一个特征或属性，叶结点表示一个类。</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209145103826.png" alt="image-20241209145103826"></p><p>​使用决策树做预测需要以下过程：</p><ol><li><p>收集数据：可以使用任何方法。比如想构建一个系统，我们可以从亲朋好友那里获取数据。根据他们考虑的因素和最终的选择结果，就可以得到一些供我们利用的数据了。</p></li><li><p>准备数据：收集完的数据，我们要进行整理，将这些所有收集的信息按照一定规则整理出来，并排版，方便我们进行后续处理。</p></li><li><p>分析数据：可以使用任何方法，决策树构造完成之后，我们可以检查决策树图形是否符合预期。</p></li><li><p>训练算法：这个过程也就是构造决策树，同样也可以说是决策树学习，就是构造一个决策树的数据结构。</p></li><li><p>测试算法：使用经验树计算错误率。当错误率达到了可接收范围，这个决策树就可以投放使用了。</p></li><li><p>使用算法：此步骤可以使用适用于任何监督学习算法，而使用决策树可以更好地理解数据的内在含义。</p></li></ol><h2 id="三、实验材料与工具"><a href="#三、实验材料与工具" class="headerlink" title="三、实验材料与工具"></a>三、实验材料与工具</h2><p>1．电脑一台；</p><p>2．Pycharm。</p><h2 id="四、实验步骤"><a href="#四、实验步骤" class="headerlink" title="四、实验步骤"></a>四、实验步骤</h2><p><strong>1、分析以下数据</strong></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209145712953.png" alt="image-20241209145712953"></p><p>​特征选择</p><p>​特征选择在于选取对训练数据具有分类能力的特征。这样可以提高决策树学习的效率，如果利用一个特征进行分类的结果与随机分类的结果没有很大差别，则称这个特征没有分类能力。扔掉这样的特征对决策树学习的精度影响不大。通常特征选择的标准是信息增益(information gain)或信息增益比，本次实验使用信息增益作为选择特征的标准。那么，什么是信息增益？在讲解信息增益之前，让我们看一组实例，贷款申请样本数据表。</p><p>​希望通过所给的训练数据学习一个贷款申请的决策树，用于对未来的贷款申请进行分类，即当新的客户提出贷款申请时，根据申请人的特征利用决策树决定是否批准贷款申请。</p><p>​特征选择就是决定用哪个特征来划分特征空间。比如，我们通过上述数据表得到两个可能的决策树，分别由两个不同特征的根结点构成。</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209145748807.png" alt="image-20241209145748807"></p><p>​左图所示的根结点的特征是年龄，有3个取值，对应于不同的取值有不同的子结点。右图所示的根节点的特征是工作，有2个取值，对应于不同的取值有不同的子结点。两个决策树都可以从此延续下去。问题是：究竟选择哪个特征更好些？这就要求确定选择特征的准则。直观上，如果一个特征具有更好的分类能力，或者说，按照这一特征将训练数据集分割成子集，使得各个子集在当前条件下有最好的分类，那么就更应该选择这个特征。信息增益就能够很好地表示这一直观的准则。</p><p>​什么是信息增益呢？在划分数据集之后信息发生的变化称为信息增益，知道如何计算信息增益，我们就可以计算每个特征值划分数据集获得的信息增益，获得信息增益最高的特征就是最好的选择。</p><p><strong>2、计算香农熵</strong></p><p>​在可以评测哪个数据划分方式是最好的数据划分之前，我们必须学习如何计算信息增益。集合信息的度量方式称为香农熵或者简称为熵(entropy)，这个名字来源于信息论之父克劳德·香农。</p><p>​熵定义为信息的期望值。在信息论与概率统计中，熵是表示随机变量不确定性的度量。如果待分类的事物可能划分在多个分类之中，则符号xi的信息定义为 ：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209145827471.png" alt="image-20241209145827471"></p><p>​其中p(xi)是选择该分类的概率。上述式中的对数以2为底，也可以e为底(自然对数)。</p><p>​通过上式，我们可以得到所有类别的信息。为了计算熵，我们需要计算所有类别所有可能值包含的信息期望值(数学期望)，通过下面的公式得到：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209145840117.png" alt="image-20241209145840117"></p><p>​其中n是分类的数目。熵越大，随机变量的不确定性就越大。</p><p>​当熵中的概率由数据估计(特别是最大似然估计)得到时，所对应的熵称为经验熵(empirical entropy)。比如有10个数据，一共有两个类别，A类和B类。其中有7个数据属于A类，则该A类的概率即为十分之七。其中有3个数据属于B类，则该B类的概率即为十分之三。这概率是我们根据数据数出来的。我们定义贷款申请样本数据表中的数据为训练数据集D，则训练数据集D的经验熵为H(D)，|D|表示其样本容量，及样本个数。设有K个类Ck, &#x3D; 1,2,3,…,K,|Ck|为属于类Ck的样本个数，因此经验熵公式就可以写为 ：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209145900014.png" alt="image-20241209145900014"></p><p>​根据此公式计算经验熵H(D)，分析贷款申请样本数据表中的数据。最终分类结果只有两类，即放贷和不放贷。根据表中的数据统计可知，在15个数据中，9个数据的结果为放贷，6个数据的结果为不放贷。所以数据集D的经验熵H(D)为：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209145916351.png" alt="image-20241209145916351"></p><p>​经过计算可知，数据集D的经验熵H(D)的值为0.971。</p><p><strong>3、编写代码计算经验熵</strong></p><p>​首先对数据集进行属性标注。</p><ul><li><p>年龄：0代表青年，1代表中年，2代表老年；</p></li><li><p>有工作：0代表否，1代表是；</p></li><li><p>有自己的房子：0代表否，1代表是；</p></li><li><p>信贷情况：0代表一般，1代表好，2代表非常好；</p></li><li><p>类别(是否给贷款)：no代表否，yes代表是。</p><p>​然后创建数据集，并计算经验熵。</p><p>​代码编写如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log  </span><br><span class="line"><span class="keyword">import</span> operator  </span><br><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createDataSet</span>():  </span><br><span class="line">    dataSet = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>]  </span><br><span class="line">              ]  </span><br><span class="line">    labels = [<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;有工作&#x27;</span>,<span class="string">&#x27;有自己的房子&#x27;</span>,<span class="string">&#x27;信贷情况&#x27;</span>]  </span><br><span class="line">    <span class="keyword">return</span> dataSet,labels  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calcShannonEnt</span>(<span class="params">dataSet</span>):  </span><br><span class="line">    numEntires = <span class="built_in">len</span>(dataSet)  </span><br><span class="line">    labelCounts = &#123;&#125;  </span><br><span class="line">    <span class="keyword">for</span> featVec <span class="keyword">in</span> dataSet:  </span><br><span class="line">        currentLabel = featVec[-<span class="number">1</span>]  </span><br><span class="line">        <span class="keyword">if</span> currentLabel <span class="keyword">not</span> <span class="keyword">in</span> labelCounts.keys():  </span><br><span class="line">            labelCounts[currentLabel] = <span class="number">0</span>  </span><br><span class="line">        labelCounts[currentLabel] += <span class="number">1</span>  </span><br><span class="line">    shannonEnt = <span class="number">0.0</span>  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> labelCounts:  </span><br><span class="line">        prob = <span class="built_in">float</span>(labelCounts[key]) / numEntires  </span><br><span class="line">        shannonEnt -= prob * log(prob,<span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> shannonEnt </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dataSet,labels = createDataSet()</span><br><span class="line">    <span class="built_in">print</span>(dataSet)</span><br><span class="line">    <span class="built_in">print</span>(calcShannonEnt(dataSet))</span><br></pre></td></tr></table></figure><p>​代码运行结果如下图所示，代码是先打印训练数据集，然后打印计算的经验熵H(D)，程序计算的结果与我们统计计算的结果是一致的，程序没有问题。</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150622268.png" alt="image-20241209150622268"></p><p><strong>4、计算信息增益</strong></p><p>​在上面，我们已经说过，如何选择特征，需要看信息增益。也就是说，信息增益是相对于特征而言的，信息增益越大，特征对最终的分类结果影响也就越大，我们就应该选择对最终分类结果影响最大的那个特征作为我们的分类特征。</p><p>​条件熵H(Y|X)表示在已知随机变量X的条件下随机变量Y的不确定性，随机变量X给定的条件下随机变量Y的条件熵(conditional entropy)H(Y|X)，定义为X给定条件下Y的条件概率分布的熵对X的数学期望：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150645183.png" alt="image-20241209150645183"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150648200.png" alt="image-20241209150648200"></p><p>​当条件熵中的概率由数据估计(特别是极大似然估计)得到时，所对应的条件熵称为条件经验熵(empirical conditional entropy)。</p><p>​明确了条件熵和经验条件熵的概念。接下来，说说信息增益。前面也提到了，信息增益是相对于特征而言的。所以，特征A对训练数据集D的信息增益g(D,A)，定义为集合D的经验熵H(D)与特征A给定条件下D的经验条件熵H(D|A)之差，即：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150704905.png" alt="image-20241209150704905"></p><p>​熵H(D)与条件熵H(D|A)之差称为互信息(mutual information)。决策树学习中的信息增益等价于训练数据集中类与特征的互信息。</p><p>​设特征A有n个不同的取值{a1,a2,···,an}，根据特征A的取值将D划分为n个子集{D1,D2，···,Dn}，|Di|为Di的样本个数。记子集Di中属于Ck的样本的集合为Dik，即Dik &#x3D; Di ∩ Ck，|Dik|为Dik的样本个数。于是经验条件熵的公式可以写为：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150723981.png" alt="image-20241209150723981"></p><p>​以贷款申请样本数据表为例进行说明。看下年龄这一列的数据，也就是特征A1，一共有三个类别，分别是：青年、中年和老年。我们只看年龄是青年的数据，年龄是青年的数据一共有5个，所以年龄是青年的数据在训练数据集出现的概率是十五分之五，也就是三分之一。同理，年龄是中年和老年的数据在训练数据集出现的概率也都是三分之一。现在我们只看年龄是青年的数据的最终得到贷款的概率为五分之二，因为在五个数据中，只有两个数据显示拿到了最终的贷款，同理，年龄是中年和老年的数据最终得到贷款的概率分别为五分之三、五分之四。所以计算年龄的信息增益，过程如下：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150737040.png" alt="image-20241209150737040"></p><p>​同理，计算其余特征的信息增益g(D,A2)、g(D,A3)和g(D,A4)。分别为：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150748169.png" alt="image-20241209150748169"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150752446.png" alt="image-20241209150752446"></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209150755655.png" alt="image-20241209150755655"></p><p>​最后，比较特征的信息增益，由于特征A3(有自己的房子)的信息增益值最大，所以选择A3作为最优特征。</p><p><strong>5、编写代码计算信息增益</strong></p><p>​我们已经学会了通过公式计算信息增益，接下来编写代码，计算信息增益。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calcShannonEnt</span>(<span class="params">dataSet</span>):  </span><br><span class="line">    numEntires = <span class="built_in">len</span>(dataSet)  </span><br><span class="line">    labelCounts = &#123;&#125;  </span><br><span class="line">    <span class="keyword">for</span> featVec <span class="keyword">in</span> dataSet:  </span><br><span class="line">        currentLabel = featVec[-<span class="number">1</span>]  </span><br><span class="line">        <span class="keyword">if</span> currentLabel <span class="keyword">not</span> <span class="keyword">in</span> labelCounts.keys():  </span><br><span class="line">            labelCounts[currentLabel] = <span class="number">0</span>  </span><br><span class="line">        labelCounts[currentLabel] += <span class="number">1</span>  </span><br><span class="line">    shannonEnt = <span class="number">0.0</span>  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> labelCounts:  </span><br><span class="line">        prob = <span class="built_in">float</span>(labelCounts[key]) / numEntires  </span><br><span class="line">        shannonEnt -= prob * log(prob,<span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> shannonEnt  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createDataSet</span>():  </span><br><span class="line">    dataSet = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>]  </span><br><span class="line">              ]  </span><br><span class="line">    labels = [<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;有工作&#x27;</span>,<span class="string">&#x27;有自己的房子&#x27;</span>,<span class="string">&#x27;信贷情况&#x27;</span>]  </span><br><span class="line">    <span class="keyword">return</span> dataSet,labels  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">splitDataSet</span>(<span class="params">dataSet,axis,value</span>):  </span><br><span class="line">    retDataSet = []  </span><br><span class="line">    <span class="keyword">for</span> featVec <span class="keyword">in</span> dataSet:  </span><br><span class="line">        <span class="keyword">if</span> featVec[axis] == value:  </span><br><span class="line">            reducedFeatVec = featVec[:axis]  </span><br><span class="line">            reducedFeatVec.extend(featVec[axis+<span class="number">1</span>:])  </span><br><span class="line">            retDataSet.append(reducedFeatVec)  </span><br><span class="line">    <span class="keyword">return</span> retDataSet  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chooseBestFeatureToSplit</span>(<span class="params">dataSet</span>):  </span><br><span class="line">    numFeatures = <span class="built_in">len</span>(dataSet[<span class="number">0</span>]) - <span class="number">1</span>  </span><br><span class="line">    baseEntropy = calcShannonEnt(dataSet)  </span><br><span class="line">    bestInfoGain = <span class="number">0.0</span>  </span><br><span class="line">    beatFeature = -<span class="number">1</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numFeatures):  </span><br><span class="line">        featList = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]  </span><br><span class="line">        uniqueVals = <span class="built_in">set</span>(featList)  </span><br><span class="line">        newEntropy = <span class="number">0.0</span>  </span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:  </span><br><span class="line">            subDataSet = splitDataSet(dataSet,i,value)  </span><br><span class="line">            prob = <span class="built_in">len</span>(subDataSet) / <span class="built_in">float</span>(<span class="built_in">len</span>(dataSet))  </span><br><span class="line">            newEntropy += prob * calcShannonEnt(subDataSet)  </span><br><span class="line">        infoGain = baseEntropy - newEntropy  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第%d个特征的增益为%.3f&quot;</span> % (i,infoGain))  </span><br><span class="line">        <span class="keyword">if</span>(infoGain &gt; bestInfoGain):  </span><br><span class="line">            bestInfoGain = infoGain  </span><br><span class="line">            bestFeature = i  </span><br><span class="line">    <span class="keyword">return</span> bestFeature  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    dataSet,labels = createDataSet()  </span><br><span class="line">    <span class="built_in">print</span>(dataSet)  </span><br><span class="line">    <span class="built_in">print</span>(labels)  </span><br><span class="line">    <span class="built_in">print</span>(calcShannonEnt(dataSet))  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最优特征索引值：&quot;</span> + <span class="built_in">str</span>(chooseBestFeatureToSplit(dataSet))) </span><br></pre></td></tr></table></figure><p>​splitDataSet函数是用来选择各个特征的子集的，比如选择年龄(第0个特征)的青年(用0代表)的自己，我们可以调用splitDataSet(dataSet,0,0)这样返回的子集就是年龄为青年的5个数据集。chooseBestFeatureToSplit是选择选择最优特征的函数。运行代码结果如下：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209151321875.png" alt="image-20241209151321875"></p><p>​对比我们自己计算的结果，最优特征的索引值为2，也就是特征A3(有自己的房子)。</p><p>​这样就生成了一个决策树，该决策树只用了两个特征(有两个内部结点)，生成的决策树如下图所示。</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209151335494.png" alt="image-20241209151335494"></p><p>​我们已经学习了从数据集构造决策树算法所需要的子功能模块，包括经验熵的计算和最优特征的选择，其工作原理如下：得到原始数据集，然后基于最好的属性值划分数据集，由于特征值可能多于两个，因此可能存在大于两个分支的数据集划分。第一次划分之后，数据集被向下传递到树的分支的下一个结点。在这个结点上，我们可以再次划分数据。因此我们可以采用递归的原则处理数据集。</p><p>​决策树生成算法递归地产生决策树，直到不能继续下去未为止。这样产生的树往往对训练数据的分类很准确，但对未知的测试数据的分类却没有那么准确，即出现过拟合现象。过拟合的原因在于学习时过多地考虑如何提高对训练数据的正确分类，从而构建出过于复杂的决策树。解决这个问题的办法是考虑决策树的复杂度，对已生成的决策树进行简化。</p><p><strong>6、构建决策树</strong></p><p>​利用求得的结果，由于特征A3(有自己的房子)的信息增益值最大，所以选择特征A3作为根结点的特征。它将训练集D划分为两个子集D1(A3取值为”是”)和D2(A3取值为”否”)。由于D1只有同一类的样本点，所以它成为一个叶结点，结点的类标记为“是”。</p><p>​对D2则需要从特征A1(年龄)，A2(有工作)和A4(信贷情况)中选择新的特征，计算各个特征的信息增益：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209151412616.png" alt="image-20241209151412616"></p><p>​根据计算，选择信息增益最大的特征A2(有工作)作为结点的特征。由于A2有两个可能取值，从这一结点引出两个子结点：一个对应”是”(有工作)的子结点，包含3个样本，它们属于同一类，所以这是一个叶结点，类标记为”是”；另一个是对应”否”(无工作)的子结点，包含6个样本，它们也属于同一类，所以这也是一个叶结点，类标记为”否”。</p><p>​这样就生成了一个决策树，该决策树只用了两个特征(有两个内部结点)，生成的决策树如下图所示。</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209151431267.png" alt="image-20241209151431267"></p><p>​这样我们就使用ID3算法构建出来了决策树，我们使用字典存储决策树的结构：</p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209151442098.png" alt="image-20241209151442098"></p><p>​创建函数majorityCnt统计classList中出现此处最多的元素(类标签)，创建函数createTree用来递归构建决策树。编写代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">majorityCnt</span>(<span class="params">classList</span>):  </span><br><span class="line">    classCount = &#123;&#125;  </span><br><span class="line">    <span class="keyword">for</span> vote <span class="keyword">in</span> classList:  </span><br><span class="line">        <span class="keyword">if</span> vote <span class="keyword">not</span> <span class="keyword">in</span> classCount.keys():classCount[vote] = <span class="number">0</span>  </span><br><span class="line">        classCount[vote] += <span class="number">1</span>  </span><br><span class="line">    sortedClassCount = <span class="built_in">sorted</span>(classCount.items(),key = operator.itemgetter(<span class="number">1</span>),reverse = <span class="literal">True</span>)  </span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createTree</span>(<span class="params">dataSet,labels,featLabels</span>):  </span><br><span class="line">    classList = [example[-<span class="number">1</span>] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]  </span><br><span class="line">    <span class="keyword">if</span> classList.count(classList[<span class="number">0</span>]) == <span class="built_in">len</span>(classList):  </span><br><span class="line">        <span class="keyword">return</span> classList[<span class="number">0</span>]  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(dataSet[<span class="number">0</span>]) == <span class="number">1</span> <span class="keyword">or</span> <span class="built_in">len</span>(labels) == <span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">return</span> majorityCnt(classList)  </span><br><span class="line">    bestFeat = chooseBestFeatureToSplit(dataSet)  </span><br><span class="line">    bestFeatLabel = labels[bestFeat]  </span><br><span class="line">    featLabels.append(bestFeatLabel)  </span><br><span class="line">    myTree = &#123;bestFeatLabel:&#123;&#125;&#125;  </span><br><span class="line">    <span class="keyword">del</span>(labels[bestFeat])  </span><br><span class="line">    featValues = [example[bestFeat] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]  </span><br><span class="line">    uniqueVals = <span class="built_in">set</span>(featValues)  </span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:  </span><br><span class="line">        subLabels = labels[:]  </span><br><span class="line">        myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet,bestFeat,value),subLabels,featLabels)  </span><br><span class="line">    <span class="keyword">return</span> myTree  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    dataSet,labels = createDataSet()  </span><br><span class="line">    <span class="built_in">print</span>(dataSet)  </span><br><span class="line">    <span class="built_in">print</span>(labels)  </span><br><span class="line">    <span class="built_in">print</span>(calcShannonEnt(dataSet))  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最优特征索引值：&quot;</span> + <span class="built_in">str</span>(chooseBestFeatureToSplit(dataSet))) </span><br><span class="line">    featLabels = []  </span><br><span class="line">    myTree = createTree(dataSet,labels,featLabels)  </span><br><span class="line">    <span class="built_in">print</span>(myTree)  </span><br></pre></td></tr></table></figure><p>​递归创建决策树时，递归有两个终止条件：第一个停止条件是所有的类标签完全相同，则直接返回该类标签；第二个停止条件是使用完了所有特征，仍然不能将数据划分仅包含唯一类别的分组，即决策树构建失败，特征不够用。此时说明数据纬度不够，由于第二个停止条件无法简单地返回唯一的类标签，这里挑选出现数量最多的类别作为返回值。</p><h2 id="五、实验代码汇总"><a href="#五、实验代码汇总" class="headerlink" title="五、实验代码汇总"></a>五、实验代码汇总</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log  </span><br><span class="line"><span class="keyword">import</span> operator  </span><br><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createDataSet</span>():  </span><br><span class="line">    dataSet = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;no&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>],  </span><br><span class="line">               [<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;no&#x27;</span>]  </span><br><span class="line">              ]  </span><br><span class="line">    labels = [<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;有工作&#x27;</span>,<span class="string">&#x27;有自己的房子&#x27;</span>,<span class="string">&#x27;信贷情况&#x27;</span>]  </span><br><span class="line">    <span class="keyword">return</span> dataSet,labels  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calcShannonEnt</span>(<span class="params">dataSet</span>):  </span><br><span class="line">    numEntires = <span class="built_in">len</span>(dataSet)  </span><br><span class="line">    labelCounts = &#123;&#125;  </span><br><span class="line">    <span class="keyword">for</span> featVec <span class="keyword">in</span> dataSet:  </span><br><span class="line">        currentLabel = featVec[-<span class="number">1</span>]  </span><br><span class="line">        <span class="keyword">if</span> currentLabel <span class="keyword">not</span> <span class="keyword">in</span> labelCounts.keys():  </span><br><span class="line">            labelCounts[currentLabel] = <span class="number">0</span>  </span><br><span class="line">        labelCounts[currentLabel] += <span class="number">1</span>  </span><br><span class="line">    shannonEnt = <span class="number">0.0</span>  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> labelCounts:  </span><br><span class="line">        prob = <span class="built_in">float</span>(labelCounts[key]) / numEntires  </span><br><span class="line">        shannonEnt -= prob * log(prob,<span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> shannonEnt  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">splitDataSet</span>(<span class="params">dataSet,axis,value</span>):  </span><br><span class="line">    retDataSet = []  </span><br><span class="line">    <span class="keyword">for</span> featVec <span class="keyword">in</span> dataSet:  </span><br><span class="line">        <span class="keyword">if</span> featVec[axis] == value:  </span><br><span class="line">            reducedFeatVec = featVec[:axis]  </span><br><span class="line">            reducedFeatVec.extend(featVec[axis+<span class="number">1</span>:])  </span><br><span class="line">            retDataSet.append(reducedFeatVec)  </span><br><span class="line">    <span class="keyword">return</span> retDataSet  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chooseBestFeatureToSplit</span>(<span class="params">dataSet</span>):  </span><br><span class="line">    numFeatures = <span class="built_in">len</span>(dataSet[<span class="number">0</span>]) - <span class="number">1</span>  </span><br><span class="line">    baseEntropy = calcShannonEnt(dataSet)  </span><br><span class="line">    bestInfoGain = <span class="number">0.0</span>  </span><br><span class="line">    beatFeature = -<span class="number">1</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numFeatures):  </span><br><span class="line">        featList = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]  </span><br><span class="line">        uniqueVals = <span class="built_in">set</span>(featList)  </span><br><span class="line">        newEntropy = <span class="number">0.0</span>  </span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:  </span><br><span class="line">            subDataSet = splitDataSet(dataSet,i,value)  </span><br><span class="line">            prob = <span class="built_in">len</span>(subDataSet) / <span class="built_in">float</span>(<span class="built_in">len</span>(dataSet))  </span><br><span class="line">            newEntropy += prob * calcShannonEnt(subDataSet)  </span><br><span class="line">        infoGain = baseEntropy - newEntropy  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第%d个特征的增益为%.3f&quot;</span> % (i,infoGain))  </span><br><span class="line">        <span class="keyword">if</span>(infoGain &gt; bestInfoGain):  </span><br><span class="line">            bestInfoGain = infoGain  </span><br><span class="line">            bestFeature = i  </span><br><span class="line">    <span class="keyword">return</span> bestFeature  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">majorityCnt</span>(<span class="params">classList</span>):  </span><br><span class="line">    classCount = &#123;&#125;  </span><br><span class="line">    <span class="keyword">for</span> vote <span class="keyword">in</span> classList:  </span><br><span class="line">        <span class="keyword">if</span> vote <span class="keyword">not</span> <span class="keyword">in</span> classCount.keys():classCount[vote] = <span class="number">0</span>  </span><br><span class="line">        classCount[vote] += <span class="number">1</span>  </span><br><span class="line">    sortedClassCount = <span class="built_in">sorted</span>(classCount.items(),key = operator.itemgetter(<span class="number">1</span>),reverse = <span class="literal">True</span>)  </span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createTree</span>(<span class="params">dataSet,labels,featLabels</span>):  </span><br><span class="line">    classList = [example[-<span class="number">1</span>] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]  </span><br><span class="line">    <span class="keyword">if</span> classList.count(classList[<span class="number">0</span>]) == <span class="built_in">len</span>(classList):  </span><br><span class="line">        <span class="keyword">return</span> classList[<span class="number">0</span>]  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(dataSet[<span class="number">0</span>]) == <span class="number">1</span> <span class="keyword">or</span> <span class="built_in">len</span>(labels) == <span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">return</span> majorityCnt(classList)  </span><br><span class="line">    bestFeat = chooseBestFeatureToSplit(dataSet)  </span><br><span class="line">    bestFeatLabel = labels[bestFeat]  </span><br><span class="line">    featLabels.append(bestFeatLabel)  </span><br><span class="line">    myTree = &#123;bestFeatLabel:&#123;&#125;&#125;  </span><br><span class="line">    <span class="keyword">del</span>(labels[bestFeat])  </span><br><span class="line">    featValues = [example[bestFeat] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]  </span><br><span class="line">    uniqueVals = <span class="built_in">set</span>(featValues)  </span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:  </span><br><span class="line">        subLabels = labels[:]  </span><br><span class="line">        myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet,bestFeat,value),subLabels,featLabels)  </span><br><span class="line">    <span class="keyword">return</span> myTree  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#决策树可视化  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNumLeafs</span>(<span class="params">myTree</span>):  </span><br><span class="line">    numLeafs = <span class="number">0</span>  </span><br><span class="line">    firstStr = <span class="built_in">next</span>(<span class="built_in">iter</span>(myTree))  </span><br><span class="line">    secondDict = myTree[firstStr]  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> secondDict.keys():  </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(secondDict[key]).__name__==<span class="string">&#x27;dict&#x27;</span>:  </span><br><span class="line">            numLeafs += getNumLeafs(secondDict[key])  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            numLeafs += <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">return</span> numLeafs  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getTreeDepth</span>(<span class="params">myTree</span>):  </span><br><span class="line">    maxDepth = <span class="number">0</span>  </span><br><span class="line">    firstStr = <span class="built_in">next</span>(<span class="built_in">iter</span>(myTree))  </span><br><span class="line">    secondDict = myTree[firstStr]  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> secondDict.keys():  </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(secondDict[key]).__name__==<span class="string">&#x27;dict&#x27;</span>:  </span><br><span class="line">            thisDepth = <span class="number">1</span> + getTreeDepth(secondDict[key])  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            thisDepth = <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">if</span> thisDepth &gt; maxDepth:maxDepth = thisDepth  </span><br><span class="line">    <span class="keyword">return</span> maxDepth  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plotNode</span>(<span class="params">nodeTxt,centerPt,parentPt,nodeType</span>):  </span><br><span class="line">    arrow_args = <span class="built_in">dict</span>(arrowstyle=<span class="string">&quot;&lt;-&quot;</span>)  </span><br><span class="line">    font = FontProperties(fname=<span class="string">r&quot;c:\windows\fonts\simkai.ttf&quot;</span>,size=<span class="number">14</span>)  </span><br><span class="line">    createPlot.ax1.annotate(nodeTxt,xy=parentPt,xycoords=<span class="string">&#x27;axes fraction&#x27;</span>,  </span><br><span class="line">                           xytext=centerPt,textcoords=<span class="string">&#x27;axes fraction&#x27;</span>,  </span><br><span class="line">                           va=<span class="string">&quot;center&quot;</span>,ha=<span class="string">&quot;center&quot;</span>,bbox=nodeType,arrowprops=arrow_args,fontproperties=font)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plotMidText</span>(<span class="params">cntrPt,parentPt,txtString</span>):  </span><br><span class="line">    xMid = (parentPt[<span class="number">0</span>]-cntrPt[<span class="number">0</span>])/<span class="number">2.0</span> + cntrPt[<span class="number">0</span>]  </span><br><span class="line">    yMid = (parentPt[<span class="number">1</span>]-cntrPt[<span class="number">1</span>])/<span class="number">2.0</span> + cntrPt[<span class="number">1</span>]  </span><br><span class="line">    createPlot.ax1.text(xMid,yMid,txtString,va=<span class="string">&quot;center&quot;</span>,ha=<span class="string">&quot;center&quot;</span>,rotation=<span class="number">30</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plotTree</span>(<span class="params">myTree,parentPt,nodeTxt</span>):  </span><br><span class="line">    decisionNode = <span class="built_in">dict</span>(boxstyle=<span class="string">&quot;sawtooth&quot;</span>,fc=<span class="string">&quot;0.8&quot;</span>)  </span><br><span class="line">    leafNode = <span class="built_in">dict</span>(boxstyle=<span class="string">&quot;round4&quot;</span>,fc=<span class="string">&quot;0.8&quot;</span>)  </span><br><span class="line">    numLeafs = getNumLeafs(myTree)  </span><br><span class="line">    depth = getTreeDepth(myTree)  </span><br><span class="line">    firstStr = <span class="built_in">next</span>(<span class="built_in">iter</span>(myTree))  </span><br><span class="line">    cntrPt = (plotTree.x0ff + (<span class="number">1.0</span> + <span class="built_in">float</span>(numLeafs))/<span class="number">2.0</span>/plotTree.totalW,plotTree.y0ff)  </span><br><span class="line">    plotMidText(cntrPt,parentPt,nodeTxt)  </span><br><span class="line">    plotNode(firstStr,cntrPt,parentPt,decisionNode)  </span><br><span class="line">    secondDict = myTree[firstStr]  </span><br><span class="line">    plotTree.y0ff = plotTree.y0ff - <span class="number">1.0</span>/plotTree.totalD  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> secondDict.keys():  </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(secondDict[key]).__name__==<span class="string">&#x27;dict&#x27;</span>:  </span><br><span class="line">            plotTree(secondDict[key],cntrPt,<span class="built_in">str</span>(key))  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            plotTree.x0ff = plotTree.x0ff + <span class="number">1.0</span>/plotTree.totalW  </span><br><span class="line">            plotNode(secondDict[key],(plotTree.x0ff,plotTree.y0ff),cntrPt,leafNode)  </span><br><span class="line">            plotMidText((plotTree.x0ff,plotTree.y0ff),cntrPt,<span class="built_in">str</span>(key))  </span><br><span class="line">    plotTree.y0ff = plotTree.y0ff + <span class="number">1.0</span>/plotTree.totalD  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createPlot</span>(<span class="params">inTree</span>):  </span><br><span class="line">    fig = plt.figure(<span class="number">1</span>,facecolor=<span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line">    fig.clf()  </span><br><span class="line">    axprops = <span class="built_in">dict</span>(xticks=[],yticks=[])  </span><br><span class="line">    createPlot.ax1 = plt.subplot(<span class="number">111</span>,frameon=<span class="literal">False</span>,**axprops)  </span><br><span class="line">    plotTree.totalW = <span class="built_in">float</span>(getNumLeafs(inTree))  </span><br><span class="line">    plotTree.totalD = <span class="built_in">float</span>(getTreeDepth(inTree))  </span><br><span class="line">    plotTree.x0ff = -<span class="number">0.5</span>/plotTree.totalW;plotTree.y0ff = <span class="number">1.0</span>;  </span><br><span class="line">    plotTree(inTree,(<span class="number">0.5</span>,<span class="number">1.0</span>), <span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">    plt.show()  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#分类  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">classify</span>(<span class="params">inputTree,featLabels,testVec</span>):  </span><br><span class="line">    firstStr = <span class="built_in">next</span>(<span class="built_in">iter</span>(inputTree))  </span><br><span class="line">    secondDict = inputTree[firstStr]  </span><br><span class="line">    featIndex = featLabels.index(firstStr)  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> secondDict.keys():  </span><br><span class="line">        <span class="keyword">if</span> testVec[featIndex] == key:  </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(secondDict[key]).__name__ == <span class="string">&#x27;dict&#x27;</span>:  </span><br><span class="line">                classLabel = classify(secondDict[key],featLabels,testVec)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                classLabel = secondDict[key]  </span><br><span class="line">    <span class="keyword">return</span> classLabel  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#存储  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">storeTree</span>(<span class="params">inputTree,filename</span>):  </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fw:  </span><br><span class="line">        pickle.dump(inputTree,fw)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#载入  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">grabTree</span>(<span class="params">filename</span>):  </span><br><span class="line">    fr = <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> pickle.load(fr)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    dataSet,labels = createDataSet()  </span><br><span class="line">    <span class="built_in">print</span>(dataSet)  </span><br><span class="line">    <span class="built_in">print</span>(labels)  </span><br><span class="line">    <span class="built_in">print</span>(calcShannonEnt(dataSet))  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最优特征索引值：&quot;</span> + <span class="built_in">str</span>(chooseBestFeatureToSplit(dataSet)))  </span><br><span class="line">    featLabels = []  </span><br><span class="line">    myTree = createTree(dataSet,labels,featLabels)  </span><br><span class="line">    <span class="built_in">print</span>(myTree)  </span><br><span class="line">    createPlot(myTree)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">#测试  </span></span><br><span class="line">    test = [<span class="number">0</span>,<span class="number">0</span>]  </span><br><span class="line">    result = classify(myTree,featLabels,test)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n测试0，0的决策树结果:&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> result == <span class="string">&#x27;yes&#x27;</span>:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发放贷款&quot;</span>)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;不予贷款&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">#存储决策树  </span></span><br><span class="line">    storeTree(myTree,<span class="string">&#x27;classifierStore.txt&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">#载入决策树  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n载入决策树：&quot;</span>)  </span><br><span class="line">    loadMyTree = grabTree(<span class="string">&#x27;classifierStore.txt&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(loadMyTree)  </span><br></pre></td></tr></table></figure><p><strong>运行代码截图</strong></p><p><img src="/../images/postsImg/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E9%AA%8C/image-20241209152040685.png" alt="image-20241209152040685"></p><h2 id="六、实验结论"><a href="#六、实验结论" class="headerlink" title="六、实验结论"></a>六、实验结论</h2><p>​ID3算法使用信息增益进行特征选择，集合D的经验熵H(D)与特征A给定条件下D的经验条件熵H(D|A)之差。特征所对应的信息增益值最大，该特征就为最优特征，也就是说信息增益越大，越应该放在决策树的上层。</p><p>​利用递归方法建树，每次对象为当前最优特征。</p><p>​递归函数的第一个停止条件是所有的类标签都相同，递归函数第二个停止条件是使用完数据集中所有的特征，即数据集不能继续划分；字典变量myTree储存了树的所有信息，bestFeature则是当前最优特征。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习论文阅读报告</title>
      <link href="/2024/05/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/"/>
      <url>/2024/05/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习论文阅读报告"><a href="#深度学习论文阅读报告" class="headerlink" title="深度学习论文阅读报告"></a>深度学习论文阅读报告</h1><h2 id="一、论文背景与意义"><a href="#一、论文背景与意义" class="headerlink" title="一、论文背景与意义"></a>一、论文背景与意义</h2><h3 id="1-1论文简介"><a href="#1-1论文简介" class="headerlink" title="1.1论文简介"></a>1.1论文简介</h3><p>名称：基于 Bert-BiLSTM混合模型的社交媒体虚假信息识别研究</p><p>作者：冯由玲，康鑫，周金娉，李军</p><p>来源：《情报科学》期刊2024-01-29</p><h3 id="1-2论文背景与重要性"><a href="#1-2论文背景与重要性" class="headerlink" title="1.2论文背景与重要性"></a>1.2论文背景与重要性</h3><p><strong>论文背景</strong></p><p>​当今社会背景下随着互联网的深度普及和技术的不断提升，社交媒体中的真伪信息鱼龙混杂，而虚假信息一旦被接受，便很难被更正，这将对公众认知产生严重负面影响。因此，虚假信息也被世界经济论坛列为对未来社会的主要威胁研究社交媒体平台评论信息特征及真伪识别问题迫在眉睫。</p><p><strong>论文主题</strong></p><p>​Twitter平台中疫情主题相关推文的虚假信息识别研究</p><p><strong>论文研究的重要性</strong></p><ul><li>提高信息识别的准确性</li><li>加速信息处理速度</li><li>促进社会舆论的监控</li><li>推动深度学习在信息安全领域的应用</li></ul><h3 id="1-3论文结构"><a href="#1-3论文结构" class="headerlink" title="1.3论文结构"></a>1.3论文结构</h3><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/%E8%AE%BA%E6%96%87%E7%BB%93%E6%9E%84.png" alt="论文结构"></p><h2 id="二、论文分析"><a href="#二、论文分析" class="headerlink" title="二、论文分析"></a>二、论文分析</h2><h3 id="2-1相关研究"><a href="#2-1相关研究" class="headerlink" title="2.1相关研究"></a>2.1相关研究</h3><p>​虚假信息识别是一种通过构建模型的文本分类任务，通过对不同标签的文本内容进行特征提取，将文本分为虚假信息类和非虚假信息类。目前，学者们针对虚假信息识别的手段主要有三种：</p><ol><li>基于传统方法的文本特征识别：费时费力，覆盖面窄。</li><li>基于机器学习算法的识别：对数据特征要求高，人工处理费时费力，普适性较弱。</li><li>基于深度学习算法的识别：Bert预训练，融合双向长短时记忆网络算法(BiLSTM)，构建模型Bert-BiLSTM混合模型，识别虚假疫情信息。</li></ol><h3 id="2-2理论研究设计"><a href="#2-2理论研究设计" class="headerlink" title="2.2理论研究设计"></a>2.2理论研究设计</h3><p>​LDA主题词模型：分析文本中隐含主题和关键信息</p><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/image-20241210102201168.png" alt="image-20241210102201168"></p><p>​Bert预处理方法：捕捉文本间的语义关系</p><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/image-20241210102227536.png" alt="image-20241210102227536"></p><p>​BiLSTM算法：以前向和后向两个方向处理数据，捕获序列数据中的动态时间关系</p><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/image-20241210102239988.png" alt="image-20241210102239988"></p><h3 id="2-3LDA特征分析"><a href="#2-3LDA特征分析" class="headerlink" title="2.3LDA特征分析"></a>2.3LDA特征分析</h3><p>​文本长度分析：真实信息比虚假信息的文本长度更长</p><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/image-20241210102400259.png" alt="image-20241210102400259"></p><p>​数据情感分析：虚假信息表述方式相对积极，对疫情信息的整体情感比真实信息更加乐观。 虚假信息相对真实信息情感得分较高。</p><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/image-20241210102416484.png" alt="image-20241210102416484"></p><p>​将数据使用正则表达式过滤虚词，通过NLTK对数据进行词干提取，得到归一化的文本数据，分别提取其中真实数据和虚假数据。</p><p>​分别基于真实信息的LDA模型构建和基于虚假信息的LDA模型构建,分析出两者在内容特征、表述特征和主题特征三个维度的主要差别：</p><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/image-20241210102515468.png" alt="image-20241210102515468"></p><h3 id="2-4Bert-BiLSTM模型实验"><a href="#2-4Bert-BiLSTM模型实验" class="headerlink" title="2.4Bert-BiLSTM模型实验"></a>2.4Bert-BiLSTM模型实验</h3><ol><li>机器学习模型构建:运用 TF-IDF 和 Bert 将文本数据进行向量化处理后，分别引入到SVM（支持向量机）和RF（随机森林）。</li><li>深度学习模型构建:采用Keras对文本进行预处理，添加BiLSTM层（双向长短时记忆网络）和全连接层，选取激活函数Sigmoid对模型进行二分类。</li><li>Bert模型参数优化:选取Bert作为预训练模型，参数Batch size设置为128，最大长度设置为512，并开启了最大填充以契合深度学习模型。</li></ol><h3 id="2-5结果分析"><a href="#2-5结果分析" class="headerlink" title="2.5结果分析"></a>2.5结果分析</h3><p>​评价指标：准确率、精确率、召回率、F1值</p><p>​准确率评估预测正确的比例；精确率评估预测正例的查准率；召回率评估真实正例的查全率；F1&#x3D;（2<em>精确率</em>召回率）&#x2F; （精确率+召回率）</p><p>​<strong>基于传统编码算法的模型评估</strong></p><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/image-20241210102725770.png" alt="image-20241210102725770"></p><p>​支持向量机SVM作为传统机器学习算法表现较差，集成机器学习算法随机森林RF表现较好，深度学习模型 BiLSTM 表现最佳，准确率高达 95.7%，这反映了 BiLSTM 在处理较长文本数据时识别效果更好。</p><p>​<strong>融合Bert预处理的模型评估</strong></p><p><img src="/../images/postsImg/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/image-20241210102747593.png" alt="image-20241210102747593"></p><p>​对于 Bert 预处理后的数据， BiLSTM 有最好的表现并且优于传统预处理方式下的三种模型。</p><p>​总的来说，与传统预处理方式相比，Bert-BiLSTM 模型在精确率上提高了 1%。</p><h2 id="三、见解与启示"><a href="#三、见解与启示" class="headerlink" title="三、见解与启示"></a>三、见解与启示</h2><p><strong>优势</strong></p><ul><li>多主题低成本：对 Bert 模型进行了迁移构建了混合模型，相对于现有虚假疫情信息识别方法，该模型能对多主题英文文本进行低成本有效识别。</li><li>鲁棒性好：模型的健壮性较好，可以扩展到其他领域复杂主题虚假信息的研究中。</li><li>小规模数据集：运用 LDA 主题模型探究了疫情信息的特征，在小规模数据集上以较低成本实现了多主题数据的有效识别，为信息疫情治理提供了高效的解决方案。</li><li>对比试验：通过多方面对比使用，可靠性和真实性较高。</li></ul><p><strong>缺陷</strong></p><ul><li>数据集问题：当前使用的数据集长度较短，导致Bert模型需填充过多无效数据，影响性能。建议未来研究使用更长的文本数据。</li><li>仅限英文平台：中文社交媒体平台的虚假疫情信息数据量过小，本文仅针对英文社交媒体平台数据进行了分析。</li><li>算法测试限制：由于实验条件和数据限制，论文只测试了几种基本的机器学习模型。未来研究可以探索更多适合的算法，以优化虚假信息的识别效果。</li><li>数据忽略表情元素：在基于LDA进行疫情信息特征分析时，通过正则表达式清洗掉原始数据中的大量链接锚和表情符号，得到本文的初始数据。清洗掉表情符号会对结果造成一定影响，现代社会表情符号在语句中的作用也非常重要。</li></ul><h2 id="四、结论"><a href="#四、结论" class="headerlink" title="四、结论"></a>四、结论</h2><p><strong>价值</strong></p><ul><li>降低成本：该混合模型可以在资源受限环境进行精准识别，有利于降低识别成本</li><li>跨领域应用：研究成果不仅限于疫情信息，还可能扩展到其他类型的社交媒体虚假信息识别</li></ul><p><strong>意义</strong></p><p>​本文的研究成果对于减少社交媒体上虚假疫情信息的传播具有重要价值，有助于增强公众对健康信息的正确理解，同时对信息疫情治理提供了有效的技术解决方案。此外，研究还为类似问题提供了方法论的参考，具有广泛的应用前景和社会影响。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穷举搜索实验</title>
      <link href="/2024/05/06/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/05/06/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验三-穷举的魅力"><a href="#实验三-穷举的魅力" class="headerlink" title="实验三 穷举的魅力"></a>实验三 穷举的魅力</h1><h2 id="一、数据结构简介"><a href="#一、数据结构简介" class="headerlink" title="一、数据结构简介"></a>一、数据结构简介</h2><ol><li><p>树</p><p>​树有多个节点，用以存储元素。某些节点之间存在一定的关系，可用连线表示。</p><p><img src="/../images/postsImg/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/image-20241210091024345.png" alt="image-20241210091024345"></p></li><li><p>图</p><p>​图包括有向图和无向图，在此涉及的是无向连通图，在无向图中，顶点之间的边是没有方向的。</p><p><img src="/../images/postsImg/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/image-20241210091120844.png" alt="image-20241210091120844"></p></li><li><p>栈</p><pre><code>   栈的特点是插入和删除操作只能在一端进行，他按照先进后出的原则存储数据。</code></pre><p><img src="/../images/postsImg/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/image-20241210091132541.png" alt="image-20241210091132541"></p></li><li><p>队列</p><p>​    优先队列的区别是队列元素被赋予了优先级，插入元素未必直接插入队尾，而是按照优先级进行存取，删除元素时也是优先级最高的元素被删除。</p><p>​    <img src="/../images/postsImg/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/image-20241210091144620.png" alt="image-20241210091144620"></p></li></ol><h2 id="二、搜索算法"><a href="#二、搜索算法" class="headerlink" title="二、搜索算法"></a>二、搜索算法</h2><ol><li><p>搜索算法–DFS</p><p> DFS算法常用于对树或者图进行遍历。深度优先搜索会尽可能深得搜索树或者图的分支直到树或者图的所有节点均被访问。</p></li><li><p>搜索算法–BFS</p><p> BFS算法常用于对树或者图进行遍历。广度优先搜索会尽可能宽得搜索树或者图的分支直到树或者图的所有节点均被访问。</p><p>​</p></li></ol><h2 id="三、七桥问题"><a href="#三、七桥问题" class="headerlink" title="三、七桥问题"></a>三、七桥问题</h2><p>​河上有两个小岛，有七座桥把两个岛以及河岸联系起来，一个步行者如何不重复的，不遗漏的一次走完所有桥并且最终回到出发点。  </p><p><img src="/../images/postsImg/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/image-20241210091340866.png" alt="image-20241210091340866"></p><p><strong>七桥问题解法</strong></p><p>首先我们将七桥问题转换为一个图问题。</p><p><img src="/../images/postsImg/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/image-20241210091404810.png" alt="image-20241210091404810"></p><p>代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#七桥问题:</span></span><br><span class="line">vertex = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">v2edge = [[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;g&#x27;</span>],[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line">v2v = [[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_bridge</span>(<span class="params">vs,edg_num,v_path,edge_path</span>):</span><br><span class="line">    v_top = v_path[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> v_top == vs <span class="keyword">and</span> edg_num == <span class="built_in">len</span>(edge_path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;起点是：&quot;</span>,vertex[vs])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;依次通过的桥为：&quot;</span>,edge_path)</span><br><span class="line">    out_degree = <span class="built_in">len</span>(v2edge[v_top])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(out_degree):</span><br><span class="line">        <span class="keyword">if</span> v2edge[v_top][i] <span class="keyword">in</span> edge_path:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        v_path.append(v2v[v_top][i])</span><br><span class="line">        edge_path.append(v2edge[v_top][i])</span><br><span class="line">        dfs_bridge(vs,edg_num,v_path,edge_path)</span><br><span class="line">        v_path.pop()</span><br><span class="line">        edge_path.pop()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vertex)):</span><br><span class="line">    dfs_bridge(vs=i,edg_num=<span class="number">7</span>,v_path=[i],edge_path=[])</span><br></pre></td></tr></table></figure><h2 id="四、旅行商问题"><a href="#四、旅行商问题" class="headerlink" title="四、旅行商问题"></a>四、旅行商问题</h2><p>​    选择一条旅行路径，该路径的限制是每个城市只能去一次并且不能漏掉某个城市，最后回到原点。</p><p><img src="/../images/postsImg/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/image-20241210091745259.png" alt="image-20241210091745259"></p><p><strong>七桥问题解法</strong></p><p>将城市看作顶点，将城市之间的路径看成边。 </p><p><img src="/../images/postsImg/%E7%A9%B7%E4%B8%BE%E6%90%9C%E7%B4%A2%E5%AE%9E%E9%AA%8C/image-20241210091824917.png" alt="image-20241210091824917"></p><p>代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#旅行社问题：</span></span><br><span class="line">vertex = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;S&#x27;</span>]</span><br><span class="line">v2edge = [[<span class="number">10</span>,<span class="number">8</span>],[<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>],[<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>],[<span class="number">5</span>,<span class="number">2</span>,<span class="number">10</span>],[<span class="number">3</span>,<span class="number">7</span>,<span class="number">10</span>]]</span><br><span class="line">v2v = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_TSP</span>(<span class="params">vs,v_num,v_path,dis,min_dis</span>):</span><br><span class="line">    v_top = v_path[-<span class="number">1</span>]</span><br><span class="line">    out_degree = <span class="built_in">len</span>(v2edge[v_top])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(out_degree):</span><br><span class="line">        vs_i = v2v[v_top][i]</span><br><span class="line">        <span class="keyword">if</span> vs_i == vs:</span><br><span class="line">            <span class="keyword">if</span> v_num == <span class="built_in">len</span>(v_path) <span class="keyword">and</span> dis + v2edge[v_top][i] &lt; min_dis[<span class="number">0</span>]:</span><br><span class="line">                min_dis[<span class="number">0</span>] = dis + v2edge[v_top][i]</span><br><span class="line">                new_path = []</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> v_path:</span><br><span class="line">                    new_path.append(vertex[item])</span><br><span class="line">                new_path.append(vertex[vs_i])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;new distance:&quot;</span>,min_dis[<span class="number">0</span>],<span class="string">&quot;new path:&quot;</span>,new_path)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> vs_i <span class="keyword">in</span> v_path:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        v_path.append(v2v[v_top][i])</span><br><span class="line">        dfs_TSP(vs,v_num,v_path,dis + v2edge[v_top][i],min_dis)</span><br><span class="line">        v_path.pop()</span><br><span class="line">min_dis = [<span class="number">10000</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vertex)):</span><br><span class="line">    dfs_TSP(vs=i,v_num=<span class="number">5</span>,v_path=[i],dis=<span class="number">0</span>,min_dis=min_dis)</span><br></pre></td></tr></table></figure><h2 id="五、实验结论"><a href="#五、实验结论" class="headerlink" title="五、实验结论"></a>五、实验结论</h2><p><strong>穷举搜索法的优点</strong></p><ul><li>直观易懂：穷举搜索法通常基于问题的直接描述，易于理解和实现。</li><li>正确性保证：由于穷举搜索法会检查所有可能的解，因此它能够确保找到问题的最优解（如果存在的话）。</li><li>适用性广泛：这种方法适用于许多问题，特别是那些没有更简单或更有效算法可用的问题。</li></ul><p><strong>穷举搜索法的缺点</strong></p><ul><li>计算量大：穷举搜索法需要检查所有可能的解，因此计算量通常很大，尤其是在问题规模较大时。</li><li>效率低下：由于需要检查大量解，穷举搜索法通常非常耗时，可能在现实应用中不可行。</li><li>资源消耗多：在处理大规模问题时，穷举搜索法可能需要大量的内存和计算资源。</li></ul><p><strong>使用穷举搜索法需要注意的问题</strong></p><ul><li>问题规模：在使用穷举搜索法之前，需要仔细评估问题的规模。如果问题规模太大，穷举搜索法可能不是一个好选择。</li><li>优化技巧：尽管穷举搜索法本身可能效率低下，但可以通过一些优化技巧（如剪枝、排序、哈希等）来减少计算量和提高效率。</li><li>利用问题特性：在某些情况下，可以利用问题的特性（如对称性、单调性等）来减少搜索空间或优化搜索过程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索算法实验</title>
      <link href="/2024/04/22/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/04/22/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验二-搜索算法实验"><a href="#实验二-搜索算法实验" class="headerlink" title="实验二 搜索算法实验"></a><strong>实验二 搜索算法实验</strong></h1><p>​对下面这个有向图进行广度优先搜索和深度优先搜索</p><p><img src="/../images/postsImg/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/image-20241209143655870.png" alt="image-20241209143655870"></p><p>​用字典来表示整个图，图由多个节点组成。将节点与其所有邻近节点的关系用键值对来表示，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[<span class="string">&quot;A&quot;</span>] = [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;F&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;B&quot;</span>] = [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;D&quot;</span>] = [<span class="string">&quot;C&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;F&quot;</span>] = [<span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;C&quot;</span>] = []</span><br><span class="line">graph[<span class="string">&quot;E&quot;</span>] = []</span><br><span class="line">graph[<span class="string">&quot;G&quot;</span>] = []</span><br><span class="line">graph[<span class="string">&quot;H&quot;</span>] = []</span><br></pre></td></tr></table></figure><p>​键表示每个节点，值是一个数组，其中包含了键的所有邻近节点，这里的邻近节点是指从键所表示的节点出发，箭头所指向的其他节点。没有邻近节点的键所对应的值为空列表。</p><h2 id="一、广度优先搜索"><a href="#一、广度优先搜索" class="headerlink" title="一、广度优先搜索"></a><strong>一、广度优先搜索</strong></h2><p>​使用函数deque来创建一个双端列表，可以实现在列表两端添加(append)和弹出(pop)元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">search_queue = deque()     <span class="comment">#创建一个节点列表</span></span><br><span class="line">search_queue += graph[<span class="string">&quot;A&quot;</span>]     <span class="comment">#表示将&quot;A&quot;的相邻节点都添加到节点列表中</span></span><br></pre></td></tr></table></figure><p>•我们指定 “A” 为起点，”G” 为终点。</p><p>•需要一个 searched 数组来保存搜索过的节点，防止同一个节点被多次搜索。</p><p>•每次从节点列表的最左边取出节点。</p><p><strong>代码运行结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行上述代码，可以得到输出：</span></span><br><span class="line">B D F C E C G </span><br><span class="line">find the destination!</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>​根据节点的输出顺序就可以知道搜索顺序符合广度优先搜索的规则。</p><h2 id="二、深度优先搜索"><a href="#二、深度优先搜索" class="headerlink" title="二、深度优先搜索"></a><strong>二、深度优先搜索</strong></h2><p>​只需将上面代码中的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node = search_queue.popleft() <span class="comment"># 取出节点列表中最左边的节点</span></span><br><span class="line"><span class="comment">#改为如下语句</span></span><br><span class="line">node = search_queue.pop() <span class="comment"># 取出节点列表中最右边的节点</span></span><br></pre></td></tr></table></figure><p>​因为广度优先搜索和深度优先搜索的区别就只是选择哪一个候补节点作为下一个节点的基准不同。</p><p><strong>代码运行结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行上述代码，可以得到输出：</span></span><br><span class="line">F H G</span><br><span class="line">find the destination!</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>​根据节点的输出顺序就可以知道搜索顺序符合深度优先搜索的规则。</p><h2 id="三、实验作业"><a href="#三、实验作业" class="headerlink" title="三、实验作业"></a><strong>三、实验作业</strong></h2><p>​代码实现使用深度优先搜索和广度优先搜索分别找到从A到I的路径</p><p><img src="/../images/postsImg/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/image-20241209144243070.png" alt="image-20241209144243070"></p><h2 id="四、深度优先代码"><a href="#四、深度优先代码" class="headerlink" title="四、深度优先代码"></a>四、深度优先代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个图</span></span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[<span class="string">&quot;I&quot;</span>] = []</span><br><span class="line">graph[<span class="string">&quot;H&quot;</span>] = [<span class="string">&quot;I&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;G&quot;</span>] = [<span class="string">&quot;I&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;F&quot;</span>] = [<span class="string">&quot;E&quot;</span>, <span class="string">&quot;H&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;E&quot;</span>] = [<span class="string">&quot;H&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;D&quot;</span>] = [<span class="string">&quot;E&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;C&quot;</span>] = [<span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;B&quot;</span>] = [<span class="string">&quot;F&quot;</span>]</span><br><span class="line">graph[<span class="string">&quot;A&quot;</span>] = [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#深度优先搜索</span></span><br><span class="line">search_queue = deque()</span><br><span class="line">search_queue += graph[<span class="string">&quot;A&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">start_node</span>):</span><br><span class="line">    search_queue = deque()</span><br><span class="line">    search_queue += graph[start_node]</span><br><span class="line">    searched = []</span><br><span class="line">    <span class="keyword">while</span> search_queue:</span><br><span class="line">        node = search_queue.pop()</span><br><span class="line">        <span class="built_in">print</span>(node,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node <span class="keyword">in</span> searched:</span><br><span class="line">            <span class="keyword">if</span> node == <span class="string">&quot;I&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\nfind the destination&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                search_queue += graph[node]</span><br><span class="line">                searched.append(node)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(search(<span class="string">&quot;A&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>运行结果截图</strong></p><p><img src="/../images/postsImg/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/image-20241209144503995.png" alt="image-20241209144503995"></p><h2 id="五、广度优先代码"><a href="#五、广度优先代码" class="headerlink" title="五、广度优先代码"></a>五、广度优先代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#广度优先搜索</span></span><br><span class="line">search_queue = deque()</span><br><span class="line">search_queue += graph[<span class="string">&quot;A&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">start_node</span>):</span><br><span class="line">    search_queue = deque()</span><br><span class="line">    search_queue += graph[start_node]</span><br><span class="line">    searched = []</span><br><span class="line">    <span class="keyword">while</span> search_queue:</span><br><span class="line">        node = search_queue.popleft()</span><br><span class="line">        <span class="built_in">print</span>(node,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node <span class="keyword">in</span> searched:</span><br><span class="line">            <span class="keyword">if</span> node == <span class="string">&quot;I&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\nfind the destination&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                search_queue += graph[node]</span><br><span class="line">                searched.append(node)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(search(<span class="string">&quot;A&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>运行结果截图</strong></p><p><img src="/../images/postsImg/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/image-20241209144609968.png" alt="image-20241209144609968"></p><h2 id="六、实验结论"><a href="#六、实验结论" class="headerlink" title="六、实验结论"></a>六、实验结论</h2><p>​本次实验使用了collections.deque。</p><p>​collections.deque: 是一个双端队列，它允许我们在两端进行插入和删除操作。这在广度优先搜索中非常有用，因为它允许我们按照进入队列的顺序访问节点。deque的构造函数只有一个参数，即一个可迭代对象，如列表、元组等。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归实验</title>
      <link href="/2024/03/12/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/03/12/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验一-一元线性回归"><a href="#实验一-一元线性回归" class="headerlink" title="实验一 一元线性回归"></a><strong>实验一 一元线性回归</strong></h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>1.掌握最小二乘法的代码实现；</p><p>2.理解一元线性回归方程的收敛过程；</p><p>3.使用库函数实现一元线性回归。</p><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142538941-17337255444221.png" alt="image-20241209142538941"></p><p>​针对表格中的数据，使用最小二乘法分析得到最佳线性回归方程</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142627925-17337255894242.png" alt="image-20241209142627925"></p><p>​并求得最终的损失函数</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142639614-17337256009253.png" alt="image-20241209142639614"></p><h2 id="三、实验材料与工具"><a href="#三、实验材料与工具" class="headerlink" title="三、实验材料与工具"></a>三、实验材料与工具</h2><p>1.电脑一台；</p><p>2.Pycharm；</p><h2 id="四、实验步骤"><a href="#四、实验步骤" class="headerlink" title="四、实验步骤"></a>四、实验步骤</h2><p>1.引入相应的工具包并设置中文字体</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142732029-17337256531894.png" alt="image-20241209142732029"></p><p>2.借助pandas库读取数据集</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142741616.png" alt="image-20241209142741616"></p><p>3.在坐标系中打印出散点图</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142815506.png" alt="image-20241209142815506"></p><p>4.计算损失函数</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142829897.png" alt="image-20241209142829897"></p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142837662.png" alt="image-20241209142837662"></p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142847043.png" alt="image-20241209142847043"></p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142851061.png" alt="image-20241209142851061"></p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142854764.png" alt="image-20241209142854764"></p><p>5.绘制回归线</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142903010.png" alt="image-20241209142903010"></p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142905979.png" alt="image-20241209142905979"></p><p>6.使用sklearn库实现一元线性回归</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142914537.png" alt="image-20241209142914537"></p><p>7.调用库函数训练模型</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142920013.png" alt="image-20241209142920013"></p><p>8.输出回归方程并预测任意温度下火灾的受灾面积</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142928526.png" alt="image-20241209142928526"></p><p>完整代码：</p><p><img src="/../images/postsImg/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E9%AA%8C/image-20241209142938979.png" alt="image-20241209142938979"></p><h2 id="五、实验结论"><a href="#五、实验结论" class="headerlink" title="五、实验结论"></a>五、实验结论</h2><p>​sklearn库实现一元线性回归</p><p>​LinearRegression()帮助我们根据给定的输入特征和目标变量拟合一个线性模型，以便进行预测和分析。</p><p>​fit_intercept（默认为True）</p><p>​fit_intercept参数控制是否在模型中包含截距（偏置）项。截距项用于解决数据中的偏差问题，确保回归线能够在目标变量不为零时仍具有适当的截距。当fit_intercept为True时，模型会自动添加截距项；当为False时，模型不会添加截距项。</p><p>​copy_X（默认为True）</p><p>​copy_X参数控制是否复制输入特征数据。当copy_X为True时，输入特征数据会被复制，以防止对原始数据的修改。当copy_X为False时，模型将直接使用传入的输入特征数据。</p><p>​n_jobs（默认为None）</p><p>​n_jobs参数指定模型拟合过程中要使用的CPU核心数量。如果设置为None，则使用默认的核心数。如果设置为-1，则使用所有可用的核心。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冬日济南</title>
      <link href="/2023/12/25/%E5%86%AC%E6%97%A5%E6%B5%8E%E5%8D%97/"/>
      <url>/2023/12/25/%E5%86%AC%E6%97%A5%E6%B5%8E%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="冬日济南"><a href="#冬日济南" class="headerlink" title="冬日济南"></a><strong>冬日济南</strong></h1><h2 id="作品名称：探索济南冬的vlog——神秘的“神秘的五脊六兽”"><a href="#作品名称：探索济南冬的vlog——神秘的“神秘的五脊六兽”" class="headerlink" title="作品名称：探索济南冬的vlog——神秘的“神秘的五脊六兽”"></a>作品名称：探索济南冬的vlog——神秘的“神秘的五脊六兽”</h2><iframe height="500" width="800" src="\images\postsImg\冬日济南\231053010802富佳.mp4"></iframe><h2 id><a href="#" class="headerlink" title></a></h2><h3 id="作品简介："><a href="#作品简介：" class="headerlink" title="作品简介："></a>作品简介：</h3><p>​选择轻松简单的vlog形式来展示济南的冬天，从三个角度来探索属于济南新老建筑上的秘密，体会济南的风土人情。本片以“本来目的”“实际目的”“最终目的”为时间线层层递进构造整体叙述的逻辑，切入主题循序渐进以古建筑的屋檐相关话题引入介绍屋脊兽的时间，形态，作用以及现在的意义来探索老济南在新时代的意义与发展创新。</p><h3 id="设计说明："><a href="#设计说明：" class="headerlink" title="设计说明："></a>设计说明：</h3><p>​设计上，我怀揣着问题出发，以探索济南的屋脊兽为主题切入。整体采用vlog方式剪辑，按照时间线从出发开始打下整体轻松快乐的叙事基调。地点选择上，同时以济南的有名地标建筑和经典如:大明湖，宽厚里等等从大众熟知的低点入手，拉进与观看者的距离，将观众拉入济南冬日的氛围，为后续的引入打下基础。手法上，利用黑场视频与渐入等营造电影感，让观看者更沉浸式的感受济南古建筑的魅力。利用对比来引入我们本视频的主题，探索济南古建筑上的屋脊兽，为大家介绍屋脊兽的来历，目的和作用，学习屋脊兽相关的小知识。素材上，的选取多处采用对比的手法，如本来以为的目的与实际目的对比，东方建筑与西方建筑对比来更突出作品的主题。作为拍摄者采用Lolita裙子的妆造风格来进行拍摄，更新大众对济南的新看法，提现新时代新济南下的包容和创新 为济南的美提供更多的可能性和创造性。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 济南 </tag>
            
            <tag> 多媒体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android焕壁</title>
      <link href="/2023/12/23/Android%E7%84%95%E5%A3%81/"/>
      <url>/2023/12/23/Android%E7%84%95%E5%A3%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Android焕壁"><a href="#Android焕壁" class="headerlink" title="Android焕壁"></a><strong>Android焕壁</strong></h1><h2 id="一、项目背景与意义"><a href="#一、项目背景与意义" class="headerlink" title="一、项目背景与意义"></a>一、项目背景与意义</h2><h3 id="1-1项目开发意义"><a href="#1-1项目开发意义" class="headerlink" title="1.1项目开发意义"></a>1.1项目开发意义</h3><p>​随着手机的不断普及与发展，人们对于个性化需求的不断提升。而手机成为人们生活中交流时间最长的电子产品，“壁纸”已经成为人们生活中不可或缺的一部分。用户浏览各种壁纸网站与APP从中寻找，收藏，更换自己喜欢的壁纸，不仅有让用户手机更简洁美观的实际作用，更能为用户提供不少情绪价值。</p><p>​国内外壁纸软件虽然层出不穷，但免费且能持续保障壁纸质量的APP却很少。因此基于这种实际情况，我们的小组决定开发一款与市面上截然不同的壁纸软件，最大也是最特别的不同之处在于我们不收费拥有更广阔的用户空间，让每一位用户都可以免费获得优质的壁纸资源。我们小组坚持以让用户可以不花一分钱用上好看的壁纸为宗旨以坚实的壁纸质量，多样的壁纸配件，精湛的艺术设计，精准服务用户对壁纸软件的所有需求。</p><h3 id="1-2项目时代背景"><a href="#1-2项目时代背景" class="headerlink" title="1.2项目时代背景"></a>1.2项目时代背景</h3><p>​随着5G时代的到来，智能手机早已经走入人们的生活，为人们提供许多便捷的服务。互联网已经不再局限与传统的PC终端，而以为代表的移动互联网技术正在迅速的发展。因此，这要求移动的终端必须更加的智能化、网络化。目前，移动终端平台主要有：iphone OS、Symbian、Black Berry OS等。随着手机的普及，大众对于手机个性化设置的需求不断增加，壁纸作为手机个性化不可分割的一部分，需求也大大增加。因此我们小组基于安卓平台开发一款免费壁纸软件，平衡了安卓平台下用户多样的个性化需求与稀少壁纸APP间的失调。</p><p>​选择在安卓背景下开发，首先自从2008年Google公司推出了移动终端安卓平台以来，直到现在已经有了15年了。经过多年的时间的验证，安卓系统已经非常的完善。加之目前手机开发者的大环境安卓已经成为大众手机厂商的首选。即使接连宣传自己要推出各自专属系统的厂商，其实质也是基于安卓系统上对于用户交互系统显示方式的简单改革，因此用安卓背景作为开发背景无疑是不二之选。</p><p>​其次Android是一款完全开源的移动操作系统，不仅仅手机上可以使用这个操作紫铜，而且也支持各种移动设备。Android系统底层是采用的C语言进行编写的，因此具备更好的移植性与兼容性。应用层则采用目前非常流行的JAVA语言进行开发。Android的开放性与可定制性，决定了它很大的市场潜力。这与我们壁纸软件受众广阔理念相吻合。</p><h2 id="二、市场调研与分析"><a href="#二、市场调研与分析" class="headerlink" title="二、市场调研与分析"></a>二、市场调研与分析</h2><h3 id="2-1国内市场分析"><a href="#2-1国内市场分析" class="headerlink" title="2.1国内市场分析"></a>2.1国内市场分析</h3><p>​随着我国科技的不断发展，手机逐渐重要的地位使得交互界面的个性化越来越重要，不仅是手机进行输入和输出的重要媒介，任何手机信息交换的大部分过程都是通过手机界面交互进行的，不同的交互界面也将给人们带来不同的视觉感受</p><p>​壁纸软件在如今的市面上层出不穷，国内各大平台手机软件商店都有很多的壁纸软件，尤其是是在我国壁纸软件基本上都是出厂自带，大多数国内的手机厂家在生产手机的时候都是自带壁纸软件的，比如说：小米、华为、VIVO等。但其都有一个很重要的问题即用户好不容易找到一个自己喜欢的壁纸，却发现不少藏在软件内的隐藏收费，因此手机厂商自带的壁纸软件实际应用效果并不理想。因此我们小组致力打造一个免费的、丰富的壁纸软件来解决以上的问题去满足消费者。</p><h3 id="2-2国外市场分析"><a href="#2-2国外市场分析" class="headerlink" title="2.2国外市场分析"></a>2.2国外市场分析</h3><p>​从电脑端的WindowsXP的蓝天绿草到iPhone雨水滑落玻璃，再到各种可以自己设计的动态壁纸与换皮肤的灵动岛足以看出说明对壁纸修饰手机的重视程度。国外对壁纸软件的发展和研究总体来说领先我国，但由于其下载困难，用户定位不精准，与国内机型适配度低等困难，国内用户很难从中找到适合自己的APP。</p><h2 id="三、设计说明"><a href="#三、设计说明" class="headerlink" title="三、设计说明"></a>三、设计说明</h2><h3 id="3-1实验所需材料器具"><a href="#3-1实验所需材料器具" class="headerlink" title="3.1实验所需材料器具"></a>3.1实验所需材料器具</h3><p>Android Studio,SDK</p><h3 id="3-2小组成员分工"><a href="#3-2小组成员分工" class="headerlink" title="3.2小组成员分工"></a>3.2小组成员分工</h3><p>富佳：组长，统筹协调负责文书部分撰写和部分代码实现</p><p>夏取明：技术实现，负责总体架构搭建与大部分功能实现</p><h2 id="四、软件设计与实现"><a href="#四、软件设计与实现" class="headerlink" title="四、软件设计与实现"></a>四、软件设计与实现</h2><p>核心功能代码：</p><p>WallpaperManager (壁纸管理器) 是 Android 提供的用于管理壁纸的一个 API</p><p>设置壁纸的相关方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>setBitmap(Bitmap  bitmap)</td><td>将壁纸设置为 bitmap 所代表的位图</td></tr><tr><td>setResource(int  resid)</td><td>将壁纸设置为 resid 资源所代表的图片</td></tr><tr><td>setStream(InputStream  data)</td><td>将壁纸设置为 data 数据所代表的图片</td></tr></tbody></table><p>其它方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>clear()</td><td>清除壁纸，设置回系统默认的壁纸</td></tr><tr><td>getDesiredMinimumHeight()</td><td>最小壁纸高度</td></tr><tr><td>getDesiredMinimumWidth()</td><td>最小壁纸宽度</td></tr><tr><td>getDrawable()</td><td>获得当前系统壁纸，如果没有设置壁纸，则返回系统默认壁纸</td></tr><tr><td>getWallpaperInfo()</td><td>假如当前壁纸是动态壁纸，返回动态壁纸信息</td></tr><tr><td>peekDrawable()</td><td>获得当前系统壁纸，如果没设置壁纸的话返回 null</td></tr></tbody></table><p>具体实现：</p><p>1.获得 WallpaperManager 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WallpaperManager</span> <span class="variable">wpManager</span> <span class="operator">=</span>WallpaperManager.getInstance(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure><p>2.设置壁纸需要的权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.SET_WALLPAPER&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>3.壁纸维护工作</p><p>​壁纸运行在一个Android服务之中，这个服务的名字叫做WallpaperService。当用户选择了一个壁纸之后，此壁纸所对应的WallpaperService便会启动并开始进行壁纸的绘制工作。Engine是WallpaperService中的一个内部类，实现了壁纸窗口的创建以及Surface的维护工作。</p><p>4.WallpaperManagerService</p><p>​这个系统服务用于管理壁纸的运行与切换，并通过WallpaperManager类向外界提供操作壁纸的接口。这一层次主要体现了Android对壁纸的管理方式。</p><p>5.WindowManagerService</p><p>​用于计算壁纸窗口的Z序、可见性以及为壁纸应用窗口动画。这一层次主要体现了Android对壁纸窗口的管理方式。</p><h3 id="4-1简洁的界面"><a href="#4-1简洁的界面" class="headerlink" title="4.1简洁的界面"></a>4.1简洁的界面</h3><p>​我们APP的界面非常的简洁清晰，分为四大模块。除了用户自主点击外，只能看到无痕滑动铺设的图片，在滑动浏览图片的过程中完全沉浸，给用户更沉浸欣赏图片和选择的机会。不会受到外界干扰，只凭借自己心动的感觉来挑选心怡的壁纸。</p><p>l 壁纸展示：</p><p><img src="/../images/postsImg/Android%E7%84%95%E5%A3%81/image-20241212142425028.png" alt="image-20241212142425028"></p><p>l 启动页效果如下：</p><p><img src="/../images/postsImg/Android%E7%84%95%E5%A3%81/image-20241212142435523.png" alt="image-20241212142435523"></p><p>l 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WelcomeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;HandlerLeak&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (msg.what == <span class="number">1</span>)&#123;</span><br><span class="line">                    startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(WelcomeActivity.<span class="built_in">this</span>, MainActivity.class));</span><br><span class="line">                    overridePendingTransition(R.anim.right_in, R.anim.left_out);</span><br><span class="line">                    finish();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="built_in">super</span>.handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 全屏</span></span><br><span class="line">        <span class="comment">// getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.activity_welcome);</span><br><span class="line"></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv_welcom_animation1</span> <span class="operator">=</span> findViewById(R.id.tv_welcom_animation1);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv_welcom_animation2</span> <span class="operator">=</span> findViewById(R.id.tv_welcom_animation2);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv_welcom_animation3</span> <span class="operator">=</span> findViewById(R.id.tv_welcom_animation3);</span><br><span class="line">        <span class="type">LinearLayout</span> <span class="variable">ll_welcom_animation4</span> <span class="operator">=</span> findViewById(R.id.ll_welcom_animation4);</span><br><span class="line">        <span class="type">LinearLayout</span> <span class="variable">ll_welcom_animation5</span> <span class="operator">=</span> findViewById(R.id.ll_welcom_animation5);</span><br><span class="line"></span><br><span class="line">        scaleAnimation3(tv_welcom_animation1);</span><br><span class="line">        scaleAnimation2(tv_welcom_animation2);</span><br><span class="line">        scaleAnimation1(tv_welcom_animation3);</span><br><span class="line">        scaleAnimation1(ll_welcom_animation4);</span><br><span class="line">        scaleAnimation1(ll_welcom_animation5);</span><br><span class="line"></span><br><span class="line">        handler.sendEmptyMessageDelayed(<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缩放动画方法</span></span><br><span class="line">    <span class="type">ScaleAnimation</span> <span class="variable">animation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScaleAnimation</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">            Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scaleAnimation1</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="comment">//延迟1s开始</span></span><br><span class="line">         animation.setStartOffset(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//持续0.5s</span></span><br><span class="line">        animation.setDuration(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//3. 启动动画</span></span><br><span class="line">        v.startAnimation(animation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scaleAnimation2</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="comment">//延迟0.6s开始</span></span><br><span class="line">        animation.setStartOffset(<span class="number">600</span>);</span><br><span class="line">        <span class="comment">//持续0.5s</span></span><br><span class="line">        animation.setDuration(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//3. 启动动画</span></span><br><span class="line">        v.startAnimation(animation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scaleAnimation3</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="comment">//延迟0.2s开始</span></span><br><span class="line">        animation.setStartOffset(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//持续0.5s</span></span><br><span class="line">        animation.setDuration(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//3. 启动动画</span></span><br><span class="line">        v.startAnimation(animation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>l 首页效果图：</p><p><img src="/../images/postsImg/Android%E7%84%95%E5%A3%81/image-20241212142516123.png" alt="image-20241212142516123"></p><p>l 壁纸详情：</p><p><img src="/../images/postsImg/Android%E7%84%95%E5%A3%81/image-20241212142532373.png" alt="image-20241212142532373"></p><p><img src="/../images/postsImg/Android%E7%84%95%E5%A3%81/image-20241212142639437.png" alt="image-20241212142639437"></p><h3 id="4-3免费功能介绍"><a href="#4-3免费功能介绍" class="headerlink" title="4.3免费功能介绍"></a>4.3免费功能介绍</h3><p>​Android焕壁整个软件没有附加收费等其他隐藏收费，是完全免费且开源的壁纸软件，，可以让世界各地人民都用上心怡的壁纸，解决各大壁纸软件收费搞，收费贵，隐藏消费高的缺点。</p><h3 id="4-4灵活的裁剪功能"><a href="#4-4灵活的裁剪功能" class="headerlink" title="4.4灵活的裁剪功能"></a>4.4灵活的裁剪功能</h3><p>​用户可以自主决定保留图片的部分还是全部，可以重新构图亦或者叠加等等操作，更具个性化和灵活性。用户也可以选择自己制作喜爱的壁纸上传，我们更具有万千模版供给用户选择。</p><h2 id="4-5壁纸预览功能"><a href="#4-5壁纸预览功能" class="headerlink" title="4.5壁纸预览功能"></a>4.5壁纸预览功能</h2><p>​Android焕壁提供壁纸预览功能，节省用户时间软件自带的预览功能，省去了跳转到系统设置的时间，快速确认壁纸是否符合自己的心意。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​一张壁纸，一低头看见小小一方天地间樱花花瓣漫天飞舞，可以带你走出此身正做的格子间，逃离窗外的阴霾天里看到不一样的风景。在信息爆炸的现代世界挑选一张合适的壁纸并不困难，但随时可以选择符合心意壁纸却又不太容易，我们小组所设计的 Android焕壁正是为了给每一位用户提供合适壁纸选择的壁纸软件。我们不仅仅局限于免费这一个特点拥有超大的无版权图片库，以及按风格，系统契合程度等各种帮助用户挑选的筛选条件，只为每位用户提供一个完美的壁纸体验。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> Java </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树上的结点路径</title>
      <link href="/2023/12/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/"/>
      <url>/2023/12/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树上的结点路径"><a href="#二叉树上的结点路径" class="headerlink" title="二叉树上的结点路径"></a><strong>二叉树上的结点路径</strong></h1><h2 id="指导教师：徐龙玺"><a href="#指导教师：徐龙玺" class="headerlink" title="指导教师：徐龙玺"></a>指导教师：徐龙玺</h2><h2 id="一、设计内容及要求"><a href="#一、设计内容及要求" class="headerlink" title="一、设计内容及要求"></a>一、设计内容及要求</h2><p>​树形结构是数据结构中非常重要的非线性数据结构，树中结点之间具有明确层次关系。本课程设计是有关二叉树的存储结构及其遍历的应用，首先在采用链式存储的二叉树上，用bt指向根结点，p指向任一给定结点，然后用非递归的方式分别写出二叉树的三种遍历方式，最后编程实现求从根结点到给定结点之间的路径。</p><h2 id="二、设计思路"><a href="#二、设计思路" class="headerlink" title="二、设计思路"></a>二、设计思路</h2><h3 id="（1）设计思路分析"><a href="#（1）设计思路分析" class="headerlink" title="（1）设计思路分析"></a>（1）设计思路分析</h3><p>​要求一是对二叉树的三种非递归遍历，二叉树存储结构分为顺序存储结构和链式存储结构，这里我采用链式存储结构以及最常使用的二叉链表结点定义（一个数据域，两个指向左右孩子的指针域）。在编程语言中通常用栈这种数据结构，依靠迭代法来实现递归的逻辑。因此在非递归遍历中我首先选用结合栈数据结构，与课堂上所学递归方法不同之处在于使用迭代法来模拟递归的时候，需要特别注意栈的先进后出的特点，需要后放入要先处理的数据才可以在弹出时先处理该数据。</p><p>​要求二是求从根结点到给定结点之间的路径，首先在二叉树无论那种遍历方法都可以遍历二叉树中所有节点，但想计算根结点bt与结点*p之间的路径，依然需要借助静态数组stack来存储路径，借助栈来简化树在递归遍历过程中跟踪路径的操作。</p><p>​首先使用静态数组stack动态存储从根节点到当前节点的路径（本设计中假设stack数组大小为10即假设二叉树最大深度为10），leavel参数跟踪当前节点在树中的深度并管理stack数组。开始运行，检查根节点bt是否为空，若为空则返回代表是空子树。然后将当前结点的压入stack中，如果当前节点的值不是正在搜索的值 (p)，则函数递归调用自身来处理当前节点的左右子树；如果如果它与指定的值 p 匹配，则函数打印从根到当前结点的路径。</p><h3 id="（2）所用数据结构与算法及其优点"><a href="#（2）所用数据结构与算法及其优点" class="headerlink" title="（2）所用数据结构与算法及其优点"></a>（2）所用数据结构与算法及其优点</h3><p>​采用非递归遍历二叉树，简单直观易于实现，不需要使用系统栈进行递归调用，只需借助辅助数据结构（如栈）即可。且在遍历的过程中很容易地获得树的层次结构，也便于理解和处理。这些优点使得每种非递归遍历方法在不同的场景中都有其独特的应用价值。</p><p>​采用了树结构和线性结构中的栈。树结构作为一类重要的非线性数据结构，不仅在计算机领域应用广泛，同现实世界也有很多联系如工程上的最短路径与最低成本，人类社会的族谱等都可以用树结构表示。</p><p>​而同时采用栈结构是由于树的基本操作中的遍历操作，是按一定规则与顺序走遍二叉树的所有结点，由于二叉树本身是非线性结构，因此，树的遍历实质上是将二叉树各个节点转换成一个线性序列来表示。而求结点路径的本质就是对这个转换成的线性序列进行操作，因此需要借用栈先进后出的特点来找出所有经过的结点。采用栈来计算根节点到指定结点路径的优点有：</p><ol><li>优化路径存储： 使用栈能够方便地存储从根节点到当前节点的路径。每当访问一个节点时，将该节点的值压入栈中，这样栈中的内容就表示了当前访问节点的路径。</li><li>简化输出：在找到目标节点时，直接通过栈的内容就可以输出完整的路径，不需要额外的数据结构简化了输出路径的逻辑。</li></ol><h3 id="（3）重要功能流程图"><a href="#（3）重要功能流程图" class="headerlink" title="（3）重要功能流程图"></a>（3）重要功能流程图</h3><p>1.非递归遍历（中序为例）</p><p><img src="/../images/postsImg/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/clip_image002.gif" alt="img"></p><p>2.求指定结点路径</p><p><img src="/../images/postsImg/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/clip_image002-17339995913571.gif" alt="img"></p><p>3.系统功能模块图</p><p><img src="/../images/postsImg/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/clip_image002-17339995989332.gif" alt="img"></p><h2 id="三、设计结果及分析"><a href="#三、设计结果及分析" class="headerlink" title="三、设计结果及分析"></a>三、设计结果及分析</h2><p>​第一部分二叉树的非递归遍历，分别用空二叉树，满二叉树，完全二叉树，普通二叉树四种特别的二叉树来运行测试，二叉树示意图如下：</p><p><img src="/../images/postsImg/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/clip_image002.jpg" alt="img"></p><p>​空二叉树：直接返回，退出函数</p><p>​满二叉树：前序结果ABDECFG，中序结果DBEAFCG，后序结果DEBFGCA</p><p>​完全二叉树：前序结果ABDECF,中序结果DBEAFC,后序结果DEBFCA</p><p>​普通二叉树：前序结果ABDEFC,中序结果BEDFAC，后序结果EFDBCA</p><p>​三种非递归遍历的时间复杂度为：O(N)</p><p>​第二部分求根节点到指定结点的路径，以上述图6中的普通二叉树为例分别取距离根节点最近的A结点本身，距离最远的E结点，以及随机选定的结点C进行测试结果如下：</p><p><img src="/../images/postsImg/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/clip_image002-17339996517293.jpg" alt="img"></p><p><img src="/../images/postsImg/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/clip_image002-17339996556404.jpg" alt="img"></p><p><img src="/../images/postsImg/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/clip_image002-17339996579855.jpg" alt="img"></p><p>​求根节点到指定结点的路径时间复杂度分析：SearchPath函数使用深度优先搜索的方法来查找根节点到指定结点的路径。因此对于每个结点，都会递归调用左右子树，每个结点都可能被访问一次。总的时间复杂度取决于访问结点的数量，设二叉树结点数为N，最坏情况下需要访问所有结点。因此时间复杂度为O（N）。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>​本系统实现了链式存储创建二叉树，二叉树的三种非递归遍历方式，以及求根结点到指定结点的路径三大功能。程序运行后先按1创建一个二叉树再进行后续操作(创建一次即可)。在本次课程设计中比较困难的点以及学到的重要知识主要有以下三点：</p><p>​（1）非递归遍历后序遍历</p><p>​非递归方式的后序遍历主要难点在于理解如何使用单个循环实现后序遍历，同时颠倒左右孩子的顺序，利用数组来实现前序遍历的逆序输出。通过课后查阅资料与画图方法结合最终理解了如何输出颠倒后的前序遍历序列。</p><p>​（2）递归在树结构中的运用</p><p>​递归是这段代码的核心。在每次调用 SearchPath 函数时，它会深入二叉树的左子树和右子树，并在找到目标节点或者遍历完整棵树后进行回溯。这种递归调用可能会导致对递归的理解困难，特别是在处理函数参数和递归回溯时。深入学习理解了静态数组stack的相关知识，并运用到实际代码中去。本系统中用静态数组stack动态地存储从根节点到当前结点的路径，用level来正确追踪路径，同时注意到静态数组的大小限制可能会影响到可以处理路径的长度。</p><p>​（3）getchar()的妙用</p><p><img src="/../images/postsImg/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8A%E7%9A%84%E7%BB%93%E7%82%B9%E8%B7%AF%E5%BE%84/clip_image002-17339997052736.gif" alt="img"></p><p>​出现问题：在创建根节点是出现回车符，未能正确接收根节点数据</p><p>​解决办法：在 scanf() 读取用户选择 (x) 后，包含 getchar() 的原因是为了消耗输入缓冲区中遗留的换行字符。当用户输入整数并按Enter键时，换行字符也会添加到输入缓冲区。如果不清除，这个换行字符可能会被下一个输入操作消耗或影响程序逻辑。因此我用了课堂上讲getchar() 函数用于捕获用户在使用 scanf() 输入后输入的换行字符 (‘\n’)，确保程序可以按预期运行。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2020/12/04/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/12/04/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>byte  占1字节  </p><p>short  占2字节</p><p>int  占4字节</p><p>long  占8字节</p><table><thead><tr><th></th><th align="left">byte</th><th align="left">short</th><th align="left">int</th><th align="left">long</th><th><strong>float</strong></th><th><strong>double</strong></th><th><strong>char</strong></th><th><strong>boolean</strong></th></tr></thead><tbody><tr><td>大小</td><td align="left">8位</td><td align="left">16 位</td><td align="left">32位</td><td align="left">64 位</td><td>32位</td><td>64 位</td><td>16 位</td><td>1位</td></tr><tr><td></td><td align="left">最大存储数据量是255</td><td align="left">最大数据存储量是65536</td><td align="left">最大数据存储容量是2的32次方减1</td><td align="left">最大数据存储容量是2的64次方减1</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td align="left">数据范围是-128~127之间</td><td align="left">数据范围是-32768~32767之间</td><td align="left">数据范围是负的2的31次方到正的2的31次方减1</td><td align="left">数据范围为负的2的63次方到正的2的63次方减1</td><td>数据范围在3.4e-45~1.4e38</td><td>数据范围在4.9e-324~1.8e308</td><td>只有true和false两个取值</td><td>存储Unicode码，用单引号赋值</td></tr><tr><td>默认值</td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left"><strong>0L</strong></td><td><strong>0.0f</strong></td><td><strong>0.0d</strong></td><td></td><td><strong>false</strong></td></tr><tr><td></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>byte</td><td></td><td></td><td></td><td></td></tr><tr><td>short</td><td></td><td></td><td></td><td></td></tr><tr><td>int</td><td></td><td></td><td></td><td></td></tr><tr><td>long</td><td></td><td></td><td></td><td></td></tr><tr><td>float</td><td></td><td></td><td></td><td></td></tr><tr><td>double</td><td></td><td></td><td></td><td></td></tr><tr><td>char</td><td></td><td></td><td></td><td></td></tr><tr><td>boolean</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>位（bit）：是计算机 内部数据 储存的最小单位，11001100是一个八位二进制数。<br>字节（byte）：是计算机中 数据处理 的基本单位，习惯上用大写 B 来表示，<br>1B (byte,字节) &#x3D; 8bit (位)<br>字符：是指计算机中使用的字母、数字、字和符号</p><p>1bit表示1位,<br>1Byte表示<br>个字节1B&#x3D;8b。<br>1024B&#x3D;1KB<br>1024KB&#x3D;1M<br>1024M&#x3D;1G.</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
